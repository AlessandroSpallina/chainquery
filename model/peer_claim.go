// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PeerClaim is an object representing the database table.
type PeerClaim struct {
	PeerID   string    `boil:"peer_id" json:"peer_id" toml:"peer_id" yaml:"peer_id"`
	ClaimID  string    `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	Created  time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	LastSeen time.Time `boil:"last_seen" json:"last_seen" toml:"last_seen" yaml:"last_seen"`

	R *peerClaimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L peerClaimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PeerClaimColumns = struct {
	PeerID   string
	ClaimID  string
	Created  string
	LastSeen string
}{
	PeerID:   "peer_id",
	ClaimID:  "claim_id",
	Created:  "created",
	LastSeen: "last_seen",
}

// peerClaimR is where relationships are stored.
type peerClaimR struct {
}

// peerClaimL is where Load methods for each relationship are stored.
type peerClaimL struct{}

var (
	peerClaimColumns               = []string{"peer_id", "claim_id", "created", "last_seen"}
	peerClaimColumnsWithoutDefault = []string{"peer_id", "claim_id"}
	peerClaimColumnsWithDefault    = []string{"created", "last_seen"}
	peerClaimPrimaryKeyColumns     = []string{"peer_id", "claim_id"}
)

type (
	// PeerClaimSlice is an alias for a slice of pointers to PeerClaim.
	// This should generally be used opposed to []PeerClaim.
	PeerClaimSlice []*PeerClaim

	peerClaimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	peerClaimType                 = reflect.TypeOf(&PeerClaim{})
	peerClaimMapping              = queries.MakeStructMapping(peerClaimType)
	peerClaimPrimaryKeyMapping, _ = queries.BindMapping(peerClaimType, peerClaimMapping, peerClaimPrimaryKeyColumns)
	peerClaimInsertCacheMut       sync.RWMutex
	peerClaimInsertCache          = make(map[string]insertCache)
	peerClaimUpdateCacheMut       sync.RWMutex
	peerClaimUpdateCache          = make(map[string]updateCache)
	peerClaimUpsertCacheMut       sync.RWMutex
	peerClaimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single peerClaim record from the query, and panics on error.
func (q peerClaimQuery) OneP() *PeerClaim {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single peerClaim record from the query.
func (q peerClaimQuery) One() (*PeerClaim, error) {
	o := &PeerClaim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for peer_claim")
	}

	return o, nil
}

// AllP returns all PeerClaim records from the query, and panics on error.
func (q peerClaimQuery) AllP() PeerClaimSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all PeerClaim records from the query.
func (q peerClaimQuery) All() (PeerClaimSlice, error) {
	var o []*PeerClaim

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PeerClaim slice")
	}

	return o, nil
}

// CountP returns the count of all PeerClaim records in the query, and panics on error.
func (q peerClaimQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all PeerClaim records in the query.
func (q peerClaimQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count peer_claim rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q peerClaimQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q peerClaimQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if peer_claim exists")
	}

	return count > 0, nil
}

// PeerClaimsG retrieves all records.
func PeerClaimsG(mods ...qm.QueryMod) peerClaimQuery {
	return PeerClaims(boil.GetDB(), mods...)
}

// PeerClaims retrieves all the records using an executor.
func PeerClaims(exec boil.Executor, mods ...qm.QueryMod) peerClaimQuery {
	mods = append(mods, qm.From("`peer_claim`"))
	return peerClaimQuery{NewQuery(exec, mods...)}
}

// FindPeerClaimG retrieves a single record by ID.
func FindPeerClaimG(peerID string, claimID string, selectCols ...string) (*PeerClaim, error) {
	return FindPeerClaim(boil.GetDB(), peerID, claimID, selectCols...)
}

// FindPeerClaimGP retrieves a single record by ID, and panics on error.
func FindPeerClaimGP(peerID string, claimID string, selectCols ...string) *PeerClaim {
	retobj, err := FindPeerClaim(boil.GetDB(), peerID, claimID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPeerClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPeerClaim(exec boil.Executor, peerID string, claimID string, selectCols ...string) (*PeerClaim, error) {
	peerClaimObj := &PeerClaim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `peer_claim` where `peer_id`=? AND `claim_id`=?", sel,
	)

	q := queries.Raw(exec, query, peerID, claimID)

	err := q.Bind(peerClaimObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from peer_claim")
	}

	return peerClaimObj, nil
}

// FindPeerClaimP retrieves a single record by ID with an executor, and panics on error.
func FindPeerClaimP(exec boil.Executor, peerID string, claimID string, selectCols ...string) *PeerClaim {
	retobj, err := FindPeerClaim(exec, peerID, claimID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PeerClaim) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *PeerClaim) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *PeerClaim) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *PeerClaim) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no peer_claim provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(peerClaimColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	peerClaimInsertCacheMut.RLock()
	cache, cached := peerClaimInsertCache[key]
	peerClaimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			peerClaimColumns,
			peerClaimColumnsWithDefault,
			peerClaimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(peerClaimType, peerClaimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(peerClaimType, peerClaimMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `peer_claim` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `peer_claim` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `peer_claim` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, peerClaimPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to insert into peer_claim")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PeerID,
		o.ClaimID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for peer_claim")
	}

CacheNoHooks:
	if !cached {
		peerClaimInsertCacheMut.Lock()
		peerClaimInsertCache[key] = cache
		peerClaimInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single PeerClaim record. See Update for
// whitelist behavior description.
func (o *PeerClaim) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single PeerClaim record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *PeerClaim) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the PeerClaim, and panics on error.
// See Update for whitelist behavior description.
func (o *PeerClaim) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the PeerClaim.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *PeerClaim) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	peerClaimUpdateCacheMut.RLock()
	cache, cached := peerClaimUpdateCache[key]
	peerClaimUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			peerClaimColumns,
			peerClaimPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update peer_claim, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `peer_claim` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, peerClaimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(peerClaimType, peerClaimMapping, append(wl, peerClaimPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update peer_claim row")
	}

	if !cached {
		peerClaimUpdateCacheMut.Lock()
		peerClaimUpdateCache[key] = cache
		peerClaimUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q peerClaimQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q peerClaimQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for peer_claim")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PeerClaimSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PeerClaimSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PeerClaimSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PeerClaimSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `peer_claim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peerClaimPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in peerClaim slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PeerClaim) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *PeerClaim) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *PeerClaim) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PeerClaim) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no peer_claim provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(peerClaimColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	peerClaimUpsertCacheMut.RLock()
	cache, cached := peerClaimUpsertCache[key]
	peerClaimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			peerClaimColumns,
			peerClaimColumnsWithDefault,
			peerClaimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			peerClaimColumns,
			peerClaimPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert peer_claim, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "peer_claim", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `peer_claim` WHERE `peer_id`=? AND `claim_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(peerClaimType, peerClaimMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(peerClaimType, peerClaimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for peer_claim")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.PeerID,
		o.ClaimID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for peer_claim")
	}

CacheNoHooks:
	if !cached {
		peerClaimUpsertCacheMut.Lock()
		peerClaimUpsertCache[key] = cache
		peerClaimUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single PeerClaim record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PeerClaim) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single PeerClaim record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PeerClaim) DeleteG() error {
	if o == nil {
		return errors.New("model: no PeerClaim provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single PeerClaim record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PeerClaim) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single PeerClaim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PeerClaim) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no PeerClaim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), peerClaimPrimaryKeyMapping)
	sql := "DELETE FROM `peer_claim` WHERE `peer_id`=? AND `claim_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from peer_claim")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q peerClaimQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q peerClaimQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no peerClaimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from peer_claim")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PeerClaimSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PeerClaimSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no PeerClaim slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PeerClaimSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PeerClaimSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no PeerClaim slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `peer_claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peerClaimPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from peerClaim slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *PeerClaim) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *PeerClaim) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PeerClaim) ReloadG() error {
	if o == nil {
		return errors.New("model: no PeerClaim provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PeerClaim) Reload(exec boil.Executor) error {
	ret, err := FindPeerClaim(exec, o.PeerID, o.ClaimID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PeerClaimSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PeerClaimSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerClaimSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty PeerClaimSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerClaimSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	peerClaims := PeerClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `peer_claim`.* FROM `peer_claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peerClaimPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&peerClaims)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PeerClaimSlice")
	}

	*o = peerClaims

	return nil
}

// PeerClaimExists checks if the PeerClaim row exists.
func PeerClaimExists(exec boil.Executor, peerID string, claimID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `peer_claim` where `peer_id`=? AND `claim_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, peerID, claimID)
	}

	row := exec.QueryRow(sql, peerID, claimID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if peer_claim exists")
	}

	return exists, nil
}

// PeerClaimExistsG checks if the PeerClaim row exists.
func PeerClaimExistsG(peerID string, claimID string) (bool, error) {
	return PeerClaimExists(boil.GetDB(), peerID, claimID)
}

// PeerClaimExistsGP checks if the PeerClaim row exists. Panics on error.
func PeerClaimExistsGP(peerID string, claimID string) bool {
	e, err := PeerClaimExists(boil.GetDB(), peerID, claimID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PeerClaimExistsP checks if the PeerClaim row exists. Panics on error.
func PeerClaimExistsP(exec boil.Executor, peerID string, claimID string) bool {
	e, err := PeerClaimExists(exec, peerID, claimID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
