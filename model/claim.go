// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Claim is an object representing the database table.
type Claim struct {
	ID                uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionHashID null.String `boil:"transaction_hash_id" json:"transaction_hash_id,omitempty" toml:"transaction_hash_id" yaml:"transaction_hash_id,omitempty"`
	Vout              uint        `boil:"vout" json:"vout" toml:"vout" yaml:"vout"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ClaimID           string      `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	ClaimType         int8        `boil:"claim_type" json:"claim_type" toml:"claim_type" yaml:"claim_type"`
	PublisherID       null.String `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	PublisherSig      null.String `boil:"publisher_sig" json:"publisher_sig,omitempty" toml:"publisher_sig" yaml:"publisher_sig,omitempty"`
	Certificate       null.String `boil:"certificate" json:"certificate,omitempty" toml:"certificate" yaml:"certificate,omitempty"`
	SDHash            null.String `boil:"sd_hash" json:"sd_hash,omitempty" toml:"sd_hash" yaml:"sd_hash,omitempty"`
	TransactionTime   null.Uint64 `boil:"transaction_time" json:"transaction_time,omitempty" toml:"transaction_time" yaml:"transaction_time,omitempty"`
	Version           string      `boil:"version" json:"version" toml:"version" yaml:"version"`
	ValueAsHex        string      `boil:"value_as_hex" json:"value_as_hex" toml:"value_as_hex" yaml:"value_as_hex"`
	ValueAsJSON       null.String `boil:"value_as_json" json:"value_as_json,omitempty" toml:"value_as_json" yaml:"value_as_json,omitempty"`
	ValidAtHeight     uint        `boil:"valid_at_height" json:"valid_at_height" toml:"valid_at_height" yaml:"valid_at_height"`
	Height            uint        `boil:"height" json:"height" toml:"height" yaml:"height"`
	EffectiveAmount   uint64      `boil:"effective_amount" json:"effective_amount" toml:"effective_amount" yaml:"effective_amount"`
	Author            null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ContentType       null.String `boil:"content_type" json:"content_type,omitempty" toml:"content_type" yaml:"content_type,omitempty"`
	IsNSFW            bool        `boil:"is_nsfw" json:"is_nsfw" toml:"is_nsfw" yaml:"is_nsfw"`
	Language          null.String `boil:"language" json:"language,omitempty" toml:"language" yaml:"language,omitempty"`
	ThumbnailURL      null.String `boil:"thumbnail_url" json:"thumbnail_url,omitempty" toml:"thumbnail_url" yaml:"thumbnail_url,omitempty"`
	Title             null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Fee               float64     `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	FeeCurrency       null.String `boil:"fee_currency" json:"fee_currency,omitempty" toml:"fee_currency" yaml:"fee_currency,omitempty"`
	IsFiltered        bool        `boil:"is_filtered" json:"is_filtered" toml:"is_filtered" yaml:"is_filtered"`
	BidState          string      `boil:"bid_state" json:"bid_state" toml:"bid_state" yaml:"bid_state"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ModifiedAt        time.Time   `boil:"modified_at" json:"modified_at" toml:"modified_at" yaml:"modified_at"`
	FeeAddress        string      `boil:"fee_address" json:"fee_address" toml:"fee_address" yaml:"fee_address"`
	ClaimAddress      string      `boil:"claim_address" json:"claim_address" toml:"claim_address" yaml:"claim_address"`
	IsCertValid       bool        `boil:"is_cert_valid" json:"is_cert_valid" toml:"is_cert_valid" yaml:"is_cert_valid"`
	IsCertProcessed   bool        `boil:"is_cert_processed" json:"is_cert_processed" toml:"is_cert_processed" yaml:"is_cert_processed"`

	R *claimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimColumns = struct {
	ID                string
	TransactionHashID string
	Vout              string
	Name              string
	ClaimID           string
	ClaimType         string
	PublisherID       string
	PublisherSig      string
	Certificate       string
	SDHash            string
	TransactionTime   string
	Version           string
	ValueAsHex        string
	ValueAsJSON       string
	ValidAtHeight     string
	Height            string
	EffectiveAmount   string
	Author            string
	Description       string
	ContentType       string
	IsNSFW            string
	Language          string
	ThumbnailURL      string
	Title             string
	Fee               string
	FeeCurrency       string
	IsFiltered        string
	BidState          string
	CreatedAt         string
	ModifiedAt        string
	FeeAddress        string
	ClaimAddress      string
	IsCertValid       string
	IsCertProcessed   string
}{
	ID:                "id",
	TransactionHashID: "transaction_hash_id",
	Vout:              "vout",
	Name:              "name",
	ClaimID:           "claim_id",
	ClaimType:         "claim_type",
	PublisherID:       "publisher_id",
	PublisherSig:      "publisher_sig",
	Certificate:       "certificate",
	SDHash:            "sd_hash",
	TransactionTime:   "transaction_time",
	Version:           "version",
	ValueAsHex:        "value_as_hex",
	ValueAsJSON:       "value_as_json",
	ValidAtHeight:     "valid_at_height",
	Height:            "height",
	EffectiveAmount:   "effective_amount",
	Author:            "author",
	Description:       "description",
	ContentType:       "content_type",
	IsNSFW:            "is_nsfw",
	Language:          "language",
	ThumbnailURL:      "thumbnail_url",
	Title:             "title",
	Fee:               "fee",
	FeeCurrency:       "fee_currency",
	IsFiltered:        "is_filtered",
	BidState:          "bid_state",
	CreatedAt:         "created_at",
	ModifiedAt:        "modified_at",
	FeeAddress:        "fee_address",
	ClaimAddress:      "claim_address",
	IsCertValid:       "is_cert_valid",
	IsCertProcessed:   "is_cert_processed",
}

// ClaimRels is where relationship names are stored.
var ClaimRels = struct {
	TransactionHash string
}{
	TransactionHash: "TransactionHash",
}

// claimR is where relationships are stored.
type claimR struct {
	TransactionHash *Transaction
}

// NewStruct creates a new relationship struct
func (*claimR) NewStruct() *claimR {
	return &claimR{}
}

// claimL is where Load methods for each relationship are stored.
type claimL struct{}

var (
	claimColumns               = []string{"id", "transaction_hash_id", "vout", "name", "claim_id", "claim_type", "publisher_id", "publisher_sig", "certificate", "sd_hash", "transaction_time", "version", "value_as_hex", "value_as_json", "valid_at_height", "height", "effective_amount", "author", "description", "content_type", "is_nsfw", "language", "thumbnail_url", "title", "fee", "fee_currency", "is_filtered", "bid_state", "created_at", "modified_at", "fee_address", "claim_address", "is_cert_valid", "is_cert_processed"}
	claimColumnsWithoutDefault = []string{"transaction_hash_id", "vout", "name", "claim_id", "claim_type", "publisher_id", "publisher_sig", "certificate", "sd_hash", "transaction_time", "version", "value_as_hex", "value_as_json", "valid_at_height", "height", "author", "description", "content_type", "language", "thumbnail_url", "title", "fee_currency", "fee_address", "claim_address", "is_cert_valid", "is_cert_processed"}
	claimColumnsWithDefault    = []string{"id", "effective_amount", "is_nsfw", "fee", "is_filtered", "bid_state", "created_at", "modified_at"}
	claimPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClaimSlice is an alias for a slice of pointers to Claim.
	// This should generally be used opposed to []Claim.
	ClaimSlice []*Claim

	claimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimType                 = reflect.TypeOf(&Claim{})
	claimMapping              = queries.MakeStructMapping(claimType)
	claimPrimaryKeyMapping, _ = queries.BindMapping(claimType, claimMapping, claimPrimaryKeyColumns)
	claimInsertCacheMut       sync.RWMutex
	claimInsertCache          = make(map[string]insertCache)
	claimUpdateCacheMut       sync.RWMutex
	claimUpdateCache          = make(map[string]updateCache)
	claimUpsertCacheMut       sync.RWMutex
	claimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// OneG returns a single claim record from the query using the global executor.
func (q claimQuery) OneG() (*Claim, error) {
	return q.One(boil.GetDB())
}

// OneGP returns a single claim record from the query using the global executor, and panics on error.
func (q claimQuery) OneGP() *Claim {
	o, err := q.One(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// OneP returns a single claim record from the query, and panics on error.
func (q claimQuery) OneP(exec boil.Executor) *Claim {
	o, err := q.One(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single claim record from the query.
func (q claimQuery) One(exec boil.Executor) (*Claim, error) {
	o := &Claim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for claim")
	}

	return o, nil
}

// AllG returns all Claim records from the query using the global executor.
func (q claimQuery) AllG() (ClaimSlice, error) {
	return q.All(boil.GetDB())
}

// AllGP returns all Claim records from the query using the global executor, and panics on error.
func (q claimQuery) AllGP() ClaimSlice {
	o, err := q.All(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// AllP returns all Claim records from the query, and panics on error.
func (q claimQuery) AllP(exec boil.Executor) ClaimSlice {
	o, err := q.All(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Claim records from the query.
func (q claimQuery) All(exec boil.Executor) (ClaimSlice, error) {
	var o []*Claim

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Claim slice")
	}

	return o, nil
}

// CountG returns the count of all Claim records in the query, and panics on error.
func (q claimQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// CountGP returns the count of all Claim records in the query using the global executor, and panics on error.
func (q claimQuery) CountGP() int64 {
	c, err := q.Count(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// CountP returns the count of all Claim records in the query, and panics on error.
func (q claimQuery) CountP(exec boil.Executor) int64 {
	c, err := q.Count(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Claim records in the query.
func (q claimQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count claim rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q claimQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// ExistsGP checks if the row exists in the table using the global executor, and panics on error.
func (q claimQuery) ExistsGP() bool {
	e, err := q.Exists(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q claimQuery) ExistsP(exec boil.Executor) bool {
	e, err := q.Exists(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q claimQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if claim exists")
	}

	return count > 0, nil
}

// TransactionHash pointed to by the foreign key.
func (o *Claim) TransactionHash(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("hash=?", o.TransactionHashID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "`transaction`")

	return query
}

// LoadTransactionHash allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (claimL) LoadTransactionHash(e boil.Executor, singular bool, maybeClaim interface{}, mods queries.Applicator) error {
	var slice []*Claim
	var object *Claim

	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		if !queries.IsNil(object.TransactionHashID) {
			args = append(args, object.TransactionHashID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TransactionHashID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TransactionHashID) {
				args = append(args, obj.TransactionHashID)
			}

		}
	}

	query := NewQuery(qm.From(`transaction`), qm.WhereIn(`hash in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transaction")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionHash = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionHashClaims = append(foreign.R.TransactionHashClaims, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TransactionHashID, foreign.Hash) {
				local.R.TransactionHash = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionHashClaims = append(foreign.R.TransactionHashClaims, local)
				break
			}
		}
	}

	return nil
}

// SetTransactionHashG of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
// Uses the global database handle.
func (o *Claim) SetTransactionHashG(insert bool, related *Transaction) error {
	return o.SetTransactionHash(boil.GetDB(), insert, related)
}

// SetTransactionHashP of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
// Panics on error.
func (o *Claim) SetTransactionHashP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransactionHash(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionHashGP of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
// Uses the global database handle and panics on error.
func (o *Claim) SetTransactionHashGP(insert bool, related *Transaction) {
	if err := o.SetTransactionHash(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionHash of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
func (o *Claim) SetTransactionHash(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_hash_id"}),
		strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TransactionHashID, related.Hash)
	if o.R == nil {
		o.R = &claimR{
			TransactionHash: related,
		}
	} else {
		o.R.TransactionHash = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionHashClaims: ClaimSlice{o},
		}
	} else {
		related.R.TransactionHashClaims = append(related.R.TransactionHashClaims, o)
	}

	return nil
}

// RemoveTransactionHashG relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Claim) RemoveTransactionHashG(related *Transaction) error {
	return o.RemoveTransactionHash(boil.GetDB(), related)
}

// RemoveTransactionHashP relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Claim) RemoveTransactionHashP(exec boil.Executor, related *Transaction) {
	if err := o.RemoveTransactionHash(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionHashGP relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Claim) RemoveTransactionHashGP(related *Transaction) {
	if err := o.RemoveTransactionHash(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionHash relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Claim) RemoveTransactionHash(exec boil.Executor, related *Transaction) error {
	var err error

	queries.SetScanner(&o.TransactionHashID, nil)
	if err = o.Update(exec, boil.Whitelist("transaction_hash_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.TransactionHash = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionHashClaims {
		if queries.Equal(o.TransactionHashID, ri.TransactionHashID) {
			continue
		}

		ln := len(related.R.TransactionHashClaims)
		if ln > 1 && i < ln-1 {
			related.R.TransactionHashClaims[i] = related.R.TransactionHashClaims[ln-1]
		}
		related.R.TransactionHashClaims = related.R.TransactionHashClaims[:ln-1]
		break
	}
	return nil
}

// Claims retrieves all the records using an executor.
func Claims(mods ...qm.QueryMod) claimQuery {
	mods = append(mods, qm.From("`claim`"))
	return claimQuery{NewQuery(mods...)}
}

// FindClaimG retrieves a single record by ID.
func FindClaimG(iD uint64, selectCols ...string) (*Claim, error) {
	return FindClaim(boil.GetDB(), iD, selectCols...)
}

// FindClaimP retrieves a single record by ID with an executor, and panics on error.
func FindClaimP(exec boil.Executor, iD uint64, selectCols ...string) *Claim {
	retobj, err := FindClaim(exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClaimGP retrieves a single record by ID, and panics on error.
func FindClaimGP(iD uint64, selectCols ...string) *Claim {
	retobj, err := FindClaim(boil.GetDB(), iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaim(exec boil.Executor, iD uint64, selectCols ...string) (*Claim, error) {
	claimObj := &Claim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `claim` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, claimObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from claim")
	}

	return claimObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Claim) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Claim) InsertP(exec boil.Executor, columns boil.Columns) {
	if err := o.Insert(exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Claim) InsertGP(columns boil.Columns) {
	if err := o.Insert(boil.GetDB(), columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Claim) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no claim provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	claimInsertCacheMut.RLock()
	cache, cached := claimInsertCache[key]
	claimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			claimColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(claimType, claimMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `claim` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `claim` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `claim` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into claim")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claim")
	}

CacheNoHooks:
	if !cached {
		claimInsertCacheMut.Lock()
		claimInsertCache[key] = cache
		claimInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Claim record using the global executor.
// See Update for more documentation.
func (o *Claim) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// UpdateP uses an executor to update the Claim, and panics on error.
// See Update for more documentation.
func (o *Claim) UpdateP(exec boil.Executor, columns boil.Columns) {
	err := o.Update(exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateGP a single Claim record using the global executor. Panics on error.
// See Update for more documentation.
func (o *Claim) UpdateGP(columns boil.Columns) {
	err := o.Update(boil.GetDB(), columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Claim.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Claim) Update(exec boil.Executor, columns boil.Columns) error {
	var err error
	key := makeCacheKey(columns, nil)
	claimUpdateCacheMut.RLock()
	cache, cached := claimUpdateCache[key]
	claimUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			claimColumns,
			claimPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update claim, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `claim` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, append(wl, claimPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update claim row")
	}

	if !cached {
		claimUpdateCacheMut.Lock()
		claimUpdateCache[key] = cache
		claimUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q claimQuery) UpdateAllP(exec boil.Executor, cols M) {
	err := q.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllG updates all rows with the specified column values.
func (q claimQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q claimQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for claim")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClaimSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ClaimSlice) UpdateAllGP(cols M) {
	err := o.UpdateAll(boil.GetDB(), cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ClaimSlice) UpdateAllP(exec boil.Executor, cols M) {
	err := o.UpdateAll(exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `claim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in claim slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Claim) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Claim) UpsertGP(updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(boil.GetDB(), updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Claim) UpsertP(exec boil.Executor, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(exec, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

var mySQLClaimUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Claim) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no claim provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClaimUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimUpsertCacheMut.RLock()
	cache, cached := claimUpsertCache[key]
	claimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			claimColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			claimColumns,
			claimPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("model: unable to upsert claim, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "claim", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `claim` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimType, claimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for claim")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(claimType, claimMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for claim")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}

	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claim")
	}

CacheNoHooks:
	if !cached {
		claimUpsertCacheMut.Lock()
		claimUpsertCache[key] = cache
		claimUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Claim record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Claim) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// DeleteP deletes a single Claim record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Claim) DeleteP(exec boil.Executor) {
	err := o.Delete(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteGP deletes a single Claim record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Claim) DeleteGP() {
	err := o.Delete(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Claim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Claim) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Claim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimPrimaryKeyMapping)
	sql := "DELETE FROM `claim` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from claim")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q claimQuery) DeleteAllP(exec boil.Executor) {
	err := q.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q claimQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("model: no claimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claim")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o ClaimSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ClaimSlice) DeleteAllP(exec boil.Executor) {
	err := o.DeleteAll(exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ClaimSlice) DeleteAllGP() {
	err := o.DeleteAll(boil.GetDB())
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Claim slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claim slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Claim) ReloadG() error {
	if o == nil {
		return errors.New("model: no Claim provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Claim) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Claim) ReloadGP() {
	if err := o.Reload(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Claim) Reload(exec boil.Executor) error {
	ret, err := FindClaim(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty ClaimSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimSlice) ReloadAllGP() {
	if err := o.ReloadAll(boil.GetDB()); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `claim`.* FROM `claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ClaimSlice")
	}

	*o = slice

	return nil
}

// ClaimExistsG checks if the Claim row exists.
func ClaimExistsG(iD uint64) (bool, error) {
	return ClaimExists(boil.GetDB(), iD)
}

// ClaimExistsP checks if the Claim row exists. Panics on error.
func ClaimExistsP(exec boil.Executor, iD uint64) bool {
	e, err := ClaimExists(exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClaimExistsGP checks if the Claim row exists. Panics on error.
func ClaimExistsGP(iD uint64) bool {
	e, err := ClaimExists(boil.GetDB(), iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClaimExists checks if the Claim row exists.
func ClaimExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `claim` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if claim exists")
	}

	return exists, nil
}
