// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Peer is an object representing the database table.
type Peer struct {
	NodeID      string      `boil:"node_id" json:"node_id" toml:"node_id" yaml:"node_id"`
	KnownIPList null.String `boil:"known_i_p_list" json:"known_i_p_list,omitempty" toml:"known_i_p_list" yaml:"known_i_p_list,omitempty"`

	R *peerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L peerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PeerColumns = struct {
	NodeID      string
	KnownIPList string
}{
	NodeID:      "node_id",
	KnownIPList: "known_i_p_list",
}

// peerR is where relationships are stored.
type peerR struct {
}

// peerL is where Load methods for each relationship are stored.
type peerL struct{}

var (
	peerColumns               = []string{"node_id", "known_i_p_list"}
	peerColumnsWithoutDefault = []string{"node_id", "known_i_p_list"}
	peerColumnsWithDefault    = []string{}
	peerPrimaryKeyColumns     = []string{"node_id"}
)

type (
	// PeerSlice is an alias for a slice of pointers to Peer.
	// This should generally be used opposed to []Peer.
	PeerSlice []*Peer

	peerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	peerType                 = reflect.TypeOf(&Peer{})
	peerMapping              = queries.MakeStructMapping(peerType)
	peerPrimaryKeyMapping, _ = queries.BindMapping(peerType, peerMapping, peerPrimaryKeyColumns)
	peerInsertCacheMut       sync.RWMutex
	peerInsertCache          = make(map[string]insertCache)
	peerUpdateCacheMut       sync.RWMutex
	peerUpdateCache          = make(map[string]updateCache)
	peerUpsertCacheMut       sync.RWMutex
	peerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single peer record from the query, and panics on error.
func (q peerQuery) OneP() *Peer {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single peer record from the query.
func (q peerQuery) One() (*Peer, error) {
	o := &Peer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for peer")
	}

	return o, nil
}

// AllP returns all Peer records from the query, and panics on error.
func (q peerQuery) AllP() PeerSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Peer records from the query.
func (q peerQuery) All() (PeerSlice, error) {
	var o []*Peer

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Peer slice")
	}

	return o, nil
}

// CountP returns the count of all Peer records in the query, and panics on error.
func (q peerQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Peer records in the query.
func (q peerQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count peer rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q peerQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q peerQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if peer exists")
	}

	return count > 0, nil
}

// PeersG retrieves all records.
func PeersG(mods ...qm.QueryMod) peerQuery {
	return Peers(boil.GetDB(), mods...)
}

// Peers retrieves all the records using an executor.
func Peers(exec boil.Executor, mods ...qm.QueryMod) peerQuery {
	mods = append(mods, qm.From("`peer`"))
	return peerQuery{NewQuery(exec, mods...)}
}

// FindPeerG retrieves a single record by ID.
func FindPeerG(nodeID string, selectCols ...string) (*Peer, error) {
	return FindPeer(boil.GetDB(), nodeID, selectCols...)
}

// FindPeerGP retrieves a single record by ID, and panics on error.
func FindPeerGP(nodeID string, selectCols ...string) *Peer {
	retobj, err := FindPeer(boil.GetDB(), nodeID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPeer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPeer(exec boil.Executor, nodeID string, selectCols ...string) (*Peer, error) {
	peerObj := &Peer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `peer` where `node_id`=?", sel,
	)

	q := queries.Raw(exec, query, nodeID)

	err := q.Bind(peerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from peer")
	}

	return peerObj, nil
}

// FindPeerP retrieves a single record by ID with an executor, and panics on error.
func FindPeerP(exec boil.Executor, nodeID string, selectCols ...string) *Peer {
	retobj, err := FindPeer(exec, nodeID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Peer) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Peer) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Peer) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Peer) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no peer provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(peerColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	peerInsertCacheMut.RLock()
	cache, cached := peerInsertCache[key]
	peerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			peerColumns,
			peerColumnsWithDefault,
			peerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(peerType, peerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `peer` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `peer` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `peer` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, peerPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to insert into peer")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NodeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for peer")
	}

CacheNoHooks:
	if !cached {
		peerInsertCacheMut.Lock()
		peerInsertCache[key] = cache
		peerInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Peer record. See Update for
// whitelist behavior description.
func (o *Peer) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Peer record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Peer) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Peer, and panics on error.
// See Update for whitelist behavior description.
func (o *Peer) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Peer.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Peer) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	peerUpdateCacheMut.RLock()
	cache, cached := peerUpdateCache[key]
	peerUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			peerColumns,
			peerPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update peer, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `peer` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, peerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, append(wl, peerPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update peer row")
	}

	if !cached {
		peerUpdateCacheMut.Lock()
		peerUpdateCache[key] = cache
		peerUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q peerQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q peerQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for peer")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PeerSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PeerSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PeerSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PeerSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `peer` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in peer slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Peer) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Peer) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Peer) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Peer) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no peer provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(peerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	peerUpsertCacheMut.RLock()
	cache, cached := peerUpsertCache[key]
	peerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			peerColumns,
			peerColumnsWithDefault,
			peerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			peerColumns,
			peerPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert peer, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "peer", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `peer` WHERE `node_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(peerType, peerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for peer")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.NodeID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for peer")
	}

CacheNoHooks:
	if !cached {
		peerUpsertCacheMut.Lock()
		peerUpsertCache[key] = cache
		peerUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Peer record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Peer) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Peer record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Peer) DeleteG() error {
	if o == nil {
		return errors.New("model: no Peer provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Peer record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Peer) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Peer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Peer) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Peer provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), peerPrimaryKeyMapping)
	sql := "DELETE FROM `peer` WHERE `node_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from peer")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q peerQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q peerQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no peerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from peer")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PeerSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PeerSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Peer slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PeerSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PeerSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Peer slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `peer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from peer slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Peer) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Peer) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Peer) ReloadG() error {
	if o == nil {
		return errors.New("model: no Peer provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Peer) Reload(exec boil.Executor) error {
	ret, err := FindPeer(exec, o.NodeID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PeerSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PeerSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty PeerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	peers := PeerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `peer`.* FROM `peer` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, peerPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&peers)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PeerSlice")
	}

	*o = peers

	return nil
}

// PeerExists checks if the Peer row exists.
func PeerExists(exec boil.Executor, nodeID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `peer` where `node_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, nodeID)
	}

	row := exec.QueryRow(sql, nodeID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if peer exists")
	}

	return exists, nil
}

// PeerExistsG checks if the Peer row exists.
func PeerExistsG(nodeID string) (bool, error) {
	return PeerExists(boil.GetDB(), nodeID)
}

// PeerExistsGP checks if the Peer row exists. Panics on error.
func PeerExistsGP(nodeID string) bool {
	e, err := PeerExists(boil.GetDB(), nodeID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PeerExistsP checks if the Peer row exists. Panics on error.
func PeerExistsP(exec boil.Executor, nodeID string) bool {
	e, err := PeerExists(exec, nodeID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
