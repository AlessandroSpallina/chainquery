// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ApplicationStatus is an object representing the database table.
type ApplicationStatus struct {
	ID          uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	AppVersion  int    `boil:"app_version" json:"app_version" toml:"app_version" yaml:"app_version"`
	DataVersion int    `boil:"data_version" json:"data_version" toml:"data_version" yaml:"data_version"`
	APIVersion  int    `boil:"api_version" json:"api_version" toml:"api_version" yaml:"api_version"`

	R *applicationStatusR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L applicationStatusL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApplicationStatusColumns = struct {
	ID          string
	AppVersion  string
	DataVersion string
	APIVersion  string
}{
	ID:          "id",
	AppVersion:  "app_version",
	DataVersion: "data_version",
	APIVersion:  "api_version",
}

// applicationStatusR is where relationships are stored.
type applicationStatusR struct {
}

// applicationStatusL is where Load methods for each relationship are stored.
type applicationStatusL struct{}

var (
	applicationStatusColumns               = []string{"id", "app_version", "data_version", "api_version"}
	applicationStatusColumnsWithoutDefault = []string{"app_version", "data_version", "api_version"}
	applicationStatusColumnsWithDefault    = []string{"id"}
	applicationStatusPrimaryKeyColumns     = []string{"id"}
)

type (
	// ApplicationStatusSlice is an alias for a slice of pointers to ApplicationStatus.
	// This should generally be used opposed to []ApplicationStatus.
	ApplicationStatusSlice []*ApplicationStatus

	applicationStatusQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	applicationStatusType                 = reflect.TypeOf(&ApplicationStatus{})
	applicationStatusMapping              = queries.MakeStructMapping(applicationStatusType)
	applicationStatusPrimaryKeyMapping, _ = queries.BindMapping(applicationStatusType, applicationStatusMapping, applicationStatusPrimaryKeyColumns)
	applicationStatusInsertCacheMut       sync.RWMutex
	applicationStatusInsertCache          = make(map[string]insertCache)
	applicationStatusUpdateCacheMut       sync.RWMutex
	applicationStatusUpdateCache          = make(map[string]updateCache)
	applicationStatusUpsertCacheMut       sync.RWMutex
	applicationStatusUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single applicationStatus record from the query, and panics on error.
func (q applicationStatusQuery) OneP() *ApplicationStatus {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single applicationStatus record from the query.
func (q applicationStatusQuery) One() (*ApplicationStatus, error) {
	o := &ApplicationStatus{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for application_status")
	}

	return o, nil
}

// AllP returns all ApplicationStatus records from the query, and panics on error.
func (q applicationStatusQuery) AllP() ApplicationStatusSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ApplicationStatus records from the query.
func (q applicationStatusQuery) All() (ApplicationStatusSlice, error) {
	var o []*ApplicationStatus

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to ApplicationStatus slice")
	}

	return o, nil
}

// CountP returns the count of all ApplicationStatus records in the query, and panics on error.
func (q applicationStatusQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ApplicationStatus records in the query.
func (q applicationStatusQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count application_status rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q applicationStatusQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q applicationStatusQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if application_status exists")
	}

	return count > 0, nil
}

// ApplicationStatusesG retrieves all records.
func ApplicationStatusesG(mods ...qm.QueryMod) applicationStatusQuery {
	return ApplicationStatuses(boil.GetDB(), mods...)
}

// ApplicationStatuses retrieves all the records using an executor.
func ApplicationStatuses(exec boil.Executor, mods ...qm.QueryMod) applicationStatusQuery {
	mods = append(mods, qm.From("`application_status`"))
	return applicationStatusQuery{NewQuery(exec, mods...)}
}

// FindApplicationStatusG retrieves a single record by ID.
func FindApplicationStatusG(id uint64, selectCols ...string) (*ApplicationStatus, error) {
	return FindApplicationStatus(boil.GetDB(), id, selectCols...)
}

// FindApplicationStatusGP retrieves a single record by ID, and panics on error.
func FindApplicationStatusGP(id uint64, selectCols ...string) *ApplicationStatus {
	retobj, err := FindApplicationStatus(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindApplicationStatus retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApplicationStatus(exec boil.Executor, id uint64, selectCols ...string) (*ApplicationStatus, error) {
	applicationStatusObj := &ApplicationStatus{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `application_status` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(applicationStatusObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from application_status")
	}

	return applicationStatusObj, nil
}

// FindApplicationStatusP retrieves a single record by ID with an executor, and panics on error.
func FindApplicationStatusP(exec boil.Executor, id uint64, selectCols ...string) *ApplicationStatus {
	retobj, err := FindApplicationStatus(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ApplicationStatus) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ApplicationStatus) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ApplicationStatus) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *ApplicationStatus) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no application_status provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(applicationStatusColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	applicationStatusInsertCacheMut.RLock()
	cache, cached := applicationStatusInsertCache[key]
	applicationStatusInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			applicationStatusColumns,
			applicationStatusColumnsWithDefault,
			applicationStatusColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `application_status` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `application_status` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `application_status` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, applicationStatusPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into application_status")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == applicationStatusMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for application_status")
	}

CacheNoHooks:
	if !cached {
		applicationStatusInsertCacheMut.Lock()
		applicationStatusInsertCache[key] = cache
		applicationStatusInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ApplicationStatus record. See Update for
// whitelist behavior description.
func (o *ApplicationStatus) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single ApplicationStatus record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *ApplicationStatus) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the ApplicationStatus, and panics on error.
// See Update for whitelist behavior description.
func (o *ApplicationStatus) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ApplicationStatus.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *ApplicationStatus) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	applicationStatusUpdateCacheMut.RLock()
	cache, cached := applicationStatusUpdateCache[key]
	applicationStatusUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			applicationStatusColumns,
			applicationStatusPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update application_status, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `application_status` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, applicationStatusPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, append(wl, applicationStatusPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update application_status row")
	}

	if !cached {
		applicationStatusUpdateCacheMut.Lock()
		applicationStatusUpdateCache[key] = cache
		applicationStatusUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q applicationStatusQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q applicationStatusQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for application_status")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ApplicationStatusSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ApplicationStatusSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ApplicationStatusSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApplicationStatusSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `application_status` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatusPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in applicationStatus slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ApplicationStatus) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ApplicationStatus) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ApplicationStatus) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ApplicationStatus) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no application_status provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationStatusColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	applicationStatusUpsertCacheMut.RLock()
	cache, cached := applicationStatusUpsertCache[key]
	applicationStatusUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			applicationStatusColumns,
			applicationStatusColumnsWithDefault,
			applicationStatusColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			applicationStatusColumns,
			applicationStatusPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert application_status, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "application_status", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `application_status` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(applicationStatusType, applicationStatusMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for application_status")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == applicationStatusMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for application_status")
	}

CacheNoHooks:
	if !cached {
		applicationStatusUpsertCacheMut.Lock()
		applicationStatusUpsertCache[key] = cache
		applicationStatusUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single ApplicationStatus record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ApplicationStatus) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single ApplicationStatus record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ApplicationStatus) DeleteG() error {
	if o == nil {
		return errors.New("model: no ApplicationStatus provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single ApplicationStatus record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ApplicationStatus) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ApplicationStatus record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ApplicationStatus) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no ApplicationStatus provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), applicationStatusPrimaryKeyMapping)
	sql := "DELETE FROM `application_status` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from application_status")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q applicationStatusQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q applicationStatusQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no applicationStatusQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from application_status")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ApplicationStatusSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ApplicationStatusSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no ApplicationStatus slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ApplicationStatusSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApplicationStatusSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no ApplicationStatus slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `application_status` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatusPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from applicationStatus slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ApplicationStatus) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ApplicationStatus) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ApplicationStatus) ReloadG() error {
	if o == nil {
		return errors.New("model: no ApplicationStatus provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ApplicationStatus) Reload(exec boil.Executor) error {
	ret, err := FindApplicationStatus(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ApplicationStatusSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ApplicationStatusSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApplicationStatusSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty ApplicationStatusSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApplicationStatusSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	applicationStatuses := ApplicationStatusSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatusPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `application_status`.* FROM `application_status` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatusPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&applicationStatuses)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ApplicationStatusSlice")
	}

	*o = applicationStatuses

	return nil
}

// ApplicationStatusExists checks if the ApplicationStatus row exists.
func ApplicationStatusExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `application_status` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if application_status exists")
	}

	return exists, nil
}

// ApplicationStatusExistsG checks if the ApplicationStatus row exists.
func ApplicationStatusExistsG(id uint64) (bool, error) {
	return ApplicationStatusExists(boil.GetDB(), id)
}

// ApplicationStatusExistsGP checks if the ApplicationStatus row exists. Panics on error.
func ApplicationStatusExistsGP(id uint64) bool {
	e, err := ApplicationStatusExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ApplicationStatusExistsP checks if the ApplicationStatus row exists. Panics on error.
func ApplicationStatusExistsP(exec boil.Executor, id uint64) bool {
	e, err := ApplicationStatusExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
