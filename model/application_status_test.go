// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testApplicationStatuses(t *testing.T) {
	t.Parallel()

	query := ApplicationStatuses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testApplicationStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = applicationStatus.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicationStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ApplicationStatuses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testApplicationStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ApplicationStatusSlice{applicationStatus}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testApplicationStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ApplicationStatusExists(tx, applicationStatus.ID)
	if err != nil {
		t.Errorf("Unable to check if ApplicationStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ApplicationStatusExistsG to return true, but got false.")
	}
}
func testApplicationStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	applicationStatusFound, err := FindApplicationStatus(tx, applicationStatus.ID)
	if err != nil {
		t.Error(err)
	}

	if applicationStatusFound == nil {
		t.Error("want a record, got nil")
	}
}
func testApplicationStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ApplicationStatuses(tx).Bind(applicationStatus); err != nil {
		t.Error(err)
	}
}

func testApplicationStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ApplicationStatuses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testApplicationStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatusOne := &ApplicationStatus{}
	applicationStatusTwo := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatusOne, applicationStatusDBTypes, false, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, applicationStatusTwo, applicationStatusDBTypes, false, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatusOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = applicationStatusTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ApplicationStatuses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testApplicationStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	applicationStatusOne := &ApplicationStatus{}
	applicationStatusTwo := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatusOne, applicationStatusDBTypes, false, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, applicationStatusTwo, applicationStatusDBTypes, false, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatusOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = applicationStatusTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testApplicationStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicationStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx, applicationStatusColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testApplicationStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = applicationStatus.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testApplicationStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ApplicationStatusSlice{applicationStatus}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testApplicationStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ApplicationStatuses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	applicationStatusDBTypes = map[string]string{`APIVersion`: `int`, `AppVersion`: `int`, `DataVersion`: `int`, `ID`: `bigint`}
	_                        = bytes.MinRead
)

func testApplicationStatusesUpdate(t *testing.T) {
	t.Parallel()

	if len(applicationStatusColumns) == len(applicationStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	if err = applicationStatus.Update(tx); err != nil {
		t.Error(err)
	}
}

func testApplicationStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(applicationStatusColumns) == len(applicationStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	applicationStatus := &ApplicationStatus{}
	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, applicationStatus, applicationStatusDBTypes, true, applicationStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(applicationStatusColumns, applicationStatusPrimaryKeyColumns) {
		fields = applicationStatusColumns
	} else {
		fields = strmangle.SetComplement(
			applicationStatusColumns,
			applicationStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(applicationStatus))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ApplicationStatusSlice{applicationStatus}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testApplicationStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(applicationStatusColumns) == len(applicationStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	applicationStatus := ApplicationStatus{}
	if err = randomize.Struct(seed, &applicationStatus, applicationStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = applicationStatus.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert ApplicationStatus: %s", err)
	}

	count, err := ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &applicationStatus, applicationStatusDBTypes, false, applicationStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ApplicationStatus struct: %s", err)
	}

	if err = applicationStatus.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert ApplicationStatus: %s", err)
	}

	count, err = ApplicationStatuses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
