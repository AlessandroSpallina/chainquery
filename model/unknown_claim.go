// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// UnknownClaim is an object representing the database table.
type UnknownClaim struct {
	ID              uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlockHash       null.String `boil:"block_hash" json:"block_hash,omitempty" toml:"block_hash" yaml:"block_hash,omitempty"`
	TransactionHash null.String `boil:"transaction_hash" json:"transaction_hash,omitempty" toml:"transaction_hash" yaml:"transaction_hash,omitempty"`
	Vout            uint        `boil:"vout" json:"vout" toml:"vout" yaml:"vout"`
	OutputID        uint64      `boil:"output_id" json:"output_id" toml:"output_id" yaml:"output_id"`
	ValueAsHex      string      `boil:"value_as_hex" json:"value_as_hex" toml:"value_as_hex" yaml:"value_as_hex"`
	ValueAsJSON     string      `boil:"value_as_json" json:"value_as_json" toml:"value_as_json" yaml:"value_as_json"`

	R *unknownClaimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L unknownClaimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UnknownClaimColumns = struct {
	ID              string
	BlockHash       string
	TransactionHash string
	Vout            string
	OutputID        string
	ValueAsHex      string
	ValueAsJSON     string
}{
	ID:              "id",
	BlockHash:       "block_hash",
	TransactionHash: "transaction_hash",
	Vout:            "vout",
	OutputID:        "output_id",
	ValueAsHex:      "value_as_hex",
	ValueAsJSON:     "value_as_json",
}

// unknownClaimR is where relationships are stored.
type unknownClaimR struct {
	Output *Output
}

// unknownClaimL is where Load methods for each relationship are stored.
type unknownClaimL struct{}

var (
	unknownClaimColumns               = []string{"id", "block_hash", "transaction_hash", "vout", "output_id", "value_as_hex", "value_as_json"}
	unknownClaimColumnsWithoutDefault = []string{"block_hash", "transaction_hash", "vout", "output_id", "value_as_hex", "value_as_json"}
	unknownClaimColumnsWithDefault    = []string{"id"}
	unknownClaimPrimaryKeyColumns     = []string{"id"}
)

type (
	// UnknownClaimSlice is an alias for a slice of pointers to UnknownClaim.
	// This should generally be used opposed to []UnknownClaim.
	UnknownClaimSlice []*UnknownClaim

	unknownClaimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	unknownClaimType                 = reflect.TypeOf(&UnknownClaim{})
	unknownClaimMapping              = queries.MakeStructMapping(unknownClaimType)
	unknownClaimPrimaryKeyMapping, _ = queries.BindMapping(unknownClaimType, unknownClaimMapping, unknownClaimPrimaryKeyColumns)
	unknownClaimInsertCacheMut       sync.RWMutex
	unknownClaimInsertCache          = make(map[string]insertCache)
	unknownClaimUpdateCacheMut       sync.RWMutex
	unknownClaimUpdateCache          = make(map[string]updateCache)
	unknownClaimUpsertCacheMut       sync.RWMutex
	unknownClaimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single unknownClaim record from the query, and panics on error.
func (q unknownClaimQuery) OneP() *UnknownClaim {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single unknownClaim record from the query.
func (q unknownClaimQuery) One() (*UnknownClaim, error) {
	o := &UnknownClaim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for unknown_claim")
	}

	return o, nil
}

// AllP returns all UnknownClaim records from the query, and panics on error.
func (q unknownClaimQuery) AllP() UnknownClaimSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all UnknownClaim records from the query.
func (q unknownClaimQuery) All() (UnknownClaimSlice, error) {
	var o []*UnknownClaim

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UnknownClaim slice")
	}

	return o, nil
}

// CountP returns the count of all UnknownClaim records in the query, and panics on error.
func (q unknownClaimQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all UnknownClaim records in the query.
func (q unknownClaimQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count unknown_claim rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q unknownClaimQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q unknownClaimQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if unknown_claim exists")
	}

	return count > 0, nil
}

// OutputG pointed to by the foreign key.
func (o *UnknownClaim) OutputG(mods ...qm.QueryMod) outputQuery {
	return o.Output(boil.GetDB(), mods...)
}

// Output pointed to by the foreign key.
func (o *UnknownClaim) Output(exec boil.Executor, mods ...qm.QueryMod) outputQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OutputID),
	}

	queryMods = append(queryMods, mods...)

	query := Outputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`output`")

	return query
} // LoadOutput allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (unknownClaimL) LoadOutput(e boil.Executor, singular bool, maybeUnknownClaim interface{}) error {
	var slice []*UnknownClaim
	var object *UnknownClaim

	count := 1
	if singular {
		object = maybeUnknownClaim.(*UnknownClaim)
	} else {
		slice = *maybeUnknownClaim.(*[]*UnknownClaim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &unknownClaimR{}
		}
		args[0] = object.OutputID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &unknownClaimR{}
			}
			args[i] = obj.OutputID
		}
	}

	query := fmt.Sprintf(
		"select * from `output` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Output")
	}
	defer results.Close()

	var resultSlice []*Output
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Output")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Output = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OutputID == foreign.ID {
				local.R.Output = foreign
				break
			}
		}
	}

	return nil
}

// SetOutputG of the unknown_claim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.UnknownClaims.
// Uses the global database handle.
func (o *UnknownClaim) SetOutputG(insert bool, related *Output) error {
	return o.SetOutput(boil.GetDB(), insert, related)
}

// SetOutputP of the unknown_claim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.UnknownClaims.
// Panics on error.
func (o *UnknownClaim) SetOutputP(exec boil.Executor, insert bool, related *Output) {
	if err := o.SetOutput(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOutputGP of the unknown_claim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.UnknownClaims.
// Uses the global database handle and panics on error.
func (o *UnknownClaim) SetOutputGP(insert bool, related *Output) {
	if err := o.SetOutput(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOutput of the unknown_claim to the related item.
// Sets o.R.Output to related.
// Adds o to related.R.UnknownClaims.
func (o *UnknownClaim) SetOutput(exec boil.Executor, insert bool, related *Output) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `unknown_claim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"output_id"}),
		strmangle.WhereClause("`", "`", 0, unknownClaimPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OutputID = related.ID

	if o.R == nil {
		o.R = &unknownClaimR{
			Output: related,
		}
	} else {
		o.R.Output = related
	}

	if related.R == nil {
		related.R = &outputR{
			UnknownClaims: UnknownClaimSlice{o},
		}
	} else {
		related.R.UnknownClaims = append(related.R.UnknownClaims, o)
	}

	return nil
}

// UnknownClaimsG retrieves all records.
func UnknownClaimsG(mods ...qm.QueryMod) unknownClaimQuery {
	return UnknownClaims(boil.GetDB(), mods...)
}

// UnknownClaims retrieves all the records using an executor.
func UnknownClaims(exec boil.Executor, mods ...qm.QueryMod) unknownClaimQuery {
	mods = append(mods, qm.From("`unknown_claim`"))
	return unknownClaimQuery{NewQuery(exec, mods...)}
}

// FindUnknownClaimG retrieves a single record by ID.
func FindUnknownClaimG(id uint64, selectCols ...string) (*UnknownClaim, error) {
	return FindUnknownClaim(boil.GetDB(), id, selectCols...)
}

// FindUnknownClaimGP retrieves a single record by ID, and panics on error.
func FindUnknownClaimGP(id uint64, selectCols ...string) *UnknownClaim {
	retobj, err := FindUnknownClaim(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindUnknownClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUnknownClaim(exec boil.Executor, id uint64, selectCols ...string) (*UnknownClaim, error) {
	unknownClaimObj := &UnknownClaim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `unknown_claim` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(unknownClaimObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from unknown_claim")
	}

	return unknownClaimObj, nil
}

// FindUnknownClaimP retrieves a single record by ID with an executor, and panics on error.
func FindUnknownClaimP(exec boil.Executor, id uint64, selectCols ...string) *UnknownClaim {
	retobj, err := FindUnknownClaim(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UnknownClaim) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *UnknownClaim) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *UnknownClaim) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *UnknownClaim) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no unknown_claim provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(unknownClaimColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	unknownClaimInsertCacheMut.RLock()
	cache, cached := unknownClaimInsertCache[key]
	unknownClaimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			unknownClaimColumns,
			unknownClaimColumnsWithDefault,
			unknownClaimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(unknownClaimType, unknownClaimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(unknownClaimType, unknownClaimMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `unknown_claim` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `unknown_claim` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `unknown_claim` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, unknownClaimPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into unknown_claim")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == unknownClaimMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for unknown_claim")
	}

CacheNoHooks:
	if !cached {
		unknownClaimInsertCacheMut.Lock()
		unknownClaimInsertCache[key] = cache
		unknownClaimInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single UnknownClaim record. See Update for
// whitelist behavior description.
func (o *UnknownClaim) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single UnknownClaim record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *UnknownClaim) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the UnknownClaim, and panics on error.
// See Update for whitelist behavior description.
func (o *UnknownClaim) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the UnknownClaim.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *UnknownClaim) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	unknownClaimUpdateCacheMut.RLock()
	cache, cached := unknownClaimUpdateCache[key]
	unknownClaimUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			unknownClaimColumns,
			unknownClaimPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update unknown_claim, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `unknown_claim` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, unknownClaimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(unknownClaimType, unknownClaimMapping, append(wl, unknownClaimPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update unknown_claim row")
	}

	if !cached {
		unknownClaimUpdateCacheMut.Lock()
		unknownClaimUpdateCache[key] = cache
		unknownClaimUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q unknownClaimQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q unknownClaimQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for unknown_claim")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UnknownClaimSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o UnknownClaimSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o UnknownClaimSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UnknownClaimSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unknownClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `unknown_claim` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unknownClaimPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in unknownClaim slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UnknownClaim) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *UnknownClaim) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *UnknownClaim) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *UnknownClaim) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no unknown_claim provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(unknownClaimColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	unknownClaimUpsertCacheMut.RLock()
	cache, cached := unknownClaimUpsertCache[key]
	unknownClaimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			unknownClaimColumns,
			unknownClaimColumnsWithDefault,
			unknownClaimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			unknownClaimColumns,
			unknownClaimPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert unknown_claim, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "unknown_claim", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `unknown_claim` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(unknownClaimType, unknownClaimMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(unknownClaimType, unknownClaimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for unknown_claim")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == unknownClaimMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for unknown_claim")
	}

CacheNoHooks:
	if !cached {
		unknownClaimUpsertCacheMut.Lock()
		unknownClaimUpsertCache[key] = cache
		unknownClaimUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single UnknownClaim record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UnknownClaim) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single UnknownClaim record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UnknownClaim) DeleteG() error {
	if o == nil {
		return errors.New("model: no UnknownClaim provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single UnknownClaim record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *UnknownClaim) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single UnknownClaim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UnknownClaim) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no UnknownClaim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), unknownClaimPrimaryKeyMapping)
	sql := "DELETE FROM `unknown_claim` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from unknown_claim")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q unknownClaimQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q unknownClaimQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no unknownClaimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from unknown_claim")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o UnknownClaimSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o UnknownClaimSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no UnknownClaim slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o UnknownClaimSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UnknownClaimSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no UnknownClaim slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unknownClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `unknown_claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unknownClaimPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from unknownClaim slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *UnknownClaim) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *UnknownClaim) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UnknownClaim) ReloadG() error {
	if o == nil {
		return errors.New("model: no UnknownClaim provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UnknownClaim) Reload(exec boil.Executor) error {
	ret, err := FindUnknownClaim(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UnknownClaimSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *UnknownClaimSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnknownClaimSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty UnknownClaimSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UnknownClaimSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	unknownClaims := UnknownClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), unknownClaimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `unknown_claim`.* FROM `unknown_claim` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, unknownClaimPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&unknownClaims)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UnknownClaimSlice")
	}

	*o = unknownClaims

	return nil
}

// UnknownClaimExists checks if the UnknownClaim row exists.
func UnknownClaimExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `unknown_claim` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if unknown_claim exists")
	}

	return exists, nil
}

// UnknownClaimExistsG checks if the UnknownClaim row exists.
func UnknownClaimExistsG(id uint64) (bool, error) {
	return UnknownClaimExists(boil.GetDB(), id)
}

// UnknownClaimExistsGP checks if the UnknownClaim row exists. Panics on error.
func UnknownClaimExistsGP(id uint64) bool {
	e, err := UnknownClaimExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// UnknownClaimExistsP checks if the UnknownClaim row exists. Panics on error.
func UnknownClaimExistsP(exec boil.Executor, id uint64) bool {
	e, err := UnknownClaimExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
