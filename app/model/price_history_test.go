// This file is generated by SQLBoiler (https://github.com/lbryio/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package model

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/lbryio/sqlboiler/boil"
	"github.com/lbryio/sqlboiler/randomize"
	"github.com/lbryio/sqlboiler/strmangle"
)

func testPriceHistories(t *testing.T) {
	t.Parallel()

	query := PriceHistories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPriceHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = priceHistory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPriceHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PriceHistories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPriceHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PriceHistorySlice{priceHistory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPriceHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PriceHistoryExists(tx, priceHistory.ID)
	if err != nil {
		t.Errorf("Unable to check if PriceHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PriceHistoryExistsG to return true, but got false.")
	}
}
func testPriceHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	priceHistoryFound, err := FindPriceHistory(tx, priceHistory.ID)
	if err != nil {
		t.Error(err)
	}

	if priceHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPriceHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PriceHistories(tx).Bind(priceHistory); err != nil {
		t.Error(err)
	}
}

func testPriceHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PriceHistories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPriceHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistoryOne := &PriceHistory{}
	priceHistoryTwo := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistoryOne, priceHistoryDBTypes, false, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, priceHistoryTwo, priceHistoryDBTypes, false, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = priceHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PriceHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPriceHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	priceHistoryOne := &PriceHistory{}
	priceHistoryTwo := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistoryOne, priceHistoryDBTypes, false, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, priceHistoryTwo, priceHistoryDBTypes, false, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = priceHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPriceHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPriceHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx, priceHistoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPriceHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = priceHistory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPriceHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PriceHistorySlice{priceHistory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPriceHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PriceHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	priceHistoryDBTypes = map[string]string{`BTC`: `decimal`, `Created`: `datetime`, `ID`: `bigint`, `USD`: `decimal`}
	_                   = bytes.MinRead
)

func testPriceHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(priceHistoryColumns) == len(priceHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	if err = priceHistory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPriceHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(priceHistoryColumns) == len(priceHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	priceHistory := &PriceHistory{}
	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, priceHistory, priceHistoryDBTypes, true, priceHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(priceHistoryColumns, priceHistoryPrimaryKeyColumns) {
		fields = priceHistoryColumns
	} else {
		fields = strmangle.SetComplement(
			priceHistoryColumns,
			priceHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(priceHistory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PriceHistorySlice{priceHistory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPriceHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(priceHistoryColumns) == len(priceHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	priceHistory := PriceHistory{}
	if err = randomize.Struct(seed, &priceHistory, priceHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = priceHistory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert PriceHistory: %s", err)
	}

	count, err := PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &priceHistory, priceHistoryDBTypes, false, priceHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize PriceHistory struct: %s", err)
	}

	if err = priceHistory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert PriceHistory: %s", err)
	}

	count, err = PriceHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
