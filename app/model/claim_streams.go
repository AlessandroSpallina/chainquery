// This file is generated by SQLBoiler (https://github.com/lbryio/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/lbryio/errors.go"
	"github.com/lbryio/null.go"
	"github.com/lbryio/sqlboiler/boil"
	"github.com/lbryio/sqlboiler/queries"
	"github.com/lbryio/sqlboiler/queries/qm"
	"github.com/lbryio/sqlboiler/strmangle"
)

// ClaimStream is an object representing the database table.
type ClaimStream struct {
	ID     uint64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	Stream string `boil:"stream" json:"stream" toml:"stream" yaml:"stream"`

	R *claimStreamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimStreamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimStreamColumns = struct {
	ID     string
	Stream string
}{
	ID:     "id",
	Stream: "stream",
}

// ClaimStreamFilter allows you to filter on any columns by making them all pointers.
type ClaimStreamFilter struct {
	ID     *uint64 `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	Stream *string `boil:"stream" json:"stream,omitempty" toml:"stream" yaml:"stream,omitempty"`
}

// claimStreamR is where relationships are stored.
type claimStreamR struct {
	ID *Claim
}

// claimStreamL is where Load methods for each relationship are stored.
type claimStreamL struct{}

var (
	claimStreamColumns               = []string{"id", "stream"}
	claimStreamColumnsWithoutDefault = []string{"id", "stream"}
	claimStreamColumnsWithDefault    = []string{}
	claimStreamPrimaryKeyColumns     = []string{"id"}
	claimStreamAutoIncrementColumn   = ""
)

type (
	// ClaimStreamSlice is an alias for a slice of pointers to ClaimStream.
	// This should generally be used opposed to []ClaimStream.
	ClaimStreamSlice []*ClaimStream

	ClaimStreamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimStreamType                 = reflect.TypeOf(&ClaimStream{})
	claimStreamMapping              = queries.MakeStructMapping(claimStreamType)
	claimStreamPrimaryKeyMapping, _ = queries.BindMapping(claimStreamType, claimStreamMapping, claimStreamPrimaryKeyColumns)
	claimStreamInsertCacheMut       sync.RWMutex
	claimStreamInsertCache          = make(map[string]insertCache)
	claimStreamUpdateCacheMut       sync.RWMutex
	claimStreamUpdateCache          = make(map[string]updateCache)
	claimStreamUpsertCacheMut       sync.RWMutex
	claimStreamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single ClaimStream record from the query, and panics on error.
func (q ClaimStreamQuery) OneP() *ClaimStream {
	o, err := q.One()
	if err != nil {
		panic(errors.Err(err))
	}

	return o
}

// One returns a single ClaimStream record from the query.
func (q ClaimStreamQuery) One() (*ClaimStream, error) {
	o := &ClaimStream{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: failed to execute a one query for claim_streams", err)
	}

	return o, nil
}

// AllP returns all ClaimStream records from the query, and panics on error.
func (q ClaimStreamQuery) AllP() ClaimStreamSlice {
	o, err := q.All()
	if err != nil {
		panic(errors.Err(err))
	}

	return o
}

// All returns all ClaimStream records from the query.
func (q ClaimStreamQuery) All() (ClaimStreamSlice, error) {
	var o []*ClaimStream

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Prefix("model: failed to assign all query results to ClaimStream slice", err)
	}

	return o, nil
}

// CountP returns the count of all ClaimStream records in the query, and panics on error.
func (q ClaimStreamQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(errors.Err(err))
	}

	return c
}

// Count returns the count of all ClaimStream records in the query.
func (q ClaimStreamQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Prefix("model: failed to count claim_streams rows", err)
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q ClaimStreamQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q ClaimStreamQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetSelect(q.Query, []string{})
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Prefix("model: failed to check if claim_streams exists", err)
	}

	return count > 0, nil
}

// IDG pointed to by the foreign key.
func (o *ClaimStream) IDG(mods ...qm.QueryMod) ClaimQuery {
	return o.ID(boil.GetDB(), mods...)
}

// ID pointed to by the foreign key.
func (o *ClaimStream) ID(exec boil.Executor, mods ...qm.QueryMod) ClaimQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Claims(exec, queryMods...)
	queries.SetFrom(query.Query, "`claims`")

	return query
}

// LoadID allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimStreamL) LoadID(e boil.Executor, singular bool, maybeClaimStream interface{}) error {
	var slice []*ClaimStream
	var object *ClaimStream

	count := 1
	if singular {
		object = maybeClaimStream.(*ClaimStream)
	} else {
		slice = *maybeClaimStream.(*[]*ClaimStream)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimStreamR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimStreamR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `claims` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Prefix("failed to eager load Claim", err)
	}
	defer results.Close()

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Prefix("failed to bind eager loaded slice Claim", err)
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ID = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.ID = foreign
				break
			}
		}
	}

	return nil
}

// SetIDG of the claim_stream to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDClaimStream.
// Uses the global database handle.
func (o *ClaimStream) SetIDG(insert bool, related *Claim) error {
	return o.SetID(boil.GetDB(), insert, related)
}

// SetIDP of the claim_stream to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDClaimStream.
// Panics on error.
func (o *ClaimStream) SetIDP(exec boil.Executor, insert bool, related *Claim) {
	if err := o.SetID(exec, insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetIDGP of the claim_stream to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDClaimStream.
// Uses the global database handle and panics on error.
func (o *ClaimStream) SetIDGP(insert bool, related *Claim) {
	if err := o.SetID(boil.GetDB(), insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetID of the claim_stream to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDClaimStream.
func (o *ClaimStream) SetID(exec boil.Executor, insert bool, related *Claim) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Prefix("failed to insert into foreign table", err)
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claim_streams` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"id"}),
		strmangle.WhereClause("`", "`", 0, claimStreamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Prefix("failed to update local table", err)
	}

	o.ID = related.ID

	if o.R == nil {
		o.R = &claimStreamR{
			ID: related,
		}
	} else {
		o.R.ID = related
	}

	if related.R == nil {
		related.R = &claimR{
			IDClaimStream: o,
		}
	} else {
		related.R.IDClaimStream = o
	}

	return nil
}

// ClaimStreamsG retrieves all records.
func ClaimStreamsG(mods ...qm.QueryMod) ClaimStreamQuery {
	return ClaimStreams(boil.GetDB(), mods...)
}

// ClaimStreams retrieves all the records using an executor.
func ClaimStreams(exec boil.Executor, mods ...qm.QueryMod) ClaimStreamQuery {
	mods = append(mods, qm.From("`claim_streams`"))
	return ClaimStreamQuery{NewQuery(exec, mods...)}
}

// FindClaimStreamG retrieves a single record by ID.
func FindClaimStreamG(id uint64, selectCols ...string) (*ClaimStream, error) {
	return FindClaimStream(boil.GetDB(), id, selectCols...)
}

// FindClaimStreamGP retrieves a single record by ID, and panics on error.
func FindClaimStreamGP(id uint64, selectCols ...string) *ClaimStream {
	retobj, err := FindClaimStream(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(errors.Err(err))
	}

	return retobj
}

// FindClaimStream retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaimStream(exec boil.Executor, id uint64, selectCols ...string) (*ClaimStream, error) {
	claimStreamObj := &ClaimStream{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `claim_streams` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(claimStreamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: unable to select from claim_streams", err)
	}

	return claimStreamObj, nil
}

// FindClaimStreamP retrieves a single record by ID with an executor, and panics on error.
func FindClaimStreamP(exec boil.Executor, id uint64, selectCols ...string) *ClaimStream {
	retobj, err := FindClaimStream(exec, id, selectCols...)
	if err != nil {
		panic(errors.Err(err))
	}

	return retobj
}

// FindOneClaimStream retrieves a single record using filters.
func FindOneClaimStream(exec boil.Executor, filters ClaimStreamFilter) (*ClaimStream, error) {
	obj := &ClaimStream{}

	err := ClaimStreamNewQuery(exec).
		Where(filters).
		Limit(1).
		Bind(obj)

	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: unable to select from claim_streams", err)
	}

	return obj, nil
}

// FindOneClaimStreamG retrieves a single record using filters.
func FindOneClaimStreamG(filters ClaimStreamFilter) (*ClaimStream, error) {
	return FindOneClaimStream(boil.GetDB(), filters)
}

// FindOneClaimStreamOrInit retrieves a single record using filters, or initializes a new record if one is not found.
func FindOneClaimStreamOrInit(exec boil.Executor, filters ClaimStreamFilter) (*ClaimStream, error) {
	claimStreamObj, err := FindOneClaimStream(exec, filters)
	if err != nil {
		return nil, err
	}

	if claimStreamObj == nil {
		claimStreamObj = &ClaimStream{}
		objR := reflect.ValueOf(claimStreamObj).Elem()
		r := reflect.ValueOf(filters)
		for i := 0; i < r.NumField(); i++ {
			f := r.Field(i)
			if f.Elem().IsValid() {
				objR.FieldByName(r.Type().Field(i).Name).Set(f.Elem())
			}
		}
	}

	return claimStreamObj, nil
}

// FindOneClaimStreamOrInit retrieves a single record using filters, or initializes a new record if one is not found.
func FindOneClaimStreamOrInitG(filters ClaimStreamFilter) (*ClaimStream, error) {
	return FindOneClaimStreamOrInit(boil.GetDB(), filters)
}

// FindOneClaimStreamOrInit retrieves a single record using filters, or initializes and inserts a new record if one is not found.
func FindOneClaimStreamOrCreate(exec boil.Executor, filters ClaimStreamFilter) (*ClaimStream, error) {
	claimStreamObj, err := FindOneClaimStreamOrInit(exec, filters)
	if err != nil {
		return nil, err
	}
	if claimStreamObj.IsNew() {
		err := claimStreamObj.Insert(exec)
		if err != nil {
			return nil, err
		}
	}
	return claimStreamObj, nil
}

// FindOneClaimStreamOrInit retrieves a single record using filters, or initializes and inserts a new record if one is not found.
func FindOneClaimStreamOrCreateG(filters ClaimStreamFilter) (*ClaimStream, error) {
	return FindOneClaimStreamOrCreate(boil.GetDB(), filters)
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ClaimStream) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ClaimStream) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ClaimStream) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *ClaimStream) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.Err("model: no claim_streams provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimStreamColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	claimStreamInsertCacheMut.RLock()
	cache, cached := claimStreamInsertCache[key]
	claimStreamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			claimStreamColumns,
			claimStreamColumnsWithDefault,
			claimStreamColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(claimStreamType, claimStreamMapping, wl)
		if err != nil {
			return errors.Err(err)
		}
		cache.retMapping, err = queries.BindMapping(claimStreamType, claimStreamMapping, returnColumns)
		if err != nil {
			return errors.Err(err)
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `claim_streams` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `claim_streams` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `claim_streams` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, claimStreamPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Prefix("model: unable to insert into claim_streams", err)
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Prefix("model: unable to populate default values for claim_streams", err)
	}

CacheNoHooks:
	if !cached {
		claimStreamInsertCacheMut.Lock()
		claimStreamInsertCache[key] = cache
		claimStreamInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ClaimStream record. See Update for
// whitelist behavior description.
func (o *ClaimStream) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single ClaimStream record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *ClaimStream) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateP uses an executor to update the ClaimStream, and panics on error.
// See Update for whitelist behavior description.
func (o *ClaimStream) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(errors.Err(err))
	}
}

// Update uses an executor to update the ClaimStream.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *ClaimStream) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	claimStreamUpdateCacheMut.RLock()
	cache, cached := claimStreamUpdateCache[key]
	claimStreamUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			claimStreamColumns,
			claimStreamPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.Err("model: unable to update claim_streams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `claim_streams` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, claimStreamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimStreamType, claimStreamMapping, append(wl, claimStreamPrimaryKeyColumns...))
		if err != nil {
			return errors.Err(err)
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Prefix("model: unable to update claim_streams row", err)
	}

	if !cached {
		claimStreamUpdateCacheMut.Lock()
		claimStreamUpdateCache[key] = cache
		claimStreamUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q ClaimStreamQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q ClaimStreamQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Prefix("model: unable to update all for claim_streams", err)
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClaimStreamSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ClaimStreamSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ClaimStreamSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimStreamSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.Err("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `claim_streams` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimStreamPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to update all in claimStream slice", err)
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ClaimStream) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ClaimStream) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ClaimStream) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ClaimStream) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.Err("model: no claim_streams provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimStreamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimStreamUpsertCacheMut.RLock()
	cache, cached := claimStreamUpsertCache[key]
	claimStreamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			claimStreamColumns,
			claimStreamColumnsWithDefault,
			claimStreamColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			claimStreamColumns,
			claimStreamPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.Err("model: unable to upsert claim_streams, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "claim_streams", update, insert, claimStreamAutoIncrementColumn)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `claim_streams` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(claimStreamType, claimStreamMapping, insert)
		if err != nil {
			return errors.Err(err)
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimStreamType, claimStreamMapping, ret)
			if err != nil {
				return errors.Err(err)
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Prefix("model: unable to upsert for claim_streams", err)
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Prefix("model: unable to populate default values for claim_streams", err)
	}

CacheNoHooks:
	if !cached {
		claimStreamUpsertCacheMut.Lock()
		claimStreamUpsertCache[key] = cache
		claimStreamUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single ClaimStream record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ClaimStream) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteG deletes a single ClaimStream record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ClaimStream) DeleteG() error {
	if o == nil {
		return errors.Err("model: no ClaimStream provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single ClaimStream record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ClaimStream) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(errors.Err(err))
	}
}

// Delete deletes a single ClaimStream record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClaimStream) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.Err("model: no ClaimStream provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimStreamPrimaryKeyMapping)
	sql := "DELETE FROM `claim_streams` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to delete from claim_streams", err)
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q ClaimStreamQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAll deletes all matching rows.
func (q ClaimStreamQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.Err("model: no ClaimStreamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Prefix("model: unable to delete all from claim_streams", err)
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ClaimStreamSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ClaimStreamSlice) DeleteAllG() error {
	if o == nil {
		return errors.Err("model: no ClaimStream slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ClaimStreamSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimStreamSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.Err("model: no ClaimStream slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `claim_streams` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimStreamPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to delete all from claimStream slice", err)
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ClaimStream) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ClaimStream) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ClaimStream) ReloadG() error {
	if o == nil {
		return errors.Err("model: no ClaimStream provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClaimStream) Reload(exec boil.Executor) error {
	ret, err := FindClaimStream(exec, o.ID)
	if err != nil {
		return errors.Err(err)
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimStreamSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimStreamSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimStreamSlice) ReloadAllG() error {
	if o == nil {
		return errors.Err("model: empty ClaimStreamSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimStreamSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	claimStreams := ClaimStreamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimStreamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `claim_streams`.* FROM `claim_streams` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimStreamPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&claimStreams)
	if err != nil {
		return errors.Prefix("model: unable to reload all in ClaimStreamSlice", err)
	}

	*o = claimStreams

	return nil
}

// ClaimStreamExists checks if the ClaimStream row exists.
func ClaimStreamExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `claim_streams` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Prefix("model: unable to check if claim_streams exists", err)
	}

	return exists, nil
}

// ClaimStreamExistsG checks if the ClaimStream row exists.
func ClaimStreamExistsG(id uint64) (bool, error) {
	return ClaimStreamExists(boil.GetDB(), id)
}

// ClaimStreamExistsGP checks if the ClaimStream row exists. Panics on error.
func ClaimStreamExistsGP(id uint64) bool {
	e, err := ClaimStreamExists(boil.GetDB(), id)
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// ClaimStreamExistsP checks if the ClaimStream row exists. Panics on error.
func ClaimStreamExistsP(exec boil.Executor, id uint64) bool {
	e, err := ClaimStreamExists(exec, id)
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// IsNew() checks if record exists in db (aka if its primary key is set).
func (o *ClaimStream) IsNew() bool {
	r := reflect.ValueOf(o).Elem()
	for i := 0; i < r.NumField(); i++ {
		column := r.Type().Field(i).Tag.Get("boil")
		for _, pkColumn := range claimStreamPrimaryKeyColumns {
			if column == pkColumn {
				field := r.Field(i)
				if field.Interface() != reflect.Zero(field.Type()).Interface() {
					return false
				}
			}
		}
	}
	return true
}

// Save() inserts the record if it does not exist, or updates it if it does.
func (o *ClaimStream) Save(exec boil.Executor, whitelist ...string) error {
	if o.IsNew() {
		return o.Insert(exec, whitelist...)
	} else {
		return o.Update(exec, whitelist...)
	}
}

// SaveG() inserts the record if it does not exist, or updates it if it does.
func (o *ClaimStream) SaveG(whitelist ...string) error {
	if o.IsNew() {
		return o.InsertG(whitelist...)
	} else {
		return o.UpdateG(whitelist...)
	}
}

// ClaimStreamNewQuery filters query results
func ClaimStreamNewQuery(exec boil.Executor) *ClaimStreamQuery {
	return &ClaimStreamQuery{NewQuery(exec, qm.Select("*"), qm.From("`claim_streams`"))}
}

// ClaimStreamNewQuery filters query results
func ClaimStreamNewQueryG() *ClaimStreamQuery {
	return ClaimStreamNewQuery(boil.GetDB())
}

// Where filters query results
func (q *ClaimStreamQuery) Where(filters ClaimStreamFilter) *ClaimStreamQuery {
	r := reflect.ValueOf(filters)
	for i := 0; i < r.NumField(); i++ {
		f := r.Field(i)
		if f.Elem().IsValid() {
			if nullable, ok := f.Elem().Interface().(null.Nullable); ok && nullable.IsNull() {
				queries.AppendWhere(q.Query, r.Type().Field(i).Tag.Get("boil")+" IS NULL")
			} else {
				queries.AppendWhere(q.Query, r.Type().Field(i).Tag.Get("boil")+" = ?", f.Elem().Interface())
			}
		}
	}
	return q
}

// Limit limits query results
func (q *ClaimStreamQuery) Limit(limit int) *ClaimStreamQuery {
	queries.SetLimit(q.Query, limit)
	return q
}

// Merge combines two ClaimStreams into one. The primary record will be kept, and the secondary will be deleted.
func MergeClaimStreams(exec boil.Executor, primaryID uint64, secondaryID uint64) (err error) {
	tx, ok := exec.(boil.Transactor)
	if !ok {
		txdb, ok := exec.(boil.Beginner)
		if !ok {
			return errors.Err("database does not support transactions")
		}

		tx, err = txdb.Begin()
		if err != nil {
			return errors.Err(err)
		}

		defer func() {
			if p := recover(); p != nil {
				tx.Rollback()
				panic(p) // Rollback, then propagate panic
			} else if err != nil {
				tx.Rollback()
			} else {
				err = tx.Commit()
			}
		}()
	}

	primary, err := FindClaimStream(tx, primaryID)
	if err != nil {
		return errors.Err(err)
	} else if primary == nil {
		return errors.Err("primary ClaimStream not found")
	}

	secondary, err := FindClaimStream(tx, secondaryID)
	if err != nil {
		return errors.Err(err)
	} else if secondary == nil {
		return errors.Err("secondary ClaimStream not found")
	}

	foreignKeys := []foreignKey{}

	conflictingKeys := []conflictingUniqueKey{}

	err = mergeModels(tx, primaryID, secondaryID, foreignKeys, conflictingKeys)
	if err != nil {
		return err
	}

	pr := reflect.ValueOf(primary)
	sr := reflect.ValueOf(secondary)
	// for any column thats null on the primary and not null on the secondary, copy from secondary to primary
	for i := 0; i < sr.Elem().NumField(); i++ {
		pf := pr.Elem().Field(i)
		sf := sr.Elem().Field(i)
		if sf.IsValid() {
			if nullable, ok := sf.Interface().(null.Nullable); ok && !nullable.IsNull() && pf.Interface().(null.Nullable).IsNull() {
				pf.Set(sf)
			}
		}
	}

	err = primary.Update(tx)
	if err != nil {
		return err
	}

	err = secondary.Delete(tx)
	if err != nil {
		return err
	}

	return nil
}

// Merge combines two ClaimStreams into one. The primary record will be kept, and the secondary will be deleted.
func MergeClaimStreamsG(primaryID uint64, secondaryID uint64) error {
	return MergeClaimStreams(boil.GetDB(), primaryID, secondaryID)
}
