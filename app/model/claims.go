// This file is generated by SQLBoiler (https://github.com/lbryio/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/lbryio/errors.go"
	"github.com/lbryio/null.go"
	"github.com/lbryio/sqlboiler/boil"
	"github.com/lbryio/sqlboiler/queries"
	"github.com/lbryio/sqlboiler/queries/qm"
	"github.com/lbryio/sqlboiler/strmangle"
)

// Claim is an object representing the database table.
type Claim struct {
	ID              uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionHash null.String `boil:"transaction_hash" json:"transaction_hash,omitempty" toml:"transaction_hash" yaml:"transaction_hash,omitempty"`
	VOut            uint        `boil:"v_out" json:"v_out" toml:"v_out" yaml:"v_out"`
	Name            string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ClaimID         string      `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	ClaimType       bool        `boil:"claim_type" json:"claim_type" toml:"claim_type" yaml:"claim_type"`
	PublisherID     null.String `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	PublisherSig    null.String `boil:"publisher_sig" json:"publisher_sig,omitempty" toml:"publisher_sig" yaml:"publisher_sig,omitempty"`
	Certificate     null.String `boil:"certificate" json:"certificate,omitempty" toml:"certificate" yaml:"certificate,omitempty"`
	TransactionTime null.Uint   `boil:"transaction_time" json:"transaction_time,omitempty" toml:"transaction_time" yaml:"transaction_time,omitempty"`
	Version         string      `boil:"version" json:"version" toml:"version" yaml:"version"`
	Author          null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ContentType     null.String `boil:"content_type" json:"content_type,omitempty" toml:"content_type" yaml:"content_type,omitempty"`
	IsNSFW          bool        `boil:"is_n_s_f_w" json:"is_n_s_f_w" toml:"is_n_s_f_w" yaml:"is_n_s_f_w"`
	Language        null.String `boil:"language" json:"language,omitempty" toml:"language" yaml:"language,omitempty"`
	ThumbnailURL    null.String `boil:"thumbnail_url" json:"thumbnail_url,omitempty" toml:"thumbnail_url" yaml:"thumbnail_url,omitempty"`
	Title           null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Fee             string      `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	FeeCurrency     null.String `boil:"fee_currency" json:"fee_currency,omitempty" toml:"fee_currency" yaml:"fee_currency,omitempty"`
	IsFiltered      bool        `boil:"is_filtered" json:"is_filtered" toml:"is_filtered" yaml:"is_filtered"`
	Created         time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified        time.Time   `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *claimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimColumns = struct {
	ID              string
	TransactionHash string
	VOut            string
	Name            string
	ClaimID         string
	ClaimType       string
	PublisherID     string
	PublisherSig    string
	Certificate     string
	TransactionTime string
	Version         string
	Author          string
	Description     string
	ContentType     string
	IsNSFW          string
	Language        string
	ThumbnailURL    string
	Title           string
	Fee             string
	FeeCurrency     string
	IsFiltered      string
	Created         string
	Modified        string
}{
	ID:              "id",
	TransactionHash: "transaction_hash",
	VOut:            "v_out",
	Name:            "name",
	ClaimID:         "claim_id",
	ClaimType:       "claim_type",
	PublisherID:     "publisher_id",
	PublisherSig:    "publisher_sig",
	Certificate:     "certificate",
	TransactionTime: "transaction_time",
	Version:         "version",
	Author:          "author",
	Description:     "description",
	ContentType:     "content_type",
	IsNSFW:          "is_n_s_f_w",
	Language:        "language",
	ThumbnailURL:    "thumbnail_url",
	Title:           "title",
	Fee:             "fee",
	FeeCurrency:     "fee_currency",
	IsFiltered:      "is_filtered",
	Created:         "created",
	Modified:        "modified",
}

// ClaimFilter allows you to filter on any columns by making them all pointers.
type ClaimFilter struct {
	ID              *uint64      `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	TransactionHash *null.String `boil:"transaction_hash" json:"transaction_hash,omitempty" toml:"transaction_hash" yaml:"transaction_hash,omitempty"`
	VOut            *uint        `boil:"v_out" json:"v_out,omitempty" toml:"v_out" yaml:"v_out,omitempty"`
	Name            *string      `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	ClaimID         *string      `boil:"claim_id" json:"claim_id,omitempty" toml:"claim_id" yaml:"claim_id,omitempty"`
	ClaimType       *bool        `boil:"claim_type" json:"claim_type,omitempty" toml:"claim_type" yaml:"claim_type,omitempty"`
	PublisherID     *null.String `boil:"publisher_id" json:"publisher_id,omitempty" toml:"publisher_id" yaml:"publisher_id,omitempty"`
	PublisherSig    *null.String `boil:"publisher_sig" json:"publisher_sig,omitempty" toml:"publisher_sig" yaml:"publisher_sig,omitempty"`
	Certificate     *null.String `boil:"certificate" json:"certificate,omitempty" toml:"certificate" yaml:"certificate,omitempty"`
	TransactionTime *null.Uint   `boil:"transaction_time" json:"transaction_time,omitempty" toml:"transaction_time" yaml:"transaction_time,omitempty"`
	Version         *string      `boil:"version" json:"version,omitempty" toml:"version" yaml:"version,omitempty"`
	Author          *null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	Description     *null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ContentType     *null.String `boil:"content_type" json:"content_type,omitempty" toml:"content_type" yaml:"content_type,omitempty"`
	IsNSFW          *bool        `boil:"is_n_s_f_w" json:"is_n_s_f_w,omitempty" toml:"is_n_s_f_w" yaml:"is_n_s_f_w,omitempty"`
	Language        *null.String `boil:"language" json:"language,omitempty" toml:"language" yaml:"language,omitempty"`
	ThumbnailURL    *null.String `boil:"thumbnail_url" json:"thumbnail_url,omitempty" toml:"thumbnail_url" yaml:"thumbnail_url,omitempty"`
	Title           *null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Fee             *string      `boil:"fee" json:"fee,omitempty" toml:"fee" yaml:"fee,omitempty"`
	FeeCurrency     *null.String `boil:"fee_currency" json:"fee_currency,omitempty" toml:"fee_currency" yaml:"fee_currency,omitempty"`
	IsFiltered      *bool        `boil:"is_filtered" json:"is_filtered,omitempty" toml:"is_filtered" yaml:"is_filtered,omitempty"`
	Created         *time.Time   `boil:"created" json:"created,omitempty" toml:"created" yaml:"created,omitempty"`
	Modified        *time.Time   `boil:"modified" json:"modified,omitempty" toml:"modified" yaml:"modified,omitempty"`
}

// claimR is where relationships are stored.
type claimR struct {
	TransactionHash *Transaction
	Publisher       *Claim
	IDClaimStream   *ClaimStream
	PublisherClaims ClaimSlice
}

// claimL is where Load methods for each relationship are stored.
type claimL struct{}

var (
	claimColumns               = []string{"id", "transaction_hash", "v_out", "name", "claim_id", "claim_type", "publisher_id", "publisher_sig", "certificate", "transaction_time", "version", "author", "description", "content_type", "is_n_s_f_w", "language", "thumbnail_url", "title", "fee", "fee_currency", "is_filtered", "created", "modified"}
	claimColumnsWithoutDefault = []string{"transaction_hash", "v_out", "name", "claim_id", "publisher_id", "publisher_sig", "certificate", "transaction_time", "version", "author", "description", "content_type", "language", "thumbnail_url", "title", "fee_currency", "created", "modified"}
	claimColumnsWithDefault    = []string{"id", "claim_type", "is_n_s_f_w", "fee", "is_filtered"}
	claimPrimaryKeyColumns     = []string{"id"}
	claimAutoIncrementColumn   = "id"
)

type (
	// ClaimSlice is an alias for a slice of pointers to Claim.
	// This should generally be used opposed to []Claim.
	ClaimSlice []*Claim

	ClaimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimType                 = reflect.TypeOf(&Claim{})
	claimMapping              = queries.MakeStructMapping(claimType)
	claimPrimaryKeyMapping, _ = queries.BindMapping(claimType, claimMapping, claimPrimaryKeyColumns)
	claimInsertCacheMut       sync.RWMutex
	claimInsertCache          = make(map[string]insertCache)
	claimUpdateCacheMut       sync.RWMutex
	claimUpdateCache          = make(map[string]updateCache)
	claimUpsertCacheMut       sync.RWMutex
	claimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single Claim record from the query, and panics on error.
func (q ClaimQuery) OneP() *Claim {
	o, err := q.One()
	if err != nil {
		panic(errors.Err(err))
	}

	return o
}

// One returns a single Claim record from the query.
func (q ClaimQuery) One() (*Claim, error) {
	o := &Claim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: failed to execute a one query for claims", err)
	}

	return o, nil
}

// AllP returns all Claim records from the query, and panics on error.
func (q ClaimQuery) AllP() ClaimSlice {
	o, err := q.All()
	if err != nil {
		panic(errors.Err(err))
	}

	return o
}

// All returns all Claim records from the query.
func (q ClaimQuery) All() (ClaimSlice, error) {
	var o []*Claim

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Prefix("model: failed to assign all query results to Claim slice", err)
	}

	return o, nil
}

// CountP returns the count of all Claim records in the query, and panics on error.
func (q ClaimQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(errors.Err(err))
	}

	return c
}

// Count returns the count of all Claim records in the query.
func (q ClaimQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Prefix("model: failed to count claims rows", err)
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q ClaimQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q ClaimQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetSelect(q.Query, []string{})
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Prefix("model: failed to check if claims exists", err)
	}

	return count > 0, nil
}

// TransactionHashG pointed to by the foreign key.
func (o *Claim) TransactionHashG(mods ...qm.QueryMod) TransactionQuery {
	return o.TransactionHash(boil.GetDB(), mods...)
}

// TransactionHash pointed to by the foreign key.
func (o *Claim) TransactionHash(exec boil.Executor, mods ...qm.QueryMod) TransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("hash=?", o.TransactionHash),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	return query
}

// PublisherG pointed to by the foreign key.
func (o *Claim) PublisherG(mods ...qm.QueryMod) ClaimQuery {
	return o.Publisher(boil.GetDB(), mods...)
}

// Publisher pointed to by the foreign key.
func (o *Claim) Publisher(exec boil.Executor, mods ...qm.QueryMod) ClaimQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.PublisherID),
	}

	queryMods = append(queryMods, mods...)

	query := Claims(exec, queryMods...)
	queries.SetFrom(query.Query, "`claims`")

	return query
}

// IDClaimStreamG pointed to by the foreign key.
func (o *Claim) IDClaimStreamG(mods ...qm.QueryMod) ClaimStreamQuery {
	return o.IDClaimStream(boil.GetDB(), mods...)
}

// IDClaimStream pointed to by the foreign key.
func (o *Claim) IDClaimStream(exec boil.Executor, mods ...qm.QueryMod) ClaimStreamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ClaimStreams(exec, queryMods...)
	queries.SetFrom(query.Query, "`claim_streams`")

	return query
}

// PublisherClaimsG retrieves all the claim's claims via publisher_id column.
func (o *Claim) PublisherClaimsG(mods ...qm.QueryMod) ClaimQuery {
	return o.PublisherClaims(boil.GetDB(), mods...)
}

// PublisherClaims retrieves all the claim's claims with an executor via publisher_id column.
func (o *Claim) PublisherClaims(exec boil.Executor, mods ...qm.QueryMod) ClaimQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`claims`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`claims`.`publisher_id`=?", o.ClaimID),
	)

	query := Claims(exec, queryMods...)
	queries.SetFrom(query.Query, "`claims`")
	return query
}

// LoadTransactionHash allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadTransactionHash(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.TransactionHash
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.TransactionHash
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `hash` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Prefix("failed to eager load Transaction", err)
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Prefix("failed to bind eager loaded slice Transaction", err)
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.TransactionHash = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionHash.String == foreign.Hash {
				local.R.TransactionHash = foreign
				break
			}
		}
	}

	return nil
}

// LoadPublisher allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadPublisher(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.PublisherID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.PublisherID
		}
	}

	query := fmt.Sprintf(
		"select * from `claims` where `claim_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Prefix("failed to eager load Claim", err)
	}
	defer results.Close()

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Prefix("failed to bind eager loaded slice Claim", err)
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Publisher = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublisherID.String == foreign.ClaimID {
				local.R.Publisher = foreign
				break
			}
		}
	}

	return nil
}

// LoadIDClaimStream allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadIDClaimStream(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `claim_streams` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Prefix("failed to eager load ClaimStream", err)
	}
	defer results.Close()

	var resultSlice []*ClaimStream
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Prefix("failed to bind eager loaded slice ClaimStream", err)
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.IDClaimStream = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDClaimStream = foreign
				break
			}
		}
	}

	return nil
}

// LoadPublisherClaims allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadPublisherClaims(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.ClaimID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.ClaimID
		}
	}

	query := fmt.Sprintf(
		"select * from `claims` where `publisher_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Prefix("failed to eager load claims", err)
	}
	defer results.Close()

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Prefix("failed to bind eager loaded slice claims", err)
	}

	if singular {
		object.R.PublisherClaims = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ClaimID == foreign.PublisherID.String {
				local.R.PublisherClaims = append(local.R.PublisherClaims, foreign)
				break
			}
		}
	}

	return nil
}

// SetTransactionHashG of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
// Uses the global database handle.
func (o *Claim) SetTransactionHashG(insert bool, related *Transaction) error {
	return o.SetTransactionHash(boil.GetDB(), insert, related)
}

// SetTransactionHashP of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
// Panics on error.
func (o *Claim) SetTransactionHashP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransactionHash(exec, insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetTransactionHashGP of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
// Uses the global database handle and panics on error.
func (o *Claim) SetTransactionHashGP(insert bool, related *Transaction) {
	if err := o.SetTransactionHash(boil.GetDB(), insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetTransactionHash of the claim to the related item.
// Sets o.R.TransactionHash to related.
// Adds o to related.R.TransactionHashClaims.
func (o *Claim) SetTransactionHash(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Prefix("failed to insert into foreign table", err)
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claims` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_hash"}),
		strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Prefix("failed to update local table", err)
	}

	o.TransactionHash.String = related.Hash
	o.TransactionHash.Valid = true

	if o.R == nil {
		o.R = &claimR{
			TransactionHash: related,
		}
	} else {
		o.R.TransactionHash = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionHashClaims: ClaimSlice{o},
		}
	} else {
		related.R.TransactionHashClaims = append(related.R.TransactionHashClaims, o)
	}

	return nil
}

// RemoveTransactionHashG relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Claim) RemoveTransactionHashG(related *Transaction) error {
	return o.RemoveTransactionHash(boil.GetDB(), related)
}

// RemoveTransactionHashP relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Claim) RemoveTransactionHashP(exec boil.Executor, related *Transaction) {
	if err := o.RemoveTransactionHash(exec, related); err != nil {
		panic(errors.Err(err))
	}
}

// RemoveTransactionHashGP relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Claim) RemoveTransactionHashGP(related *Transaction) {
	if err := o.RemoveTransactionHash(boil.GetDB(), related); err != nil {
		panic(errors.Err(err))
	}
}

// RemoveTransactionHash relationship.
// Sets o.R.TransactionHash to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Claim) RemoveTransactionHash(exec boil.Executor, related *Transaction) error {
	var err error

	o.TransactionHash.Valid = false
	if err = o.Update(exec, "transaction_hash"); err != nil {
		o.TransactionHash.Valid = true
		return errors.Prefix("failed to update local table", err)
	}

	o.R.TransactionHash = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionHashClaims {
		if o.TransactionHash.String != ri.TransactionHash.String {
			continue
		}

		ln := len(related.R.TransactionHashClaims)
		if ln > 1 && i < ln-1 {
			related.R.TransactionHashClaims[i] = related.R.TransactionHashClaims[ln-1]
		}
		related.R.TransactionHashClaims = related.R.TransactionHashClaims[:ln-1]
		break
	}
	return nil
}

// SetPublisherG of the claim to the related item.
// Sets o.R.Publisher to related.
// Adds o to related.R.PublisherClaims.
// Uses the global database handle.
func (o *Claim) SetPublisherG(insert bool, related *Claim) error {
	return o.SetPublisher(boil.GetDB(), insert, related)
}

// SetPublisherP of the claim to the related item.
// Sets o.R.Publisher to related.
// Adds o to related.R.PublisherClaims.
// Panics on error.
func (o *Claim) SetPublisherP(exec boil.Executor, insert bool, related *Claim) {
	if err := o.SetPublisher(exec, insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetPublisherGP of the claim to the related item.
// Sets o.R.Publisher to related.
// Adds o to related.R.PublisherClaims.
// Uses the global database handle and panics on error.
func (o *Claim) SetPublisherGP(insert bool, related *Claim) {
	if err := o.SetPublisher(boil.GetDB(), insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetPublisher of the claim to the related item.
// Sets o.R.Publisher to related.
// Adds o to related.R.PublisherClaims.
func (o *Claim) SetPublisher(exec boil.Executor, insert bool, related *Claim) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Prefix("failed to insert into foreign table", err)
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claims` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"publisher_id"}),
		strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Prefix("failed to update local table", err)
	}

	o.PublisherID.String = related.ClaimID
	o.PublisherID.Valid = true

	if o.R == nil {
		o.R = &claimR{
			Publisher: related,
		}
	} else {
		o.R.Publisher = related
	}

	if related.R == nil {
		related.R = &claimR{
			PublisherClaims: ClaimSlice{o},
		}
	} else {
		related.R.PublisherClaims = append(related.R.PublisherClaims, o)
	}

	return nil
}

// RemovePublisherG relationship.
// Sets o.R.Publisher to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Claim) RemovePublisherG(related *Claim) error {
	return o.RemovePublisher(boil.GetDB(), related)
}

// RemovePublisherP relationship.
// Sets o.R.Publisher to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Claim) RemovePublisherP(exec boil.Executor, related *Claim) {
	if err := o.RemovePublisher(exec, related); err != nil {
		panic(errors.Err(err))
	}
}

// RemovePublisherGP relationship.
// Sets o.R.Publisher to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Claim) RemovePublisherGP(related *Claim) {
	if err := o.RemovePublisher(boil.GetDB(), related); err != nil {
		panic(errors.Err(err))
	}
}

// RemovePublisher relationship.
// Sets o.R.Publisher to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Claim) RemovePublisher(exec boil.Executor, related *Claim) error {
	var err error

	o.PublisherID.Valid = false
	if err = o.Update(exec, "publisher_id"); err != nil {
		o.PublisherID.Valid = true
		return errors.Prefix("failed to update local table", err)
	}

	o.R.Publisher = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PublisherClaims {
		if o.PublisherID.String != ri.PublisherID.String {
			continue
		}

		ln := len(related.R.PublisherClaims)
		if ln > 1 && i < ln-1 {
			related.R.PublisherClaims[i] = related.R.PublisherClaims[ln-1]
		}
		related.R.PublisherClaims = related.R.PublisherClaims[:ln-1]
		break
	}
	return nil
}

// SetIDClaimStreamG of the claim to the related item.
// Sets o.R.IDClaimStream to related.
// Adds o to related.R.ID.
// Uses the global database handle.
func (o *Claim) SetIDClaimStreamG(insert bool, related *ClaimStream) error {
	return o.SetIDClaimStream(boil.GetDB(), insert, related)
}

// SetIDClaimStreamP of the claim to the related item.
// Sets o.R.IDClaimStream to related.
// Adds o to related.R.ID.
// Panics on error.
func (o *Claim) SetIDClaimStreamP(exec boil.Executor, insert bool, related *ClaimStream) {
	if err := o.SetIDClaimStream(exec, insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetIDClaimStreamGP of the claim to the related item.
// Sets o.R.IDClaimStream to related.
// Adds o to related.R.ID.
// Uses the global database handle and panics on error.
func (o *Claim) SetIDClaimStreamGP(insert bool, related *ClaimStream) {
	if err := o.SetIDClaimStream(boil.GetDB(), insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetIDClaimStream of the claim to the related item.
// Sets o.R.IDClaimStream to related.
// Adds o to related.R.ID.
func (o *Claim) SetIDClaimStream(exec boil.Executor, insert bool, related *ClaimStream) error {
	var err error

	if insert {
		related.ID = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Prefix("failed to insert into foreign table", err)
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `claim_streams` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"id"}),
			strmangle.WhereClause("`", "`", 0, claimStreamPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Prefix("failed to update foreign table", err)
		}

		related.ID = o.ID

	}

	if o.R == nil {
		o.R = &claimR{
			IDClaimStream: related,
		}
	} else {
		o.R.IDClaimStream = related
	}

	if related.R == nil {
		related.R = &claimStreamR{
			ID: o,
		}
	} else {
		related.R.ID = o
	}
	return nil
}

// AddPublisherClaimsG adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaims.
// Sets related.R.Publisher appropriately.
// Uses the global database handle.
func (o *Claim) AddPublisherClaimsG(insert bool, related ...*Claim) error {
	return o.AddPublisherClaims(boil.GetDB(), insert, related...)
}

// AddPublisherClaimsP adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaims.
// Sets related.R.Publisher appropriately.
// Panics on error.
func (o *Claim) AddPublisherClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.AddPublisherClaims(exec, insert, related...); err != nil {
		panic(errors.Err(err))
	}
}

// AddPublisherClaimsGP adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaims.
// Sets related.R.Publisher appropriately.
// Uses the global database handle and panics on error.
func (o *Claim) AddPublisherClaimsGP(insert bool, related ...*Claim) {
	if err := o.AddPublisherClaims(boil.GetDB(), insert, related...); err != nil {
		panic(errors.Err(err))
	}
}

// AddPublisherClaims adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaims.
// Sets related.R.Publisher appropriately.
func (o *Claim) AddPublisherClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublisherID.String = o.ClaimID
			rel.PublisherID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Prefix("failed to insert into foreign table", err)
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `claims` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"publisher_id"}),
				strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
			)
			values := []interface{}{o.ClaimID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Prefix("failed to update foreign table", err)
			}

			rel.PublisherID.String = o.ClaimID
			rel.PublisherID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &claimR{
			PublisherClaims: related,
		}
	} else {
		o.R.PublisherClaims = append(o.R.PublisherClaims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimR{
				Publisher: o,
			}
		} else {
			rel.R.Publisher = o
		}
	}
	return nil
}

// SetPublisherClaimsG removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Publisher's PublisherClaims accordingly.
// Replaces o.R.PublisherClaims with related.
// Sets related.R.Publisher's PublisherClaims accordingly.
// Uses the global database handle.
func (o *Claim) SetPublisherClaimsG(insert bool, related ...*Claim) error {
	return o.SetPublisherClaims(boil.GetDB(), insert, related...)
}

// SetPublisherClaimsP removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Publisher's PublisherClaims accordingly.
// Replaces o.R.PublisherClaims with related.
// Sets related.R.Publisher's PublisherClaims accordingly.
// Panics on error.
func (o *Claim) SetPublisherClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.SetPublisherClaims(exec, insert, related...); err != nil {
		panic(errors.Err(err))
	}
}

// SetPublisherClaimsGP removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Publisher's PublisherClaims accordingly.
// Replaces o.R.PublisherClaims with related.
// Sets related.R.Publisher's PublisherClaims accordingly.
// Uses the global database handle and panics on error.
func (o *Claim) SetPublisherClaimsGP(insert bool, related ...*Claim) {
	if err := o.SetPublisherClaims(boil.GetDB(), insert, related...); err != nil {
		panic(errors.Err(err))
	}
}

// SetPublisherClaims removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Publisher's PublisherClaims accordingly.
// Replaces o.R.PublisherClaims with related.
// Sets related.R.Publisher's PublisherClaims accordingly.
func (o *Claim) SetPublisherClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	query := "update `claims` set `publisher_id` = null where `publisher_id` = ?"
	values := []interface{}{o.ClaimID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Prefix("failed to remove relationships before set", err)
	}

	if o.R != nil {
		for _, rel := range o.R.PublisherClaims {
			rel.PublisherID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Publisher = nil
		}

		o.R.PublisherClaims = nil
	}
	return o.AddPublisherClaims(exec, insert, related...)
}

// RemovePublisherClaimsG relationships from objects passed in.
// Removes related items from R.PublisherClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.Publisher.
// Uses the global database handle.
func (o *Claim) RemovePublisherClaimsG(related ...*Claim) error {
	return o.RemovePublisherClaims(boil.GetDB(), related...)
}

// RemovePublisherClaimsP relationships from objects passed in.
// Removes related items from R.PublisherClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.Publisher.
// Panics on error.
func (o *Claim) RemovePublisherClaimsP(exec boil.Executor, related ...*Claim) {
	if err := o.RemovePublisherClaims(exec, related...); err != nil {
		panic(errors.Err(err))
	}
}

// RemovePublisherClaimsGP relationships from objects passed in.
// Removes related items from R.PublisherClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.Publisher.
// Uses the global database handle and panics on error.
func (o *Claim) RemovePublisherClaimsGP(related ...*Claim) {
	if err := o.RemovePublisherClaims(boil.GetDB(), related...); err != nil {
		panic(errors.Err(err))
	}
}

// RemovePublisherClaims relationships from objects passed in.
// Removes related items from R.PublisherClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.Publisher.
func (o *Claim) RemovePublisherClaims(exec boil.Executor, related ...*Claim) error {
	var err error
	for _, rel := range related {
		rel.PublisherID.Valid = false
		if rel.R != nil {
			rel.R.Publisher = nil
		}
		if err = rel.Update(exec, "publisher_id"); err != nil {
			return errors.Err(err)
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PublisherClaims {
			if rel != ri {
				continue
			}

			ln := len(o.R.PublisherClaims)
			if ln > 1 && i < ln-1 {
				o.R.PublisherClaims[i] = o.R.PublisherClaims[ln-1]
			}
			o.R.PublisherClaims = o.R.PublisherClaims[:ln-1]
			break
		}
	}

	return nil
}

// ClaimsG retrieves all records.
func ClaimsG(mods ...qm.QueryMod) ClaimQuery {
	return Claims(boil.GetDB(), mods...)
}

// Claims retrieves all the records using an executor.
func Claims(exec boil.Executor, mods ...qm.QueryMod) ClaimQuery {
	mods = append(mods, qm.From("`claims`"))
	return ClaimQuery{NewQuery(exec, mods...)}
}

// FindClaimG retrieves a single record by ID.
func FindClaimG(id uint64, selectCols ...string) (*Claim, error) {
	return FindClaim(boil.GetDB(), id, selectCols...)
}

// FindClaimGP retrieves a single record by ID, and panics on error.
func FindClaimGP(id uint64, selectCols ...string) *Claim {
	retobj, err := FindClaim(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(errors.Err(err))
	}

	return retobj
}

// FindClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaim(exec boil.Executor, id uint64, selectCols ...string) (*Claim, error) {
	claimObj := &Claim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `claims` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(claimObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: unable to select from claims", err)
	}

	return claimObj, nil
}

// FindClaimP retrieves a single record by ID with an executor, and panics on error.
func FindClaimP(exec boil.Executor, id uint64, selectCols ...string) *Claim {
	retobj, err := FindClaim(exec, id, selectCols...)
	if err != nil {
		panic(errors.Err(err))
	}

	return retobj
}

// FindOneClaim retrieves a single record using filters.
func FindOneClaim(exec boil.Executor, filters ClaimFilter) (*Claim, error) {
	obj := &Claim{}

	err := ClaimNewQuery(exec).
		Where(filters).
		Limit(1).
		Bind(obj)

	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: unable to select from claims", err)
	}

	return obj, nil
}

// FindOneClaimG retrieves a single record using filters.
func FindOneClaimG(filters ClaimFilter) (*Claim, error) {
	return FindOneClaim(boil.GetDB(), filters)
}

// FindOneClaimOrInit retrieves a single record using filters, or initializes a new record if one is not found.
func FindOneClaimOrInit(exec boil.Executor, filters ClaimFilter) (*Claim, error) {
	claimObj, err := FindOneClaim(exec, filters)
	if err != nil {
		return nil, err
	}

	if claimObj == nil {
		claimObj = &Claim{}
		objR := reflect.ValueOf(claimObj).Elem()
		r := reflect.ValueOf(filters)
		for i := 0; i < r.NumField(); i++ {
			f := r.Field(i)
			if f.Elem().IsValid() {
				objR.FieldByName(r.Type().Field(i).Name).Set(f.Elem())
			}
		}
	}

	return claimObj, nil
}

// FindOneClaimOrInit retrieves a single record using filters, or initializes a new record if one is not found.
func FindOneClaimOrInitG(filters ClaimFilter) (*Claim, error) {
	return FindOneClaimOrInit(boil.GetDB(), filters)
}

// FindOneClaimOrInit retrieves a single record using filters, or initializes and inserts a new record if one is not found.
func FindOneClaimOrCreate(exec boil.Executor, filters ClaimFilter) (*Claim, error) {
	claimObj, err := FindOneClaimOrInit(exec, filters)
	if err != nil {
		return nil, err
	}
	if claimObj.IsNew() {
		err := claimObj.Insert(exec)
		if err != nil {
			return nil, err
		}
	}
	return claimObj, nil
}

// FindOneClaimOrInit retrieves a single record using filters, or initializes and inserts a new record if one is not found.
func FindOneClaimOrCreateG(filters ClaimFilter) (*Claim, error) {
	return FindOneClaimOrCreate(boil.GetDB(), filters)
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Claim) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Claim) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Claim) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Claim) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.Err("model: no claims provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	claimInsertCacheMut.RLock()
	cache, cached := claimInsertCache[key]
	claimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			claimColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, wl)
		if err != nil {
			return errors.Err(err)
		}
		cache.retMapping, err = queries.BindMapping(claimType, claimMapping, returnColumns)
		if err != nil {
			return errors.Err(err)
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `claims` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `claims` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `claims` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Prefix("model: unable to insert into claims", err)
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return errors.Err(ErrSyncFail)
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Prefix("model: unable to populate default values for claims", err)
	}

CacheNoHooks:
	if !cached {
		claimInsertCacheMut.Lock()
		claimInsertCache[key] = cache
		claimInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Claim record. See Update for
// whitelist behavior description.
func (o *Claim) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Claim record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Claim) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateP uses an executor to update the Claim, and panics on error.
// See Update for whitelist behavior description.
func (o *Claim) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(errors.Err(err))
	}
}

// Update uses an executor to update the Claim.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Claim) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	claimUpdateCacheMut.RLock()
	cache, cached := claimUpdateCache[key]
	claimUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			claimColumns,
			claimPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.Err("model: unable to update claims, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `claims` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, append(wl, claimPrimaryKeyColumns...))
		if err != nil {
			return errors.Err(err)
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Prefix("model: unable to update claims row", err)
	}

	if !cached {
		claimUpdateCacheMut.Lock()
		claimUpdateCache[key] = cache
		claimUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q ClaimQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q ClaimQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Prefix("model: unable to update all for claims", err)
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClaimSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ClaimSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ClaimSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.Err("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `claims` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to update all in claim slice", err)
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Claim) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Claim) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Claim) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Claim) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.Err("model: no claims provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimUpsertCacheMut.RLock()
	cache, cached := claimUpsertCache[key]
	claimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			claimColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			claimColumns,
			claimPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.Err("model: unable to upsert claims, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "claims", update, insert, claimAutoIncrementColumn)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `claims` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, insert)
		if err != nil {
			return errors.Err(err)
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimType, claimMapping, ret)
			if err != nil {
				return errors.Err(err)
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Prefix("model: unable to upsert for claims", err)
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return errors.Err(ErrSyncFail)
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Prefix("model: unable to populate default values for claims", err)
	}

CacheNoHooks:
	if !cached {
		claimUpsertCacheMut.Lock()
		claimUpsertCache[key] = cache
		claimUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Claim record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Claim) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteG deletes a single Claim record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Claim) DeleteG() error {
	if o == nil {
		return errors.Err("model: no Claim provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Claim record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Claim) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(errors.Err(err))
	}
}

// Delete deletes a single Claim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Claim) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.Err("model: no Claim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimPrimaryKeyMapping)
	sql := "DELETE FROM `claims` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to delete from claims", err)
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q ClaimQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAll deletes all matching rows.
func (q ClaimQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.Err("model: no ClaimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Prefix("model: unable to delete all from claims", err)
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ClaimSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ClaimSlice) DeleteAllG() error {
	if o == nil {
		return errors.Err("model: no Claim slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ClaimSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.Err("model: no Claim slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `claims` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to delete all from claim slice", err)
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Claim) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Claim) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Claim) ReloadG() error {
	if o == nil {
		return errors.Err("model: no Claim provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Claim) Reload(exec boil.Executor) error {
	ret, err := FindClaim(exec, o.ID)
	if err != nil {
		return errors.Err(err)
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimSlice) ReloadAllG() error {
	if o == nil {
		return errors.Err("model: empty ClaimSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	claims := ClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `claims`.* FROM `claims` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&claims)
	if err != nil {
		return errors.Prefix("model: unable to reload all in ClaimSlice", err)
	}

	*o = claims

	return nil
}

// ClaimExists checks if the Claim row exists.
func ClaimExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `claims` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Prefix("model: unable to check if claims exists", err)
	}

	return exists, nil
}

// ClaimExistsG checks if the Claim row exists.
func ClaimExistsG(id uint64) (bool, error) {
	return ClaimExists(boil.GetDB(), id)
}

// ClaimExistsGP checks if the Claim row exists. Panics on error.
func ClaimExistsGP(id uint64) bool {
	e, err := ClaimExists(boil.GetDB(), id)
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// ClaimExistsP checks if the Claim row exists. Panics on error.
func ClaimExistsP(exec boil.Executor, id uint64) bool {
	e, err := ClaimExists(exec, id)
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// IsNew() checks if record exists in db (aka if its primary key is set).
func (o *Claim) IsNew() bool {
	r := reflect.ValueOf(o).Elem()
	for i := 0; i < r.NumField(); i++ {
		column := r.Type().Field(i).Tag.Get("boil")
		for _, pkColumn := range claimPrimaryKeyColumns {
			if column == pkColumn {
				field := r.Field(i)
				if field.Interface() != reflect.Zero(field.Type()).Interface() {
					return false
				}
			}
		}
	}
	return true
}

// Save() inserts the record if it does not exist, or updates it if it does.
func (o *Claim) Save(exec boil.Executor, whitelist ...string) error {
	if o.IsNew() {
		return o.Insert(exec, whitelist...)
	} else {
		return o.Update(exec, whitelist...)
	}
}

// SaveG() inserts the record if it does not exist, or updates it if it does.
func (o *Claim) SaveG(whitelist ...string) error {
	if o.IsNew() {
		return o.InsertG(whitelist...)
	} else {
		return o.UpdateG(whitelist...)
	}
}

// ClaimNewQuery filters query results
func ClaimNewQuery(exec boil.Executor) *ClaimQuery {
	return &ClaimQuery{NewQuery(exec, qm.Select("*"), qm.From("`claims`"))}
}

// ClaimNewQuery filters query results
func ClaimNewQueryG() *ClaimQuery {
	return ClaimNewQuery(boil.GetDB())
}

// Where filters query results
func (q *ClaimQuery) Where(filters ClaimFilter) *ClaimQuery {
	r := reflect.ValueOf(filters)
	for i := 0; i < r.NumField(); i++ {
		f := r.Field(i)
		if f.Elem().IsValid() {
			if nullable, ok := f.Elem().Interface().(null.Nullable); ok && nullable.IsNull() {
				queries.AppendWhere(q.Query, r.Type().Field(i).Tag.Get("boil")+" IS NULL")
			} else {
				queries.AppendWhere(q.Query, r.Type().Field(i).Tag.Get("boil")+" = ?", f.Elem().Interface())
			}
		}
	}
	return q
}

// Limit limits query results
func (q *ClaimQuery) Limit(limit int) *ClaimQuery {
	queries.SetLimit(q.Query, limit)
	return q
}

// Merge combines two Claims into one. The primary record will be kept, and the secondary will be deleted.
func MergeClaims(exec boil.Executor, primaryID uint64, secondaryID uint64) (err error) {
	tx, ok := exec.(boil.Transactor)
	if !ok {
		txdb, ok := exec.(boil.Beginner)
		if !ok {
			return errors.Err("database does not support transactions")
		}

		tx, err = txdb.Begin()
		if err != nil {
			return errors.Err(err)
		}

		defer func() {
			if p := recover(); p != nil {
				tx.Rollback()
				panic(p) // Rollback, then propagate panic
			} else if err != nil {
				tx.Rollback()
			} else {
				err = tx.Commit()
			}
		}()
	}

	primary, err := FindClaim(tx, primaryID)
	if err != nil {
		return errors.Err(err)
	} else if primary == nil {
		return errors.Err("primary Claim not found")
	}

	secondary, err := FindClaim(tx, secondaryID)
	if err != nil {
		return errors.Err(err)
	} else if secondary == nil {
		return errors.Err("secondary Claim not found")
	}

	foreignKeys := []foreignKey{
		{foreignTable: "claim_streams", foreignColumn: "id"},
		{foreignTable: "claims", foreignColumn: "publisher_id"},
	}

	conflictingKeys := []conflictingUniqueKey{}

	err = mergeModels(tx, primaryID, secondaryID, foreignKeys, conflictingKeys)
	if err != nil {
		return err
	}

	pr := reflect.ValueOf(primary)
	sr := reflect.ValueOf(secondary)
	// for any column thats null on the primary and not null on the secondary, copy from secondary to primary
	for i := 0; i < sr.Elem().NumField(); i++ {
		pf := pr.Elem().Field(i)
		sf := sr.Elem().Field(i)
		if sf.IsValid() {
			if nullable, ok := sf.Interface().(null.Nullable); ok && !nullable.IsNull() && pf.Interface().(null.Nullable).IsNull() {
				pf.Set(sf)
			}
		}
	}

	err = primary.Update(tx)
	if err != nil {
		return err
	}

	err = secondary.Delete(tx)
	if err != nil {
		return err
	}

	return nil
}

// Merge combines two Claims into one. The primary record will be kept, and the secondary will be deleted.
func MergeClaimsG(primaryID uint64, secondaryID uint64) error {
	return MergeClaims(boil.GetDB(), primaryID, secondaryID)
}
