// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Claim is an object representing the database table.
type Claim struct {
	ID                   uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionOfClaimID null.String `boil:"transaction_of_claim_id" json:"transaction_of_claim_id,omitempty" toml:"transaction_of_claim_id" yaml:"transaction_of_claim_id,omitempty"`
	VOut                 uint        `boil:"v_out" json:"v_out" toml:"v_out" yaml:"v_out"`
	Name                 string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	ClaimID              string      `boil:"claim_id" json:"claim_id" toml:"claim_id" yaml:"claim_id"`
	ClaimType            bool        `boil:"claim_type" json:"claim_type" toml:"claim_type" yaml:"claim_type"`
	PublisherClaimID     null.String `boil:"publisher_claim_id" json:"publisher_claim_id,omitempty" toml:"publisher_claim_id" yaml:"publisher_claim_id,omitempty"`
	PublisherSig         null.String `boil:"publisher_sig" json:"publisher_sig,omitempty" toml:"publisher_sig" yaml:"publisher_sig,omitempty"`
	Certificate          null.String `boil:"certificate" json:"certificate,omitempty" toml:"certificate" yaml:"certificate,omitempty"`
	TransactionTime      null.Uint   `boil:"transaction_time" json:"transaction_time,omitempty" toml:"transaction_time" yaml:"transaction_time,omitempty"`
	Version              string      `boil:"version" json:"version" toml:"version" yaml:"version"`
	Author               null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	Description          null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ContentType          null.String `boil:"content_type" json:"content_type,omitempty" toml:"content_type" yaml:"content_type,omitempty"`
	IsNSFW               bool        `boil:"is_n_s_f_w" json:"is_n_s_f_w" toml:"is_n_s_f_w" yaml:"is_n_s_f_w"`
	Language             null.String `boil:"language" json:"language,omitempty" toml:"language" yaml:"language,omitempty"`
	ThumbnailURL         null.String `boil:"thumbnail_url" json:"thumbnail_url,omitempty" toml:"thumbnail_url" yaml:"thumbnail_url,omitempty"`
	Title                null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Fee                  string      `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	FeeCurrency          null.String `boil:"fee_currency" json:"fee_currency,omitempty" toml:"fee_currency" yaml:"fee_currency,omitempty"`
	IsFiltered           bool        `boil:"is_filtered" json:"is_filtered" toml:"is_filtered" yaml:"is_filtered"`
	Created              time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified             time.Time   `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *claimR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L claimL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClaimColumns = struct {
	ID                   string
	TransactionOfClaimID string
	VOut                 string
	Name                 string
	ClaimID              string
	ClaimType            string
	PublisherClaimID     string
	PublisherSig         string
	Certificate          string
	TransactionTime      string
	Version              string
	Author               string
	Description          string
	ContentType          string
	IsNSFW               string
	Language             string
	ThumbnailURL         string
	Title                string
	Fee                  string
	FeeCurrency          string
	IsFiltered           string
	Created              string
	Modified             string
}{
	ID:                   "id",
	TransactionOfClaimID: "transaction_of_claim_id",
	VOut:                 "v_out",
	Name:                 "name",
	ClaimID:              "claim_id",
	ClaimType:            "claim_type",
	PublisherClaimID:     "publisher_claim_id",
	PublisherSig:         "publisher_sig",
	Certificate:          "certificate",
	TransactionTime:      "transaction_time",
	Version:              "version",
	Author:               "author",
	Description:          "description",
	ContentType:          "content_type",
	IsNSFW:               "is_n_s_f_w",
	Language:             "language",
	ThumbnailURL:         "thumbnail_url",
	Title:                "title",
	Fee:                  "fee",
	FeeCurrency:          "fee_currency",
	IsFiltered:           "is_filtered",
	Created:              "created",
	Modified:             "modified",
}

// claimR is where relationships are stored.
type claimR struct {
	PublisherClaim       *Claim
	TransactionOfClaim   *Transaction
	ClaimStream          *ClaimStream
	PublisherClaimClaims ClaimSlice
}

// claimL is where Load methods for each relationship are stored.
type claimL struct{}

var (
	claimColumns               = []string{"id", "transaction_of_claim_id", "v_out", "name", "claim_id", "claim_type", "publisher_claim_id", "publisher_sig", "certificate", "transaction_time", "version", "author", "description", "content_type", "is_n_s_f_w", "language", "thumbnail_url", "title", "fee", "fee_currency", "is_filtered", "created", "modified"}
	claimColumnsWithoutDefault = []string{"transaction_of_claim_id", "v_out", "name", "claim_id", "publisher_claim_id", "publisher_sig", "certificate", "transaction_time", "version", "author", "description", "content_type", "language", "thumbnail_url", "title", "fee_currency", "created", "modified"}
	claimColumnsWithDefault    = []string{"id", "claim_type", "is_n_s_f_w", "fee", "is_filtered"}
	claimPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClaimSlice is an alias for a slice of pointers to Claim.
	// This should generally be used opposed to []Claim.
	ClaimSlice []*Claim

	claimQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	claimType                 = reflect.TypeOf(&Claim{})
	claimMapping              = queries.MakeStructMapping(claimType)
	claimPrimaryKeyMapping, _ = queries.BindMapping(claimType, claimMapping, claimPrimaryKeyColumns)
	claimInsertCacheMut       sync.RWMutex
	claimInsertCache          = make(map[string]insertCache)
	claimUpdateCacheMut       sync.RWMutex
	claimUpdateCache          = make(map[string]updateCache)
	claimUpsertCacheMut       sync.RWMutex
	claimUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single claim record from the query, and panics on error.
func (q claimQuery) OneP() *Claim {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single claim record from the query.
func (q claimQuery) One() (*Claim, error) {
	o := &Claim{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for claims")
	}

	return o, nil
}

// AllP returns all Claim records from the query, and panics on error.
func (q claimQuery) AllP() ClaimSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Claim records from the query.
func (q claimQuery) All() (ClaimSlice, error) {
	var o []*Claim

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Claim slice")
	}

	return o, nil
}

// CountP returns the count of all Claim records in the query, and panics on error.
func (q claimQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Claim records in the query.
func (q claimQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count claims rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q claimQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q claimQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if claims exists")
	}

	return count > 0, nil
}

// PublisherClaimG pointed to by the foreign key.
func (o *Claim) PublisherClaimG(mods ...qm.QueryMod) claimQuery {
	return o.PublisherClaim(boil.GetDB(), mods...)
}

// PublisherClaim pointed to by the foreign key.
func (o *Claim) PublisherClaim(exec boil.Executor, mods ...qm.QueryMod) claimQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.PublisherClaimID),
	}

	queryMods = append(queryMods, mods...)

	query := Claims(exec, queryMods...)
	queries.SetFrom(query.Query, "`claims`")

	return query
}

// TransactionOfClaimG pointed to by the foreign key.
func (o *Claim) TransactionOfClaimG(mods ...qm.QueryMod) transactionQuery {
	return o.TransactionOfClaim(boil.GetDB(), mods...)
}

// TransactionOfClaim pointed to by the foreign key.
func (o *Claim) TransactionOfClaim(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("hash=?", o.TransactionOfClaimID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	return query
}

// ClaimStreamG pointed to by the foreign key.
func (o *Claim) ClaimStreamG(mods ...qm.QueryMod) claimStreamQuery {
	return o.ClaimStream(boil.GetDB(), mods...)
}

// ClaimStream pointed to by the foreign key.
func (o *Claim) ClaimStream(exec boil.Executor, mods ...qm.QueryMod) claimStreamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("claim_id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := ClaimStreams(exec, queryMods...)
	queries.SetFrom(query.Query, "`claim_streams`")

	return query
}

// PublisherClaimClaimsG retrieves all the claim's claims via publisher_claim_id column.
func (o *Claim) PublisherClaimClaimsG(mods ...qm.QueryMod) claimQuery {
	return o.PublisherClaimClaims(boil.GetDB(), mods...)
}

// PublisherClaimClaims retrieves all the claim's claims with an executor via publisher_claim_id column.
func (o *Claim) PublisherClaimClaims(exec boil.Executor, mods ...qm.QueryMod) claimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`claims`.`publisher_claim_id`=?", o.ClaimID),
	)

	query := Claims(exec, queryMods...)
	queries.SetFrom(query.Query, "`claims`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`claims`.*"})
	}

	return query
}

// LoadPublisherClaim allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadPublisherClaim(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.PublisherClaimID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.PublisherClaimID
		}
	}

	query := fmt.Sprintf(
		"select * from `claims` where `claim_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Claim")
	}
	defer results.Close()

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Claim")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.PublisherClaim = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PublisherClaimID.String == foreign.ClaimID {
				local.R.PublisherClaim = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionOfClaim allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadTransactionOfClaim(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.TransactionOfClaimID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.TransactionOfClaimID
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `hash` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.TransactionOfClaim = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionOfClaimID.String == foreign.Hash {
				local.R.TransactionOfClaim = foreign
				break
			}
		}
	}

	return nil
}

// LoadClaimStream allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadClaimStream(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `claim_streams` where `claim_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ClaimStream")
	}
	defer results.Close()

	var resultSlice []*ClaimStream
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ClaimStream")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ClaimStream = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ClaimID {
				local.R.ClaimStream = foreign
				break
			}
		}
	}

	return nil
}

// LoadPublisherClaimClaims allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (claimL) LoadPublisherClaimClaims(e boil.Executor, singular bool, maybeClaim interface{}) error {
	var slice []*Claim
	var object *Claim

	count := 1
	if singular {
		object = maybeClaim.(*Claim)
	} else {
		slice = *maybeClaim.(*[]*Claim)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &claimR{}
		}
		args[0] = object.ClaimID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &claimR{}
			}
			args[i] = obj.ClaimID
		}
	}

	query := fmt.Sprintf(
		"select * from `claims` where `publisher_claim_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claims")
	}
	defer results.Close()

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claims")
	}

	if singular {
		object.R.PublisherClaimClaims = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ClaimID == foreign.PublisherClaimID.String {
				local.R.PublisherClaimClaims = append(local.R.PublisherClaimClaims, foreign)
				break
			}
		}
	}

	return nil
}

// SetPublisherClaimG of the claim to the related item.
// Sets o.R.PublisherClaim to related.
// Adds o to related.R.PublisherClaimClaims.
// Uses the global database handle.
func (o *Claim) SetPublisherClaimG(insert bool, related *Claim) error {
	return o.SetPublisherClaim(boil.GetDB(), insert, related)
}

// SetPublisherClaimP of the claim to the related item.
// Sets o.R.PublisherClaim to related.
// Adds o to related.R.PublisherClaimClaims.
// Panics on error.
func (o *Claim) SetPublisherClaimP(exec boil.Executor, insert bool, related *Claim) {
	if err := o.SetPublisherClaim(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPublisherClaimGP of the claim to the related item.
// Sets o.R.PublisherClaim to related.
// Adds o to related.R.PublisherClaimClaims.
// Uses the global database handle and panics on error.
func (o *Claim) SetPublisherClaimGP(insert bool, related *Claim) {
	if err := o.SetPublisherClaim(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPublisherClaim of the claim to the related item.
// Sets o.R.PublisherClaim to related.
// Adds o to related.R.PublisherClaimClaims.
func (o *Claim) SetPublisherClaim(exec boil.Executor, insert bool, related *Claim) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claims` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"publisher_claim_id"}),
		strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.ClaimID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PublisherClaimID.String = related.ClaimID
	o.PublisherClaimID.Valid = true

	if o.R == nil {
		o.R = &claimR{
			PublisherClaim: related,
		}
	} else {
		o.R.PublisherClaim = related
	}

	if related.R == nil {
		related.R = &claimR{
			PublisherClaimClaims: ClaimSlice{o},
		}
	} else {
		related.R.PublisherClaimClaims = append(related.R.PublisherClaimClaims, o)
	}

	return nil
}

// RemovePublisherClaimG relationship.
// Sets o.R.PublisherClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Claim) RemovePublisherClaimG(related *Claim) error {
	return o.RemovePublisherClaim(boil.GetDB(), related)
}

// RemovePublisherClaimP relationship.
// Sets o.R.PublisherClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Claim) RemovePublisherClaimP(exec boil.Executor, related *Claim) {
	if err := o.RemovePublisherClaim(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePublisherClaimGP relationship.
// Sets o.R.PublisherClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Claim) RemovePublisherClaimGP(related *Claim) {
	if err := o.RemovePublisherClaim(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePublisherClaim relationship.
// Sets o.R.PublisherClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Claim) RemovePublisherClaim(exec boil.Executor, related *Claim) error {
	var err error

	o.PublisherClaimID.Valid = false
	if err = o.Update(exec, "publisher_claim_id"); err != nil {
		o.PublisherClaimID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.PublisherClaim = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PublisherClaimClaims {
		if o.PublisherClaimID.String != ri.PublisherClaimID.String {
			continue
		}

		ln := len(related.R.PublisherClaimClaims)
		if ln > 1 && i < ln-1 {
			related.R.PublisherClaimClaims[i] = related.R.PublisherClaimClaims[ln-1]
		}
		related.R.PublisherClaimClaims = related.R.PublisherClaimClaims[:ln-1]
		break
	}
	return nil
}

// SetTransactionOfClaimG of the claim to the related item.
// Sets o.R.TransactionOfClaim to related.
// Adds o to related.R.TransactionOfClaimClaims.
// Uses the global database handle.
func (o *Claim) SetTransactionOfClaimG(insert bool, related *Transaction) error {
	return o.SetTransactionOfClaim(boil.GetDB(), insert, related)
}

// SetTransactionOfClaimP of the claim to the related item.
// Sets o.R.TransactionOfClaim to related.
// Adds o to related.R.TransactionOfClaimClaims.
// Panics on error.
func (o *Claim) SetTransactionOfClaimP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransactionOfClaim(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionOfClaimGP of the claim to the related item.
// Sets o.R.TransactionOfClaim to related.
// Adds o to related.R.TransactionOfClaimClaims.
// Uses the global database handle and panics on error.
func (o *Claim) SetTransactionOfClaimGP(insert bool, related *Transaction) {
	if err := o.SetTransactionOfClaim(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionOfClaim of the claim to the related item.
// Sets o.R.TransactionOfClaim to related.
// Adds o to related.R.TransactionOfClaimClaims.
func (o *Claim) SetTransactionOfClaim(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `claims` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_of_claim_id"}),
		strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionOfClaimID.String = related.Hash
	o.TransactionOfClaimID.Valid = true

	if o.R == nil {
		o.R = &claimR{
			TransactionOfClaim: related,
		}
	} else {
		o.R.TransactionOfClaim = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionOfClaimClaims: ClaimSlice{o},
		}
	} else {
		related.R.TransactionOfClaimClaims = append(related.R.TransactionOfClaimClaims, o)
	}

	return nil
}

// RemoveTransactionOfClaimG relationship.
// Sets o.R.TransactionOfClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Claim) RemoveTransactionOfClaimG(related *Transaction) error {
	return o.RemoveTransactionOfClaim(boil.GetDB(), related)
}

// RemoveTransactionOfClaimP relationship.
// Sets o.R.TransactionOfClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Claim) RemoveTransactionOfClaimP(exec boil.Executor, related *Transaction) {
	if err := o.RemoveTransactionOfClaim(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionOfClaimGP relationship.
// Sets o.R.TransactionOfClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Claim) RemoveTransactionOfClaimGP(related *Transaction) {
	if err := o.RemoveTransactionOfClaim(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionOfClaim relationship.
// Sets o.R.TransactionOfClaim to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Claim) RemoveTransactionOfClaim(exec boil.Executor, related *Transaction) error {
	var err error

	o.TransactionOfClaimID.Valid = false
	if err = o.Update(exec, "transaction_of_claim_id"); err != nil {
		o.TransactionOfClaimID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.TransactionOfClaim = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TransactionOfClaimClaims {
		if o.TransactionOfClaimID.String != ri.TransactionOfClaimID.String {
			continue
		}

		ln := len(related.R.TransactionOfClaimClaims)
		if ln > 1 && i < ln-1 {
			related.R.TransactionOfClaimClaims[i] = related.R.TransactionOfClaimClaims[ln-1]
		}
		related.R.TransactionOfClaimClaims = related.R.TransactionOfClaimClaims[:ln-1]
		break
	}
	return nil
}

// SetClaimStreamG of the claim to the related item.
// Sets o.R.ClaimStream to related.
// Adds o to related.R.Claim.
// Uses the global database handle.
func (o *Claim) SetClaimStreamG(insert bool, related *ClaimStream) error {
	return o.SetClaimStream(boil.GetDB(), insert, related)
}

// SetClaimStreamP of the claim to the related item.
// Sets o.R.ClaimStream to related.
// Adds o to related.R.Claim.
// Panics on error.
func (o *Claim) SetClaimStreamP(exec boil.Executor, insert bool, related *ClaimStream) {
	if err := o.SetClaimStream(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClaimStreamGP of the claim to the related item.
// Sets o.R.ClaimStream to related.
// Adds o to related.R.Claim.
// Uses the global database handle and panics on error.
func (o *Claim) SetClaimStreamGP(insert bool, related *ClaimStream) {
	if err := o.SetClaimStream(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetClaimStream of the claim to the related item.
// Sets o.R.ClaimStream to related.
// Adds o to related.R.Claim.
func (o *Claim) SetClaimStream(exec boil.Executor, insert bool, related *ClaimStream) error {
	var err error

	if insert {
		related.ClaimID = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `claim_streams` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"claim_id"}),
			strmangle.WhereClause("`", "`", 0, claimStreamPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ClaimID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ClaimID = o.ID

	}

	if o.R == nil {
		o.R = &claimR{
			ClaimStream: related,
		}
	} else {
		o.R.ClaimStream = related
	}

	if related.R == nil {
		related.R = &claimStreamR{
			Claim: o,
		}
	} else {
		related.R.Claim = o
	}
	return nil
}

// AddPublisherClaimClaimsG adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaimClaims.
// Sets related.R.PublisherClaim appropriately.
// Uses the global database handle.
func (o *Claim) AddPublisherClaimClaimsG(insert bool, related ...*Claim) error {
	return o.AddPublisherClaimClaims(boil.GetDB(), insert, related...)
}

// AddPublisherClaimClaimsP adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaimClaims.
// Sets related.R.PublisherClaim appropriately.
// Panics on error.
func (o *Claim) AddPublisherClaimClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.AddPublisherClaimClaims(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPublisherClaimClaimsGP adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaimClaims.
// Sets related.R.PublisherClaim appropriately.
// Uses the global database handle and panics on error.
func (o *Claim) AddPublisherClaimClaimsGP(insert bool, related ...*Claim) {
	if err := o.AddPublisherClaimClaims(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddPublisherClaimClaims adds the given related objects to the existing relationships
// of the claim, optionally inserting them as new records.
// Appends related to o.R.PublisherClaimClaims.
// Sets related.R.PublisherClaim appropriately.
func (o *Claim) AddPublisherClaimClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PublisherClaimID.String = o.ClaimID
			rel.PublisherClaimID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `claims` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"publisher_claim_id"}),
				strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
			)
			values := []interface{}{o.ClaimID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PublisherClaimID.String = o.ClaimID
			rel.PublisherClaimID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &claimR{
			PublisherClaimClaims: related,
		}
	} else {
		o.R.PublisherClaimClaims = append(o.R.PublisherClaimClaims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimR{
				PublisherClaim: o,
			}
		} else {
			rel.R.PublisherClaim = o
		}
	}
	return nil
}

// SetPublisherClaimClaimsG removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PublisherClaim's PublisherClaimClaims accordingly.
// Replaces o.R.PublisherClaimClaims with related.
// Sets related.R.PublisherClaim's PublisherClaimClaims accordingly.
// Uses the global database handle.
func (o *Claim) SetPublisherClaimClaimsG(insert bool, related ...*Claim) error {
	return o.SetPublisherClaimClaims(boil.GetDB(), insert, related...)
}

// SetPublisherClaimClaimsP removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PublisherClaim's PublisherClaimClaims accordingly.
// Replaces o.R.PublisherClaimClaims with related.
// Sets related.R.PublisherClaim's PublisherClaimClaims accordingly.
// Panics on error.
func (o *Claim) SetPublisherClaimClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.SetPublisherClaimClaims(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPublisherClaimClaimsGP removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PublisherClaim's PublisherClaimClaims accordingly.
// Replaces o.R.PublisherClaimClaims with related.
// Sets related.R.PublisherClaim's PublisherClaimClaims accordingly.
// Uses the global database handle and panics on error.
func (o *Claim) SetPublisherClaimClaimsGP(insert bool, related ...*Claim) {
	if err := o.SetPublisherClaimClaims(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPublisherClaimClaims removes all previously related items of the
// claim replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PublisherClaim's PublisherClaimClaims accordingly.
// Replaces o.R.PublisherClaimClaims with related.
// Sets related.R.PublisherClaim's PublisherClaimClaims accordingly.
func (o *Claim) SetPublisherClaimClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	query := "update `claims` set `publisher_claim_id` = null where `publisher_claim_id` = ?"
	values := []interface{}{o.ClaimID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PublisherClaimClaims {
			rel.PublisherClaimID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.PublisherClaim = nil
		}

		o.R.PublisherClaimClaims = nil
	}
	return o.AddPublisherClaimClaims(exec, insert, related...)
}

// RemovePublisherClaimClaimsG relationships from objects passed in.
// Removes related items from R.PublisherClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.PublisherClaim.
// Uses the global database handle.
func (o *Claim) RemovePublisherClaimClaimsG(related ...*Claim) error {
	return o.RemovePublisherClaimClaims(boil.GetDB(), related...)
}

// RemovePublisherClaimClaimsP relationships from objects passed in.
// Removes related items from R.PublisherClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.PublisherClaim.
// Panics on error.
func (o *Claim) RemovePublisherClaimClaimsP(exec boil.Executor, related ...*Claim) {
	if err := o.RemovePublisherClaimClaims(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePublisherClaimClaimsGP relationships from objects passed in.
// Removes related items from R.PublisherClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.PublisherClaim.
// Uses the global database handle and panics on error.
func (o *Claim) RemovePublisherClaimClaimsGP(related ...*Claim) {
	if err := o.RemovePublisherClaimClaims(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePublisherClaimClaims relationships from objects passed in.
// Removes related items from R.PublisherClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.PublisherClaim.
func (o *Claim) RemovePublisherClaimClaims(exec boil.Executor, related ...*Claim) error {
	var err error
	for _, rel := range related {
		rel.PublisherClaimID.Valid = false
		if rel.R != nil {
			rel.R.PublisherClaim = nil
		}
		if err = rel.Update(exec, "publisher_claim_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PublisherClaimClaims {
			if rel != ri {
				continue
			}

			ln := len(o.R.PublisherClaimClaims)
			if ln > 1 && i < ln-1 {
				o.R.PublisherClaimClaims[i] = o.R.PublisherClaimClaims[ln-1]
			}
			o.R.PublisherClaimClaims = o.R.PublisherClaimClaims[:ln-1]
			break
		}
	}

	return nil
}

// ClaimsG retrieves all records.
func ClaimsG(mods ...qm.QueryMod) claimQuery {
	return Claims(boil.GetDB(), mods...)
}

// Claims retrieves all the records using an executor.
func Claims(exec boil.Executor, mods ...qm.QueryMod) claimQuery {
	mods = append(mods, qm.From("`claims`"))
	return claimQuery{NewQuery(exec, mods...)}
}

// FindClaimG retrieves a single record by ID.
func FindClaimG(id uint64, selectCols ...string) (*Claim, error) {
	return FindClaim(boil.GetDB(), id, selectCols...)
}

// FindClaimGP retrieves a single record by ID, and panics on error.
func FindClaimGP(id uint64, selectCols ...string) *Claim {
	retobj, err := FindClaim(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindClaim retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClaim(exec boil.Executor, id uint64, selectCols ...string) (*Claim, error) {
	claimObj := &Claim{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `claims` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(claimObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from claims")
	}

	return claimObj, nil
}

// FindClaimP retrieves a single record by ID with an executor, and panics on error.
func FindClaimP(exec boil.Executor, id uint64, selectCols ...string) *Claim {
	retobj, err := FindClaim(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Claim) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Claim) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Claim) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Claim) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no claims provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	claimInsertCacheMut.RLock()
	cache, cached := claimInsertCache[key]
	claimInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			claimColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(claimType, claimMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `claims` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `claims` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `claims` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into claims")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claims")
	}

CacheNoHooks:
	if !cached {
		claimInsertCacheMut.Lock()
		claimInsertCache[key] = cache
		claimInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Claim record. See Update for
// whitelist behavior description.
func (o *Claim) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Claim record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Claim) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Claim, and panics on error.
// See Update for whitelist behavior description.
func (o *Claim) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Claim.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Claim) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	claimUpdateCacheMut.RLock()
	cache, cached := claimUpdateCache[key]
	claimUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			claimColumns,
			claimPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update claims, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `claims` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, append(wl, claimPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update claims row")
	}

	if !cached {
		claimUpdateCacheMut.Lock()
		claimUpdateCache[key] = cache
		claimUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q claimQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q claimQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for claims")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ClaimSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ClaimSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ClaimSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClaimSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `claims` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in claim slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Claim) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Claim) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Claim) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Claim) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no claims provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(claimColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	claimUpsertCacheMut.RLock()
	cache, cached := claimUpsertCache[key]
	claimUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			claimColumns,
			claimColumnsWithDefault,
			claimColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			claimColumns,
			claimPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert claims, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "claims", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `claims` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(claimType, claimMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(claimType, claimMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for claims")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == claimMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for claims")
	}

CacheNoHooks:
	if !cached {
		claimUpsertCacheMut.Lock()
		claimUpsertCache[key] = cache
		claimUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Claim record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Claim) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Claim record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Claim) DeleteG() error {
	if o == nil {
		return errors.New("model: no Claim provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Claim record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Claim) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Claim record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Claim) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Claim provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), claimPrimaryKeyMapping)
	sql := "DELETE FROM `claims` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from claims")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q claimQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q claimQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no claimQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claims")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ClaimSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ClaimSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Claim slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ClaimSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClaimSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Claim slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `claims` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from claim slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Claim) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Claim) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Claim) ReloadG() error {
	if o == nil {
		return errors.New("model: no Claim provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Claim) Reload(exec boil.Executor) error {
	ret, err := FindClaim(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ClaimSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty ClaimSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClaimSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	claims := ClaimSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), claimPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `claims`.* FROM `claims` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, claimPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&claims)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in ClaimSlice")
	}

	*o = claims

	return nil
}

// ClaimExists checks if the Claim row exists.
func ClaimExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `claims` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if claims exists")
	}

	return exists, nil
}

// ClaimExistsG checks if the Claim row exists.
func ClaimExistsG(id uint64) (bool, error) {
	return ClaimExists(boil.GetDB(), id)
}

// ClaimExistsGP checks if the Claim row exists. Panics on error.
func ClaimExistsGP(id uint64) bool {
	e, err := ClaimExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ClaimExistsP checks if the Claim row exists. Panics on error.
func ClaimExistsP(exec boil.Executor, id uint64) bool {
	e, err := ClaimExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
