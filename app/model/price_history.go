// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PriceHistory is an object representing the database table.
type PriceHistory struct {
	ID      uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	BTC     string    `boil:"b_t_c" json:"b_t_c" toml:"b_t_c" yaml:"b_t_c"`
	USD     string    `boil:"u_s_d" json:"u_s_d" toml:"u_s_d" yaml:"u_s_d"`
	Created time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *priceHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L priceHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PriceHistoryColumns = struct {
	ID      string
	BTC     string
	USD     string
	Created string
}{
	ID:      "id",
	BTC:     "b_t_c",
	USD:     "u_s_d",
	Created: "created",
}

// priceHistoryR is where relationships are stored.
type priceHistoryR struct {
}

// priceHistoryL is where Load methods for each relationship are stored.
type priceHistoryL struct{}

var (
	priceHistoryColumns               = []string{"id", "b_t_c", "u_s_d", "created"}
	priceHistoryColumnsWithoutDefault = []string{"created"}
	priceHistoryColumnsWithDefault    = []string{"id", "b_t_c", "u_s_d"}
	priceHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// PriceHistorySlice is an alias for a slice of pointers to PriceHistory.
	// This should generally be used opposed to []PriceHistory.
	PriceHistorySlice []*PriceHistory

	priceHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	priceHistoryType                 = reflect.TypeOf(&PriceHistory{})
	priceHistoryMapping              = queries.MakeStructMapping(priceHistoryType)
	priceHistoryPrimaryKeyMapping, _ = queries.BindMapping(priceHistoryType, priceHistoryMapping, priceHistoryPrimaryKeyColumns)
	priceHistoryInsertCacheMut       sync.RWMutex
	priceHistoryInsertCache          = make(map[string]insertCache)
	priceHistoryUpdateCacheMut       sync.RWMutex
	priceHistoryUpdateCache          = make(map[string]updateCache)
	priceHistoryUpsertCacheMut       sync.RWMutex
	priceHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single priceHistory record from the query, and panics on error.
func (q priceHistoryQuery) OneP() *PriceHistory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single priceHistory record from the query.
func (q priceHistoryQuery) One() (*PriceHistory, error) {
	o := &PriceHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for price_history")
	}

	return o, nil
}

// AllP returns all PriceHistory records from the query, and panics on error.
func (q priceHistoryQuery) AllP() PriceHistorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all PriceHistory records from the query.
func (q priceHistoryQuery) All() (PriceHistorySlice, error) {
	var o []*PriceHistory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to PriceHistory slice")
	}

	return o, nil
}

// CountP returns the count of all PriceHistory records in the query, and panics on error.
func (q priceHistoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all PriceHistory records in the query.
func (q priceHistoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count price_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q priceHistoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q priceHistoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if price_history exists")
	}

	return count > 0, nil
}

// PriceHistoriesG retrieves all records.
func PriceHistoriesG(mods ...qm.QueryMod) priceHistoryQuery {
	return PriceHistories(boil.GetDB(), mods...)
}

// PriceHistories retrieves all the records using an executor.
func PriceHistories(exec boil.Executor, mods ...qm.QueryMod) priceHistoryQuery {
	mods = append(mods, qm.From("`price_history`"))
	return priceHistoryQuery{NewQuery(exec, mods...)}
}

// FindPriceHistoryG retrieves a single record by ID.
func FindPriceHistoryG(id uint64, selectCols ...string) (*PriceHistory, error) {
	return FindPriceHistory(boil.GetDB(), id, selectCols...)
}

// FindPriceHistoryGP retrieves a single record by ID, and panics on error.
func FindPriceHistoryGP(id uint64, selectCols ...string) *PriceHistory {
	retobj, err := FindPriceHistory(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindPriceHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPriceHistory(exec boil.Executor, id uint64, selectCols ...string) (*PriceHistory, error) {
	priceHistoryObj := &PriceHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `price_history` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(priceHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from price_history")
	}

	return priceHistoryObj, nil
}

// FindPriceHistoryP retrieves a single record by ID with an executor, and panics on error.
func FindPriceHistoryP(exec boil.Executor, id uint64, selectCols ...string) *PriceHistory {
	retobj, err := FindPriceHistory(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PriceHistory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *PriceHistory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *PriceHistory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *PriceHistory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no price_history provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(priceHistoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	priceHistoryInsertCacheMut.RLock()
	cache, cached := priceHistoryInsertCache[key]
	priceHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			priceHistoryColumns,
			priceHistoryColumnsWithDefault,
			priceHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(priceHistoryType, priceHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(priceHistoryType, priceHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `price_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `price_history` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `price_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, priceHistoryPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into price_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == priceHistoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for price_history")
	}

CacheNoHooks:
	if !cached {
		priceHistoryInsertCacheMut.Lock()
		priceHistoryInsertCache[key] = cache
		priceHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single PriceHistory record. See Update for
// whitelist behavior description.
func (o *PriceHistory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single PriceHistory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *PriceHistory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the PriceHistory, and panics on error.
// See Update for whitelist behavior description.
func (o *PriceHistory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the PriceHistory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *PriceHistory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	priceHistoryUpdateCacheMut.RLock()
	cache, cached := priceHistoryUpdateCache[key]
	priceHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			priceHistoryColumns,
			priceHistoryPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update price_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `price_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, priceHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(priceHistoryType, priceHistoryMapping, append(wl, priceHistoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update price_history row")
	}

	if !cached {
		priceHistoryUpdateCacheMut.Lock()
		priceHistoryUpdateCache[key] = cache
		priceHistoryUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q priceHistoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q priceHistoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for price_history")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PriceHistorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PriceHistorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PriceHistorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PriceHistorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `price_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, priceHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in priceHistory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PriceHistory) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *PriceHistory) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *PriceHistory) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *PriceHistory) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no price_history provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(priceHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	priceHistoryUpsertCacheMut.RLock()
	cache, cached := priceHistoryUpsertCache[key]
	priceHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			priceHistoryColumns,
			priceHistoryColumnsWithDefault,
			priceHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			priceHistoryColumns,
			priceHistoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert price_history, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "price_history", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `price_history` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(priceHistoryType, priceHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(priceHistoryType, priceHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for price_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == priceHistoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for price_history")
	}

CacheNoHooks:
	if !cached {
		priceHistoryUpsertCacheMut.Lock()
		priceHistoryUpsertCache[key] = cache
		priceHistoryUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single PriceHistory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PriceHistory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single PriceHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PriceHistory) DeleteG() error {
	if o == nil {
		return errors.New("model: no PriceHistory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single PriceHistory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *PriceHistory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single PriceHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PriceHistory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no PriceHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), priceHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `price_history` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from price_history")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q priceHistoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q priceHistoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no priceHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from price_history")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PriceHistorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PriceHistorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no PriceHistory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PriceHistorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PriceHistorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no PriceHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `price_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, priceHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from priceHistory slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *PriceHistory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *PriceHistory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PriceHistory) ReloadG() error {
	if o == nil {
		return errors.New("model: no PriceHistory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PriceHistory) Reload(exec boil.Executor) error {
	ret, err := FindPriceHistory(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PriceHistorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PriceHistorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PriceHistorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty PriceHistorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PriceHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	priceHistories := PriceHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), priceHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `price_history`.* FROM `price_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, priceHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&priceHistories)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in PriceHistorySlice")
	}

	*o = priceHistories

	return nil
}

// PriceHistoryExists checks if the PriceHistory row exists.
func PriceHistoryExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `price_history` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if price_history exists")
	}

	return exists, nil
}

// PriceHistoryExistsG checks if the PriceHistory row exists.
func PriceHistoryExistsG(id uint64) (bool, error) {
	return PriceHistoryExists(boil.GetDB(), id)
}

// PriceHistoryExistsGP checks if the PriceHistory row exists. Panics on error.
func PriceHistoryExistsGP(id uint64) bool {
	e, err := PriceHistoryExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PriceHistoryExistsP checks if the PriceHistory row exists. Panics on error.
func PriceHistoryExistsP(exec boil.Executor, id uint64) bool {
	e, err := PriceHistoryExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
