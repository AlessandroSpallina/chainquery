// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Transaction is an object representing the database table.
type Transaction struct {
	ID              uint64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BlockID         null.String `boil:"block_id" json:"block_id,omitempty" toml:"block_id" yaml:"block_id,omitempty"`
	InputCount      uint        `boil:"input_count" json:"input_count" toml:"input_count" yaml:"input_count"`
	OutputCount     uint        `boil:"output_count" json:"output_count" toml:"output_count" yaml:"output_count"`
	Value           string      `boil:"value" json:"value" toml:"value" yaml:"value"`
	Fee             string      `boil:"fee" json:"fee" toml:"fee" yaml:"fee"`
	TransactionTime null.Uint64 `boil:"transaction_time" json:"transaction_time,omitempty" toml:"transaction_time" yaml:"transaction_time,omitempty"`
	TransactionSize uint64      `boil:"transaction_size" json:"transaction_size" toml:"transaction_size" yaml:"transaction_size"`
	Hash            string      `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	Version         int         `boil:"version" json:"version" toml:"version" yaml:"version"`
	LockTime        uint        `boil:"lock_time" json:"lock_time" toml:"lock_time" yaml:"lock_time"`
	Raw             null.String `boil:"raw" json:"raw,omitempty" toml:"raw" yaml:"raw,omitempty"`
	Created         time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified        time.Time   `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`
	CreatedTime     uint        `boil:"created_time" json:"created_time" toml:"created_time" yaml:"created_time"`

	R *transactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionColumns = struct {
	ID              string
	BlockID         string
	InputCount      string
	OutputCount     string
	Value           string
	Fee             string
	TransactionTime string
	TransactionSize string
	Hash            string
	Version         string
	LockTime        string
	Raw             string
	Created         string
	Modified        string
	CreatedTime     string
}{
	ID:              "id",
	BlockID:         "block_id",
	InputCount:      "input_count",
	OutputCount:     "output_count",
	Value:           "value",
	Fee:             "fee",
	TransactionTime: "transaction_time",
	TransactionSize: "transaction_size",
	Hash:            "hash",
	Version:         "version",
	LockTime:        "lock_time",
	Raw:             "raw",
	Created:         "created",
	Modified:        "modified",
	CreatedTime:     "created_time",
}

// transactionR is where relationships are stored.
type transactionR struct {
	Block                    *Block
	TransactionOfClaimClaims ClaimSlice
	Inputs                   InputSlice
	Outputs                  OutputSlice
	TransactionAddresses     TransactionAddressSlice
}

// transactionL is where Load methods for each relationship are stored.
type transactionL struct{}

var (
	transactionColumns               = []string{"id", "block_id", "input_count", "output_count", "value", "fee", "transaction_time", "transaction_size", "hash", "version", "lock_time", "raw", "created", "modified", "created_time"}
	transactionColumnsWithoutDefault = []string{"block_id", "input_count", "output_count", "value", "transaction_time", "transaction_size", "hash", "version", "lock_time", "raw", "created", "modified", "created_time"}
	transactionColumnsWithDefault    = []string{"id", "fee"}
	transactionPrimaryKeyColumns     = []string{"id"}
)

type (
	// TransactionSlice is an alias for a slice of pointers to Transaction.
	// This should generally be used opposed to []Transaction.
	TransactionSlice []*Transaction

	transactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionType                 = reflect.TypeOf(&Transaction{})
	transactionMapping              = queries.MakeStructMapping(transactionType)
	transactionPrimaryKeyMapping, _ = queries.BindMapping(transactionType, transactionMapping, transactionPrimaryKeyColumns)
	transactionInsertCacheMut       sync.RWMutex
	transactionInsertCache          = make(map[string]insertCache)
	transactionUpdateCacheMut       sync.RWMutex
	transactionUpdateCache          = make(map[string]updateCache)
	transactionUpsertCacheMut       sync.RWMutex
	transactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single transaction record from the query, and panics on error.
func (q transactionQuery) OneP() *Transaction {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single transaction record from the query.
func (q transactionQuery) One() (*Transaction, error) {
	o := &Transaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for transactions")
	}

	return o, nil
}

// AllP returns all Transaction records from the query, and panics on error.
func (q transactionQuery) AllP() TransactionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Transaction records from the query.
func (q transactionQuery) All() (TransactionSlice, error) {
	var o []*Transaction

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Transaction slice")
	}

	return o, nil
}

// CountP returns the count of all Transaction records in the query, and panics on error.
func (q transactionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Transaction records in the query.
func (q transactionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count transactions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q transactionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q transactionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if transactions exists")
	}

	return count > 0, nil
}

// BlockG pointed to by the foreign key.
func (o *Transaction) BlockG(mods ...qm.QueryMod) blockQuery {
	return o.Block(boil.GetDB(), mods...)
}

// Block pointed to by the foreign key.
func (o *Transaction) Block(exec boil.Executor, mods ...qm.QueryMod) blockQuery {
	queryMods := []qm.QueryMod{
		qm.Where("hash=?", o.BlockID),
	}

	queryMods = append(queryMods, mods...)

	query := Blocks(exec, queryMods...)
	queries.SetFrom(query.Query, "`blocks`")

	return query
}

// TransactionOfClaimClaimsG retrieves all the claim's claims via transaction_of_claim_id column.
func (o *Transaction) TransactionOfClaimClaimsG(mods ...qm.QueryMod) claimQuery {
	return o.TransactionOfClaimClaims(boil.GetDB(), mods...)
}

// TransactionOfClaimClaims retrieves all the claim's claims with an executor via transaction_of_claim_id column.
func (o *Transaction) TransactionOfClaimClaims(exec boil.Executor, mods ...qm.QueryMod) claimQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`claims`.`transaction_of_claim_id`=?", o.Hash),
	)

	query := Claims(exec, queryMods...)
	queries.SetFrom(query.Query, "`claims`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`claims`.*"})
	}

	return query
}

// InputsG retrieves all the input's inputs.
func (o *Transaction) InputsG(mods ...qm.QueryMod) inputQuery {
	return o.Inputs(boil.GetDB(), mods...)
}

// Inputs retrieves all the input's inputs with an executor.
func (o *Transaction) Inputs(exec boil.Executor, mods ...qm.QueryMod) inputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`inputs`.`transaction_id`=?", o.ID),
	)

	query := Inputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`inputs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`inputs`.*"})
	}

	return query
}

// OutputsG retrieves all the output's outputs.
func (o *Transaction) OutputsG(mods ...qm.QueryMod) outputQuery {
	return o.Outputs(boil.GetDB(), mods...)
}

// Outputs retrieves all the output's outputs with an executor.
func (o *Transaction) Outputs(exec boil.Executor, mods ...qm.QueryMod) outputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`outputs`.`transaction_id`=?", o.ID),
	)

	query := Outputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`outputs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`outputs`.*"})
	}

	return query
}

// TransactionAddressesG retrieves all the transaction_address's transaction addresses.
func (o *Transaction) TransactionAddressesG(mods ...qm.QueryMod) transactionAddressQuery {
	return o.TransactionAddresses(boil.GetDB(), mods...)
}

// TransactionAddresses retrieves all the transaction_address's transaction addresses with an executor.
func (o *Transaction) TransactionAddresses(exec boil.Executor, mods ...qm.QueryMod) transactionAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`transaction_addresses`.`transaction_id`=?", o.ID),
	)

	query := TransactionAddresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`transaction_addresses`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`transaction_addresses`.*"})
	}

	return query
}

// LoadBlock allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadBlock(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.BlockID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.BlockID
		}
	}

	query := fmt.Sprintf(
		"select * from `blocks` where `hash` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Block")
	}
	defer results.Close()

	var resultSlice []*Block
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Block")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Block = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BlockID.String == foreign.Hash {
				local.R.Block = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransactionOfClaimClaims allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadTransactionOfClaimClaims(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.Hash
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.Hash
		}
	}

	query := fmt.Sprintf(
		"select * from `claims` where `transaction_of_claim_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load claims")
	}
	defer results.Close()

	var resultSlice []*Claim
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice claims")
	}

	if singular {
		object.R.TransactionOfClaimClaims = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Hash == foreign.TransactionOfClaimID.String {
				local.R.TransactionOfClaimClaims = append(local.R.TransactionOfClaimClaims, foreign)
				break
			}
		}
	}

	return nil
}

// LoadInputs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadInputs(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `inputs` where `transaction_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load inputs")
	}
	defer results.Close()

	var resultSlice []*Input
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice inputs")
	}

	if singular {
		object.R.Inputs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransactionID {
				local.R.Inputs = append(local.R.Inputs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOutputs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadOutputs(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `outputs` where `transaction_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load outputs")
	}
	defer results.Close()

	var resultSlice []*Output
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice outputs")
	}

	if singular {
		object.R.Outputs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransactionID {
				local.R.Outputs = append(local.R.Outputs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTransactionAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionL) LoadTransactionAddresses(e boil.Executor, singular bool, maybeTransaction interface{}) error {
	var slice []*Transaction
	var object *Transaction

	count := 1
	if singular {
		object = maybeTransaction.(*Transaction)
	} else {
		slice = *maybeTransaction.(*[]*Transaction)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `transaction_addresses` where `transaction_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction_addresses")
	}
	defer results.Close()

	var resultSlice []*TransactionAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction_addresses")
	}

	if singular {
		object.R.TransactionAddresses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TransactionID {
				local.R.TransactionAddresses = append(local.R.TransactionAddresses, foreign)
				break
			}
		}
	}

	return nil
}

// SetBlockG of the transaction to the related item.
// Sets o.R.Block to related.
// Adds o to related.R.Transactions.
// Uses the global database handle.
func (o *Transaction) SetBlockG(insert bool, related *Block) error {
	return o.SetBlock(boil.GetDB(), insert, related)
}

// SetBlockP of the transaction to the related item.
// Sets o.R.Block to related.
// Adds o to related.R.Transactions.
// Panics on error.
func (o *Transaction) SetBlockP(exec boil.Executor, insert bool, related *Block) {
	if err := o.SetBlock(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlockGP of the transaction to the related item.
// Sets o.R.Block to related.
// Adds o to related.R.Transactions.
// Uses the global database handle and panics on error.
func (o *Transaction) SetBlockGP(insert bool, related *Block) {
	if err := o.SetBlock(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetBlock of the transaction to the related item.
// Sets o.R.Block to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetBlock(exec boil.Executor, insert bool, related *Block) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"block_id"}),
		strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BlockID.String = related.Hash
	o.BlockID.Valid = true

	if o.R == nil {
		o.R = &transactionR{
			Block: related,
		}
	} else {
		o.R.Block = related
	}

	if related.R == nil {
		related.R = &blockR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// RemoveBlockG relationship.
// Sets o.R.Block to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Transaction) RemoveBlockG(related *Block) error {
	return o.RemoveBlock(boil.GetDB(), related)
}

// RemoveBlockP relationship.
// Sets o.R.Block to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Transaction) RemoveBlockP(exec boil.Executor, related *Block) {
	if err := o.RemoveBlock(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlockGP relationship.
// Sets o.R.Block to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveBlockGP(related *Block) {
	if err := o.RemoveBlock(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveBlock relationship.
// Sets o.R.Block to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Transaction) RemoveBlock(exec boil.Executor, related *Block) error {
	var err error

	o.BlockID.Valid = false
	if err = o.Update(exec, "block_id"); err != nil {
		o.BlockID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Block = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Transactions {
		if o.BlockID.String != ri.BlockID.String {
			continue
		}

		ln := len(related.R.Transactions)
		if ln > 1 && i < ln-1 {
			related.R.Transactions[i] = related.R.Transactions[ln-1]
		}
		related.R.Transactions = related.R.Transactions[:ln-1]
		break
	}
	return nil
}

// AddTransactionOfClaimClaimsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionOfClaimClaims.
// Sets related.R.TransactionOfClaim appropriately.
// Uses the global database handle.
func (o *Transaction) AddTransactionOfClaimClaimsG(insert bool, related ...*Claim) error {
	return o.AddTransactionOfClaimClaims(boil.GetDB(), insert, related...)
}

// AddTransactionOfClaimClaimsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionOfClaimClaims.
// Sets related.R.TransactionOfClaim appropriately.
// Panics on error.
func (o *Transaction) AddTransactionOfClaimClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.AddTransactionOfClaimClaims(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionOfClaimClaimsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionOfClaimClaims.
// Sets related.R.TransactionOfClaim appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddTransactionOfClaimClaimsGP(insert bool, related ...*Claim) {
	if err := o.AddTransactionOfClaimClaims(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionOfClaimClaims adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionOfClaimClaims.
// Sets related.R.TransactionOfClaim appropriately.
func (o *Transaction) AddTransactionOfClaimClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionOfClaimID.String = o.Hash
			rel.TransactionOfClaimID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `claims` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_of_claim_id"}),
				strmangle.WhereClause("`", "`", 0, claimPrimaryKeyColumns),
			)
			values := []interface{}{o.Hash, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionOfClaimID.String = o.Hash
			rel.TransactionOfClaimID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransactionOfClaimClaims: related,
		}
	} else {
		o.R.TransactionOfClaimClaims = append(o.R.TransactionOfClaimClaims, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &claimR{
				TransactionOfClaim: o,
			}
		} else {
			rel.R.TransactionOfClaim = o
		}
	}
	return nil
}

// SetTransactionOfClaimClaimsG removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
// Replaces o.R.TransactionOfClaimClaims with related.
// Sets related.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
// Uses the global database handle.
func (o *Transaction) SetTransactionOfClaimClaimsG(insert bool, related ...*Claim) error {
	return o.SetTransactionOfClaimClaims(boil.GetDB(), insert, related...)
}

// SetTransactionOfClaimClaimsP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
// Replaces o.R.TransactionOfClaimClaims with related.
// Sets related.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
// Panics on error.
func (o *Transaction) SetTransactionOfClaimClaimsP(exec boil.Executor, insert bool, related ...*Claim) {
	if err := o.SetTransactionOfClaimClaims(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionOfClaimClaimsGP removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
// Replaces o.R.TransactionOfClaimClaims with related.
// Sets related.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
// Uses the global database handle and panics on error.
func (o *Transaction) SetTransactionOfClaimClaimsGP(insert bool, related ...*Claim) {
	if err := o.SetTransactionOfClaimClaims(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionOfClaimClaims removes all previously related items of the
// transaction replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
// Replaces o.R.TransactionOfClaimClaims with related.
// Sets related.R.TransactionOfClaim's TransactionOfClaimClaims accordingly.
func (o *Transaction) SetTransactionOfClaimClaims(exec boil.Executor, insert bool, related ...*Claim) error {
	query := "update `claims` set `transaction_of_claim_id` = null where `transaction_of_claim_id` = ?"
	values := []interface{}{o.Hash}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TransactionOfClaimClaims {
			rel.TransactionOfClaimID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.TransactionOfClaim = nil
		}

		o.R.TransactionOfClaimClaims = nil
	}
	return o.AddTransactionOfClaimClaims(exec, insert, related...)
}

// RemoveTransactionOfClaimClaimsG relationships from objects passed in.
// Removes related items from R.TransactionOfClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionOfClaim.
// Uses the global database handle.
func (o *Transaction) RemoveTransactionOfClaimClaimsG(related ...*Claim) error {
	return o.RemoveTransactionOfClaimClaims(boil.GetDB(), related...)
}

// RemoveTransactionOfClaimClaimsP relationships from objects passed in.
// Removes related items from R.TransactionOfClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionOfClaim.
// Panics on error.
func (o *Transaction) RemoveTransactionOfClaimClaimsP(exec boil.Executor, related ...*Claim) {
	if err := o.RemoveTransactionOfClaimClaims(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionOfClaimClaimsGP relationships from objects passed in.
// Removes related items from R.TransactionOfClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionOfClaim.
// Uses the global database handle and panics on error.
func (o *Transaction) RemoveTransactionOfClaimClaimsGP(related ...*Claim) {
	if err := o.RemoveTransactionOfClaimClaims(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTransactionOfClaimClaims relationships from objects passed in.
// Removes related items from R.TransactionOfClaimClaims (uses pointer comparison, removal does not keep order)
// Sets related.R.TransactionOfClaim.
func (o *Transaction) RemoveTransactionOfClaimClaims(exec boil.Executor, related ...*Claim) error {
	var err error
	for _, rel := range related {
		rel.TransactionOfClaimID.Valid = false
		if rel.R != nil {
			rel.R.TransactionOfClaim = nil
		}
		if err = rel.Update(exec, "transaction_of_claim_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TransactionOfClaimClaims {
			if rel != ri {
				continue
			}

			ln := len(o.R.TransactionOfClaimClaims)
			if ln > 1 && i < ln-1 {
				o.R.TransactionOfClaimClaims[i] = o.R.TransactionOfClaimClaims[ln-1]
			}
			o.R.TransactionOfClaimClaims = o.R.TransactionOfClaimClaims[:ln-1]
			break
		}
	}

	return nil
}

// AddInputsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle.
func (o *Transaction) AddInputsG(insert bool, related ...*Input) error {
	return o.AddInputs(boil.GetDB(), insert, related...)
}

// AddInputsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
// Panics on error.
func (o *Transaction) AddInputsP(exec boil.Executor, insert bool, related ...*Input) {
	if err := o.AddInputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddInputsGP(insert bool, related ...*Input) {
	if err := o.AddInputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddInputs adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Inputs.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddInputs(exec boil.Executor, insert bool, related ...*Input) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `inputs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
				strmangle.WhereClause("`", "`", 0, inputPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			Inputs: related,
		}
	} else {
		o.R.Inputs = append(o.R.Inputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &inputR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// AddOutputsG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle.
func (o *Transaction) AddOutputsG(insert bool, related ...*Output) error {
	return o.AddOutputs(boil.GetDB(), insert, related...)
}

// AddOutputsP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
// Panics on error.
func (o *Transaction) AddOutputsP(exec boil.Executor, insert bool, related ...*Output) {
	if err := o.AddOutputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOutputsGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddOutputsGP(insert bool, related ...*Output) {
	if err := o.AddOutputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOutputs adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.Outputs.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddOutputs(exec boil.Executor, insert bool, related ...*Output) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `outputs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
				strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			Outputs: related,
		}
	} else {
		o.R.Outputs = append(o.R.Outputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outputR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// AddTransactionAddressesG adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
// Uses the global database handle.
func (o *Transaction) AddTransactionAddressesG(insert bool, related ...*TransactionAddress) error {
	return o.AddTransactionAddresses(boil.GetDB(), insert, related...)
}

// AddTransactionAddressesP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
// Panics on error.
func (o *Transaction) AddTransactionAddressesP(exec boil.Executor, insert bool, related ...*TransactionAddress) {
	if err := o.AddTransactionAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionAddressesGP adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
// Uses the global database handle and panics on error.
func (o *Transaction) AddTransactionAddressesGP(insert bool, related ...*TransactionAddress) {
	if err := o.AddTransactionAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTransactionAddresses adds the given related objects to the existing relationships
// of the transaction, optionally inserting them as new records.
// Appends related to o.R.TransactionAddresses.
// Sets related.R.Transaction appropriately.
func (o *Transaction) AddTransactionAddresses(exec boil.Executor, insert bool, related ...*TransactionAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TransactionID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `transaction_addresses` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
				strmangle.WhereClause("`", "`", 0, transactionAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.TransactionID, rel.AddressID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TransactionID = o.ID
		}
	}

	if o.R == nil {
		o.R = &transactionR{
			TransactionAddresses: related,
		}
	} else {
		o.R.TransactionAddresses = append(o.R.TransactionAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionAddressR{
				Transaction: o,
			}
		} else {
			rel.R.Transaction = o
		}
	}
	return nil
}

// TransactionsG retrieves all records.
func TransactionsG(mods ...qm.QueryMod) transactionQuery {
	return Transactions(boil.GetDB(), mods...)
}

// Transactions retrieves all the records using an executor.
func Transactions(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	mods = append(mods, qm.From("`transactions`"))
	return transactionQuery{NewQuery(exec, mods...)}
}

// FindTransactionG retrieves a single record by ID.
func FindTransactionG(id uint64, selectCols ...string) (*Transaction, error) {
	return FindTransaction(boil.GetDB(), id, selectCols...)
}

// FindTransactionGP retrieves a single record by ID, and panics on error.
func FindTransactionGP(id uint64, selectCols ...string) *Transaction {
	retobj, err := FindTransaction(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransaction(exec boil.Executor, id uint64, selectCols ...string) (*Transaction, error) {
	transactionObj := &Transaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `transactions` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(transactionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from transactions")
	}

	return transactionObj, nil
}

// FindTransactionP retrieves a single record by ID with an executor, and panics on error.
func FindTransactionP(exec boil.Executor, id uint64, selectCols ...string) *Transaction {
	retobj, err := FindTransaction(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Transaction) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Transaction) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Transaction) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Transaction) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no transactions provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	transactionInsertCacheMut.RLock()
	cache, cached := transactionInsertCache[key]
	transactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			transactionColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `transactions` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `transactions` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `transactions` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into transactions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transactions")
	}

CacheNoHooks:
	if !cached {
		transactionInsertCacheMut.Lock()
		transactionInsertCache[key] = cache
		transactionInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Transaction record. See Update for
// whitelist behavior description.
func (o *Transaction) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Transaction record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Transaction) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Transaction, and panics on error.
// See Update for whitelist behavior description.
func (o *Transaction) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Transaction.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Transaction) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	transactionUpdateCacheMut.RLock()
	cache, cached := transactionUpdateCache[key]
	transactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			transactionColumns,
			transactionPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `transactions` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, append(wl, transactionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update transactions row")
	}

	if !cached {
		transactionUpdateCacheMut.Lock()
		transactionUpdateCache[key] = cache
		transactionUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q transactionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q transactionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for transactions")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TransactionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TransactionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `transactions` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in transaction slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Transaction) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Transaction) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Transaction) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Transaction) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no transactions provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionUpsertCacheMut.RLock()
	cache, cached := transactionUpsertCache[key]
	transactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			transactionColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			transactionColumns,
			transactionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert transactions, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "transactions", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `transactions` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for transactions")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == transactionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for transactions")
	}

CacheNoHooks:
	if !cached {
		transactionUpsertCacheMut.Lock()
		transactionUpsertCache[key] = cache
		transactionUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Transaction record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transaction) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Transaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Transaction) DeleteG() error {
	if o == nil {
		return errors.New("model: no Transaction provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Transaction record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transaction) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Transaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transaction) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Transaction provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionPrimaryKeyMapping)
	sql := "DELETE FROM `transactions` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from transactions")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q transactionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q transactionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no transactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transactions")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TransactionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Transaction slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TransactionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Transaction slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from transaction slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Transaction) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Transaction) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Transaction) ReloadG() error {
	if o == nil {
		return errors.New("model: no Transaction provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transaction) Reload(exec boil.Executor) error {
	ret, err := FindTransaction(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty TransactionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	transactions := TransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `transactions`.* FROM `transactions` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&transactions)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TransactionSlice")
	}

	*o = transactions

	return nil
}

// TransactionExists checks if the Transaction row exists.
func TransactionExists(exec boil.Executor, id uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `transactions` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if transactions exists")
	}

	return exists, nil
}

// TransactionExistsG checks if the Transaction row exists.
func TransactionExistsG(id uint64) (bool, error) {
	return TransactionExists(boil.GetDB(), id)
}

// TransactionExistsGP checks if the Transaction row exists. Panics on error.
func TransactionExistsGP(id uint64) bool {
	e, err := TransactionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TransactionExistsP checks if the Transaction row exists. Panics on error.
func TransactionExistsP(exec boil.Executor, id uint64) bool {
	e, err := TransactionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
