// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Input is an object representing the database table.
type Input struct {
	TransactionID       string      `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	AddressID           null.Uint64 `boil:"address_id" json:"address_id,omitempty" toml:"address_id" yaml:"address_id,omitempty"`
	IsCoinbase          bool        `boil:"is_coinbase" json:"is_coinbase" toml:"is_coinbase" yaml:"is_coinbase"`
	Coinbase            null.String `boil:"coinbase" json:"coinbase,omitempty" toml:"coinbase" yaml:"coinbase,omitempty"`
	PrevoutHash         null.String `boil:"prevout_hash" json:"prevout_hash,omitempty" toml:"prevout_hash" yaml:"prevout_hash,omitempty"`
	PrevoutN            null.Uint   `boil:"prevout_n" json:"prevout_n,omitempty" toml:"prevout_n" yaml:"prevout_n,omitempty"`
	PrevoutSpendUpdated bool        `boil:"prevout_spend_updated" json:"prevout_spend_updated" toml:"prevout_spend_updated" yaml:"prevout_spend_updated"`
	SequenceID          uint        `boil:"sequence_id" json:"sequence_id" toml:"sequence_id" yaml:"sequence_id"`
	Value               null.String `boil:"value" json:"value,omitempty" toml:"value" yaml:"value,omitempty"`
	ScriptSigSSM        null.String `boil:"script_sig_ssm" json:"script_sig_ssm,omitempty" toml:"script_sig_ssm" yaml:"script_sig_ssm,omitempty"`
	ScriptSigHex        null.String `boil:"script_sig_hex" json:"script_sig_hex,omitempty" toml:"script_sig_hex" yaml:"script_sig_hex,omitempty"`
	Created             time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified            time.Time   `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *inputR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inputL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InputColumns = struct {
	TransactionID       string
	AddressID           string
	IsCoinbase          string
	Coinbase            string
	PrevoutHash         string
	PrevoutN            string
	PrevoutSpendUpdated string
	SequenceID          string
	Value               string
	ScriptSigSSM        string
	ScriptSigHex        string
	Created             string
	Modified            string
}{
	TransactionID:       "transaction_id",
	AddressID:           "address_id",
	IsCoinbase:          "is_coinbase",
	Coinbase:            "coinbase",
	PrevoutHash:         "prevout_hash",
	PrevoutN:            "prevout_n",
	PrevoutSpendUpdated: "prevout_spend_updated",
	SequenceID:          "sequence_id",
	Value:               "value",
	ScriptSigSSM:        "script_sig_ssm",
	ScriptSigHex:        "script_sig_hex",
	Created:             "created",
	Modified:            "modified",
}

// inputR is where relationships are stored.
type inputR struct {
	Address                           *Address
	Transaction                       *Transaction
	SpentByTransactionOutputs         OutputSlice
	SpentByTransactionSequenceOutputs OutputSlice
}

// inputL is where Load methods for each relationship are stored.
type inputL struct{}

var (
	inputColumns               = []string{"transaction_id", "address_id", "is_coinbase", "coinbase", "prevout_hash", "prevout_n", "prevout_spend_updated", "sequence_id", "value", "script_sig_ssm", "script_sig_hex", "created", "modified"}
	inputColumnsWithoutDefault = []string{"transaction_id", "address_id", "coinbase", "prevout_hash", "prevout_n", "sequence_id", "value", "script_sig_ssm", "script_sig_hex", "created", "modified"}
	inputColumnsWithDefault    = []string{"is_coinbase", "prevout_spend_updated"}
	inputPrimaryKeyColumns     = []string{"transaction_id", "sequence_id"}
)

type (
	// InputSlice is an alias for a slice of pointers to Input.
	// This should generally be used opposed to []Input.
	InputSlice []*Input

	inputQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inputType                 = reflect.TypeOf(&Input{})
	inputMapping              = queries.MakeStructMapping(inputType)
	inputPrimaryKeyMapping, _ = queries.BindMapping(inputType, inputMapping, inputPrimaryKeyColumns)
	inputInsertCacheMut       sync.RWMutex
	inputInsertCache          = make(map[string]insertCache)
	inputUpdateCacheMut       sync.RWMutex
	inputUpdateCache          = make(map[string]updateCache)
	inputUpsertCacheMut       sync.RWMutex
	inputUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single input record from the query, and panics on error.
func (q inputQuery) OneP() *Input {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single input record from the query.
func (q inputQuery) One() (*Input, error) {
	o := &Input{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for inputs")
	}

	return o, nil
}

// AllP returns all Input records from the query, and panics on error.
func (q inputQuery) AllP() InputSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Input records from the query.
func (q inputQuery) All() (InputSlice, error) {
	var o []*Input

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Input slice")
	}

	return o, nil
}

// CountP returns the count of all Input records in the query, and panics on error.
func (q inputQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Input records in the query.
func (q inputQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count inputs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q inputQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q inputQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if inputs exists")
	}

	return count > 0, nil
}

// AddressG pointed to by the foreign key.
func (o *Input) AddressG(mods ...qm.QueryMod) addressQuery {
	return o.Address(boil.GetDB(), mods...)
}

// Address pointed to by the foreign key.
func (o *Input) Address(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`addresses`")

	return query
}

// TransactionG pointed to by the foreign key.
func (o *Input) TransactionG(mods ...qm.QueryMod) transactionQuery {
	return o.Transaction(boil.GetDB(), mods...)
}

// Transaction pointed to by the foreign key.
func (o *Input) Transaction(exec boil.Executor, mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("hash=?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	return query
}

// SpentByTransactionOutputsG retrieves all the output's outputs via spent_by_transaction_id column.
func (o *Input) SpentByTransactionOutputsG(mods ...qm.QueryMod) outputQuery {
	return o.SpentByTransactionOutputs(boil.GetDB(), mods...)
}

// SpentByTransactionOutputs retrieves all the output's outputs with an executor via spent_by_transaction_id column.
func (o *Input) SpentByTransactionOutputs(exec boil.Executor, mods ...qm.QueryMod) outputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`outputs`.`spent_by_transaction_id`=?", o.TransactionID),
	)

	query := Outputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`outputs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`outputs`.*"})
	}

	return query
}

// SpentByTransactionSequenceOutputsG retrieves all the output's outputs via spent_by_transaction_sequence_id column.
func (o *Input) SpentByTransactionSequenceOutputsG(mods ...qm.QueryMod) outputQuery {
	return o.SpentByTransactionSequenceOutputs(boil.GetDB(), mods...)
}

// SpentByTransactionSequenceOutputs retrieves all the output's outputs with an executor via spent_by_transaction_sequence_id column.
func (o *Input) SpentByTransactionSequenceOutputs(exec boil.Executor, mods ...qm.QueryMod) outputQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`outputs`.`spent_by_transaction_sequence_id`=?", o.SequenceID),
	)

	query := Outputs(exec, queryMods...)
	queries.SetFrom(query.Query, "`outputs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`outputs`.*"})
	}

	return query
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (inputL) LoadAddress(e boil.Executor, singular bool, maybeInput interface{}) error {
	var slice []*Input
	var object *Input

	count := 1
	if singular {
		object = maybeInput.(*Input)
	} else {
		slice = *maybeInput.(*[]*Input)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &inputR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &inputR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `addresses` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Address")
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Address")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Address = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID.Uint64 == foreign.ID {
				local.R.Address = foreign
				break
			}
		}
	}

	return nil
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (inputL) LoadTransaction(e boil.Executor, singular bool, maybeInput interface{}) error {
	var slice []*Input
	var object *Input

	count := 1
	if singular {
		object = maybeInput.(*Input)
	} else {
		slice = *maybeInput.(*[]*Input)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &inputR{}
		}
		args[0] = object.TransactionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &inputR{}
			}
			args[i] = obj.TransactionID
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `hash` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Transaction = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.Hash {
				local.R.Transaction = foreign
				break
			}
		}
	}

	return nil
}

// LoadSpentByTransactionOutputs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (inputL) LoadSpentByTransactionOutputs(e boil.Executor, singular bool, maybeInput interface{}) error {
	var slice []*Input
	var object *Input

	count := 1
	if singular {
		object = maybeInput.(*Input)
	} else {
		slice = *maybeInput.(*[]*Input)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &inputR{}
		}
		args[0] = object.TransactionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &inputR{}
			}
			args[i] = obj.TransactionID
		}
	}

	query := fmt.Sprintf(
		"select * from `outputs` where `spent_by_transaction_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load outputs")
	}
	defer results.Close()

	var resultSlice []*Output
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice outputs")
	}

	if singular {
		object.R.SpentByTransactionOutputs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.TransactionID == foreign.SpentByTransactionID {
				local.R.SpentByTransactionOutputs = append(local.R.SpentByTransactionOutputs, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSpentByTransactionSequenceOutputs allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (inputL) LoadSpentByTransactionSequenceOutputs(e boil.Executor, singular bool, maybeInput interface{}) error {
	var slice []*Input
	var object *Input

	count := 1
	if singular {
		object = maybeInput.(*Input)
	} else {
		slice = *maybeInput.(*[]*Input)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &inputR{}
		}
		args[0] = object.SequenceID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &inputR{}
			}
			args[i] = obj.SequenceID
		}
	}

	query := fmt.Sprintf(
		"select * from `outputs` where `spent_by_transaction_sequence_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load outputs")
	}
	defer results.Close()

	var resultSlice []*Output
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice outputs")
	}

	if singular {
		object.R.SpentByTransactionSequenceOutputs = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.SequenceID == foreign.SpentByTransactionSequenceID.Uint {
				local.R.SpentByTransactionSequenceOutputs = append(local.R.SpentByTransactionSequenceOutputs, foreign)
				break
			}
		}
	}

	return nil
}

// SetAddressG of the input to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Inputs.
// Uses the global database handle.
func (o *Input) SetAddressG(insert bool, related *Address) error {
	return o.SetAddress(boil.GetDB(), insert, related)
}

// SetAddressP of the input to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Inputs.
// Panics on error.
func (o *Input) SetAddressP(exec boil.Executor, insert bool, related *Address) {
	if err := o.SetAddress(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressGP of the input to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Inputs.
// Uses the global database handle and panics on error.
func (o *Input) SetAddressGP(insert bool, related *Address) {
	if err := o.SetAddress(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddress of the input to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.Inputs.
func (o *Input) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `inputs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, inputPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionID, o.SequenceID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AddressID.Uint64 = related.ID
	o.AddressID.Valid = true

	if o.R == nil {
		o.R = &inputR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			Inputs: InputSlice{o},
		}
	} else {
		related.R.Inputs = append(related.R.Inputs, o)
	}

	return nil
}

// RemoveAddressG relationship.
// Sets o.R.Address to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Input) RemoveAddressG(related *Address) error {
	return o.RemoveAddress(boil.GetDB(), related)
}

// RemoveAddressP relationship.
// Sets o.R.Address to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Input) RemoveAddressP(exec boil.Executor, related *Address) {
	if err := o.RemoveAddress(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddressGP relationship.
// Sets o.R.Address to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Input) RemoveAddressGP(related *Address) {
	if err := o.RemoveAddress(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddress relationship.
// Sets o.R.Address to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Input) RemoveAddress(exec boil.Executor, related *Address) error {
	var err error

	o.AddressID.Valid = false
	if err = o.Update(exec, "address_id"); err != nil {
		o.AddressID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Address = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Inputs {
		if o.AddressID.Uint64 != ri.AddressID.Uint64 {
			continue
		}

		ln := len(related.R.Inputs)
		if ln > 1 && i < ln-1 {
			related.R.Inputs[i] = related.R.Inputs[ln-1]
		}
		related.R.Inputs = related.R.Inputs[:ln-1]
		break
	}
	return nil
}

// SetTransactionG of the input to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Inputs.
// Uses the global database handle.
func (o *Input) SetTransactionG(insert bool, related *Transaction) error {
	return o.SetTransaction(boil.GetDB(), insert, related)
}

// SetTransactionP of the input to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Inputs.
// Panics on error.
func (o *Input) SetTransactionP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransaction(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransactionGP of the input to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Inputs.
// Uses the global database handle and panics on error.
func (o *Input) SetTransactionGP(insert bool, related *Transaction) {
	if err := o.SetTransaction(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTransaction of the input to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.Inputs.
func (o *Input) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `inputs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
		strmangle.WhereClause("`", "`", 0, inputPrimaryKeyColumns),
	)
	values := []interface{}{related.Hash, o.TransactionID, o.SequenceID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.Hash

	if o.R == nil {
		o.R = &inputR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			Inputs: InputSlice{o},
		}
	} else {
		related.R.Inputs = append(related.R.Inputs, o)
	}

	return nil
}

// AddSpentByTransactionOutputsG adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionOutputs.
// Sets related.R.SpentByTransaction appropriately.
// Uses the global database handle.
func (o *Input) AddSpentByTransactionOutputsG(insert bool, related ...*Output) error {
	return o.AddSpentByTransactionOutputs(boil.GetDB(), insert, related...)
}

// AddSpentByTransactionOutputsP adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionOutputs.
// Sets related.R.SpentByTransaction appropriately.
// Panics on error.
func (o *Input) AddSpentByTransactionOutputsP(exec boil.Executor, insert bool, related ...*Output) {
	if err := o.AddSpentByTransactionOutputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSpentByTransactionOutputsGP adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionOutputs.
// Sets related.R.SpentByTransaction appropriately.
// Uses the global database handle and panics on error.
func (o *Input) AddSpentByTransactionOutputsGP(insert bool, related ...*Output) {
	if err := o.AddSpentByTransactionOutputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSpentByTransactionOutputs adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionOutputs.
// Sets related.R.SpentByTransaction appropriately.
func (o *Input) AddSpentByTransactionOutputs(exec boil.Executor, insert bool, related ...*Output) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpentByTransactionID = o.TransactionID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `outputs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"spent_by_transaction_id"}),
				strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns),
			)
			values := []interface{}{o.TransactionID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpentByTransactionID = o.TransactionID
		}
	}

	if o.R == nil {
		o.R = &inputR{
			SpentByTransactionOutputs: related,
		}
	} else {
		o.R.SpentByTransactionOutputs = append(o.R.SpentByTransactionOutputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outputR{
				SpentByTransaction: o,
			}
		} else {
			rel.R.SpentByTransaction = o
		}
	}
	return nil
}

// AddSpentByTransactionSequenceOutputsG adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionSequenceOutputs.
// Sets related.R.SpentByTransactionSequence appropriately.
// Uses the global database handle.
func (o *Input) AddSpentByTransactionSequenceOutputsG(insert bool, related ...*Output) error {
	return o.AddSpentByTransactionSequenceOutputs(boil.GetDB(), insert, related...)
}

// AddSpentByTransactionSequenceOutputsP adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionSequenceOutputs.
// Sets related.R.SpentByTransactionSequence appropriately.
// Panics on error.
func (o *Input) AddSpentByTransactionSequenceOutputsP(exec boil.Executor, insert bool, related ...*Output) {
	if err := o.AddSpentByTransactionSequenceOutputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSpentByTransactionSequenceOutputsGP adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionSequenceOutputs.
// Sets related.R.SpentByTransactionSequence appropriately.
// Uses the global database handle and panics on error.
func (o *Input) AddSpentByTransactionSequenceOutputsGP(insert bool, related ...*Output) {
	if err := o.AddSpentByTransactionSequenceOutputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSpentByTransactionSequenceOutputs adds the given related objects to the existing relationships
// of the input, optionally inserting them as new records.
// Appends related to o.R.SpentByTransactionSequenceOutputs.
// Sets related.R.SpentByTransactionSequence appropriately.
func (o *Input) AddSpentByTransactionSequenceOutputs(exec boil.Executor, insert bool, related ...*Output) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SpentByTransactionSequenceID.Uint = o.SequenceID
			rel.SpentByTransactionSequenceID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `outputs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"spent_by_transaction_sequence_id"}),
				strmangle.WhereClause("`", "`", 0, outputPrimaryKeyColumns),
			)
			values := []interface{}{o.SequenceID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SpentByTransactionSequenceID.Uint = o.SequenceID
			rel.SpentByTransactionSequenceID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &inputR{
			SpentByTransactionSequenceOutputs: related,
		}
	} else {
		o.R.SpentByTransactionSequenceOutputs = append(o.R.SpentByTransactionSequenceOutputs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &outputR{
				SpentByTransactionSequence: o,
			}
		} else {
			rel.R.SpentByTransactionSequence = o
		}
	}
	return nil
}

// SetSpentByTransactionSequenceOutputsG removes all previously related items of the
// input replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
// Replaces o.R.SpentByTransactionSequenceOutputs with related.
// Sets related.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
// Uses the global database handle.
func (o *Input) SetSpentByTransactionSequenceOutputsG(insert bool, related ...*Output) error {
	return o.SetSpentByTransactionSequenceOutputs(boil.GetDB(), insert, related...)
}

// SetSpentByTransactionSequenceOutputsP removes all previously related items of the
// input replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
// Replaces o.R.SpentByTransactionSequenceOutputs with related.
// Sets related.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
// Panics on error.
func (o *Input) SetSpentByTransactionSequenceOutputsP(exec boil.Executor, insert bool, related ...*Output) {
	if err := o.SetSpentByTransactionSequenceOutputs(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSpentByTransactionSequenceOutputsGP removes all previously related items of the
// input replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
// Replaces o.R.SpentByTransactionSequenceOutputs with related.
// Sets related.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
// Uses the global database handle and panics on error.
func (o *Input) SetSpentByTransactionSequenceOutputsGP(insert bool, related ...*Output) {
	if err := o.SetSpentByTransactionSequenceOutputs(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSpentByTransactionSequenceOutputs removes all previously related items of the
// input replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
// Replaces o.R.SpentByTransactionSequenceOutputs with related.
// Sets related.R.SpentByTransactionSequence's SpentByTransactionSequenceOutputs accordingly.
func (o *Input) SetSpentByTransactionSequenceOutputs(exec boil.Executor, insert bool, related ...*Output) error {
	query := "update `outputs` set `spent_by_transaction_sequence_id` = null where `spent_by_transaction_sequence_id` = ?"
	values := []interface{}{o.SequenceID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SpentByTransactionSequenceOutputs {
			rel.SpentByTransactionSequenceID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.SpentByTransactionSequence = nil
		}

		o.R.SpentByTransactionSequenceOutputs = nil
	}
	return o.AddSpentByTransactionSequenceOutputs(exec, insert, related...)
}

// RemoveSpentByTransactionSequenceOutputsG relationships from objects passed in.
// Removes related items from R.SpentByTransactionSequenceOutputs (uses pointer comparison, removal does not keep order)
// Sets related.R.SpentByTransactionSequence.
// Uses the global database handle.
func (o *Input) RemoveSpentByTransactionSequenceOutputsG(related ...*Output) error {
	return o.RemoveSpentByTransactionSequenceOutputs(boil.GetDB(), related...)
}

// RemoveSpentByTransactionSequenceOutputsP relationships from objects passed in.
// Removes related items from R.SpentByTransactionSequenceOutputs (uses pointer comparison, removal does not keep order)
// Sets related.R.SpentByTransactionSequence.
// Panics on error.
func (o *Input) RemoveSpentByTransactionSequenceOutputsP(exec boil.Executor, related ...*Output) {
	if err := o.RemoveSpentByTransactionSequenceOutputs(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveSpentByTransactionSequenceOutputsGP relationships from objects passed in.
// Removes related items from R.SpentByTransactionSequenceOutputs (uses pointer comparison, removal does not keep order)
// Sets related.R.SpentByTransactionSequence.
// Uses the global database handle and panics on error.
func (o *Input) RemoveSpentByTransactionSequenceOutputsGP(related ...*Output) {
	if err := o.RemoveSpentByTransactionSequenceOutputs(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveSpentByTransactionSequenceOutputs relationships from objects passed in.
// Removes related items from R.SpentByTransactionSequenceOutputs (uses pointer comparison, removal does not keep order)
// Sets related.R.SpentByTransactionSequence.
func (o *Input) RemoveSpentByTransactionSequenceOutputs(exec boil.Executor, related ...*Output) error {
	var err error
	for _, rel := range related {
		rel.SpentByTransactionSequenceID.Valid = false
		if rel.R != nil {
			rel.R.SpentByTransactionSequence = nil
		}
		if err = rel.Update(exec, "spent_by_transaction_sequence_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SpentByTransactionSequenceOutputs {
			if rel != ri {
				continue
			}

			ln := len(o.R.SpentByTransactionSequenceOutputs)
			if ln > 1 && i < ln-1 {
				o.R.SpentByTransactionSequenceOutputs[i] = o.R.SpentByTransactionSequenceOutputs[ln-1]
			}
			o.R.SpentByTransactionSequenceOutputs = o.R.SpentByTransactionSequenceOutputs[:ln-1]
			break
		}
	}

	return nil
}

// InputsG retrieves all records.
func InputsG(mods ...qm.QueryMod) inputQuery {
	return Inputs(boil.GetDB(), mods...)
}

// Inputs retrieves all the records using an executor.
func Inputs(exec boil.Executor, mods ...qm.QueryMod) inputQuery {
	mods = append(mods, qm.From("`inputs`"))
	return inputQuery{NewQuery(exec, mods...)}
}

// FindInputG retrieves a single record by ID.
func FindInputG(transactionID string, sequenceID uint, selectCols ...string) (*Input, error) {
	return FindInput(boil.GetDB(), transactionID, sequenceID, selectCols...)
}

// FindInputGP retrieves a single record by ID, and panics on error.
func FindInputGP(transactionID string, sequenceID uint, selectCols ...string) *Input {
	retobj, err := FindInput(boil.GetDB(), transactionID, sequenceID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindInput retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInput(exec boil.Executor, transactionID string, sequenceID uint, selectCols ...string) (*Input, error) {
	inputObj := &Input{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `inputs` where `transaction_id`=? AND `sequence_id`=?", sel,
	)

	q := queries.Raw(exec, query, transactionID, sequenceID)

	err := q.Bind(inputObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from inputs")
	}

	return inputObj, nil
}

// FindInputP retrieves a single record by ID with an executor, and panics on error.
func FindInputP(exec boil.Executor, transactionID string, sequenceID uint, selectCols ...string) *Input {
	retobj, err := FindInput(exec, transactionID, sequenceID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Input) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Input) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Input) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Input) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no inputs provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(inputColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	inputInsertCacheMut.RLock()
	cache, cached := inputInsertCache[key]
	inputInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			inputColumns,
			inputColumnsWithDefault,
			inputColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(inputType, inputMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inputType, inputMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `inputs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `inputs` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `inputs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inputPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to insert into inputs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionID,
		o.SequenceID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for inputs")
	}

CacheNoHooks:
	if !cached {
		inputInsertCacheMut.Lock()
		inputInsertCache[key] = cache
		inputInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Input record. See Update for
// whitelist behavior description.
func (o *Input) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Input record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Input) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Input, and panics on error.
// See Update for whitelist behavior description.
func (o *Input) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Input.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Input) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	inputUpdateCacheMut.RLock()
	cache, cached := inputUpdateCache[key]
	inputUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			inputColumns,
			inputPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.New("model: unable to update inputs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `inputs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inputPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inputType, inputMapping, append(wl, inputPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update inputs row")
	}

	if !cached {
		inputUpdateCacheMut.Lock()
		inputUpdateCache[key] = cache
		inputUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q inputQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q inputQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to update all for inputs")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o InputSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o InputSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o InputSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InputSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `inputs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to update all in input slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Input) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Input) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Input) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Input) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("model: no inputs provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(inputColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inputUpsertCacheMut.RLock()
	cache, cached := inputUpsertCache[key]
	inputUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			inputColumns,
			inputColumnsWithDefault,
			inputColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			inputColumns,
			inputPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("model: unable to upsert inputs, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "inputs", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `inputs` WHERE `transaction_id`=? AND `sequence_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(inputType, inputMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inputType, inputMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for inputs")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionID,
		o.SequenceID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for inputs")
	}

CacheNoHooks:
	if !cached {
		inputUpsertCacheMut.Lock()
		inputUpsertCache[key] = cache
		inputUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Input record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Input) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Input record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Input) DeleteG() error {
	if o == nil {
		return errors.New("model: no Input provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Input record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Input) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Input record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Input) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Input provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inputPrimaryKeyMapping)
	sql := "DELETE FROM `inputs` WHERE `transaction_id`=? AND `sequence_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete from inputs")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q inputQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q inputQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("model: no inputQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from inputs")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o InputSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o InputSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("model: no Input slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o InputSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InputSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("model: no Input slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `inputs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "model: unable to delete all from input slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Input) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Input) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Input) ReloadG() error {
	if o == nil {
		return errors.New("model: no Input provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Input) Reload(exec boil.Executor) error {
	ret, err := FindInput(exec, o.TransactionID, o.SequenceID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InputSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *InputSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InputSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("model: empty InputSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InputSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	inputs := InputSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inputPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `inputs`.* FROM `inputs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inputPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&inputs)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in InputSlice")
	}

	*o = inputs

	return nil
}

// InputExists checks if the Input row exists.
func InputExists(exec boil.Executor, transactionID string, sequenceID uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `inputs` where `transaction_id`=? AND `sequence_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, transactionID, sequenceID)
	}

	row := exec.QueryRow(sql, transactionID, sequenceID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if inputs exists")
	}

	return exists, nil
}

// InputExistsG checks if the Input row exists.
func InputExistsG(transactionID string, sequenceID uint) (bool, error) {
	return InputExists(boil.GetDB(), transactionID, sequenceID)
}

// InputExistsGP checks if the Input row exists. Panics on error.
func InputExistsGP(transactionID string, sequenceID uint) bool {
	e, err := InputExists(boil.GetDB(), transactionID, sequenceID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// InputExistsP checks if the Input row exists. Panics on error.
func InputExistsP(exec boil.Executor, transactionID string, sequenceID uint) bool {
	e, err := InputExists(exec, transactionID, sequenceID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
