// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Addresses", testAddresses)
	t.Run("Blocks", testBlocks)
	t.Run("ClaimStreams", testClaimStreams)
	t.Run("Claims", testClaims)
	t.Run("Inputs", testInputs)
	t.Run("Outputs", testOutputs)
	t.Run("OutputsAddresses", testOutputsAddresses)
	t.Run("PriceHistories", testPriceHistories)
	t.Run("TransactionAddresses", testTransactionAddresses)
	t.Run("Transactions", testTransactions)
}

func TestDelete(t *testing.T) {
	t.Run("Addresses", testAddressesDelete)
	t.Run("Blocks", testBlocksDelete)
	t.Run("ClaimStreams", testClaimStreamsDelete)
	t.Run("Claims", testClaimsDelete)
	t.Run("Inputs", testInputsDelete)
	t.Run("Outputs", testOutputsDelete)
	t.Run("OutputsAddresses", testOutputsAddressesDelete)
	t.Run("PriceHistories", testPriceHistoriesDelete)
	t.Run("TransactionAddresses", testTransactionAddressesDelete)
	t.Run("Transactions", testTransactionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesQueryDeleteAll)
	t.Run("Blocks", testBlocksQueryDeleteAll)
	t.Run("ClaimStreams", testClaimStreamsQueryDeleteAll)
	t.Run("Claims", testClaimsQueryDeleteAll)
	t.Run("Inputs", testInputsQueryDeleteAll)
	t.Run("Outputs", testOutputsQueryDeleteAll)
	t.Run("OutputsAddresses", testOutputsAddressesQueryDeleteAll)
	t.Run("PriceHistories", testPriceHistoriesQueryDeleteAll)
	t.Run("TransactionAddresses", testTransactionAddressesQueryDeleteAll)
	t.Run("Transactions", testTransactionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceDeleteAll)
	t.Run("Blocks", testBlocksSliceDeleteAll)
	t.Run("ClaimStreams", testClaimStreamsSliceDeleteAll)
	t.Run("Claims", testClaimsSliceDeleteAll)
	t.Run("Inputs", testInputsSliceDeleteAll)
	t.Run("Outputs", testOutputsSliceDeleteAll)
	t.Run("OutputsAddresses", testOutputsAddressesSliceDeleteAll)
	t.Run("PriceHistories", testPriceHistoriesSliceDeleteAll)
	t.Run("TransactionAddresses", testTransactionAddressesSliceDeleteAll)
	t.Run("Transactions", testTransactionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Addresses", testAddressesExists)
	t.Run("Blocks", testBlocksExists)
	t.Run("ClaimStreams", testClaimStreamsExists)
	t.Run("Claims", testClaimsExists)
	t.Run("Inputs", testInputsExists)
	t.Run("Outputs", testOutputsExists)
	t.Run("OutputsAddresses", testOutputsAddressesExists)
	t.Run("PriceHistories", testPriceHistoriesExists)
	t.Run("TransactionAddresses", testTransactionAddressesExists)
	t.Run("Transactions", testTransactionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Addresses", testAddressesFind)
	t.Run("Blocks", testBlocksFind)
	t.Run("ClaimStreams", testClaimStreamsFind)
	t.Run("Claims", testClaimsFind)
	t.Run("Inputs", testInputsFind)
	t.Run("Outputs", testOutputsFind)
	t.Run("OutputsAddresses", testOutputsAddressesFind)
	t.Run("PriceHistories", testPriceHistoriesFind)
	t.Run("TransactionAddresses", testTransactionAddressesFind)
	t.Run("Transactions", testTransactionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Addresses", testAddressesBind)
	t.Run("Blocks", testBlocksBind)
	t.Run("ClaimStreams", testClaimStreamsBind)
	t.Run("Claims", testClaimsBind)
	t.Run("Inputs", testInputsBind)
	t.Run("Outputs", testOutputsBind)
	t.Run("OutputsAddresses", testOutputsAddressesBind)
	t.Run("PriceHistories", testPriceHistoriesBind)
	t.Run("TransactionAddresses", testTransactionAddressesBind)
	t.Run("Transactions", testTransactionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Addresses", testAddressesOne)
	t.Run("Blocks", testBlocksOne)
	t.Run("ClaimStreams", testClaimStreamsOne)
	t.Run("Claims", testClaimsOne)
	t.Run("Inputs", testInputsOne)
	t.Run("Outputs", testOutputsOne)
	t.Run("OutputsAddresses", testOutputsAddressesOne)
	t.Run("PriceHistories", testPriceHistoriesOne)
	t.Run("TransactionAddresses", testTransactionAddressesOne)
	t.Run("Transactions", testTransactionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Addresses", testAddressesAll)
	t.Run("Blocks", testBlocksAll)
	t.Run("ClaimStreams", testClaimStreamsAll)
	t.Run("Claims", testClaimsAll)
	t.Run("Inputs", testInputsAll)
	t.Run("Outputs", testOutputsAll)
	t.Run("OutputsAddresses", testOutputsAddressesAll)
	t.Run("PriceHistories", testPriceHistoriesAll)
	t.Run("TransactionAddresses", testTransactionAddressesAll)
	t.Run("Transactions", testTransactionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Addresses", testAddressesCount)
	t.Run("Blocks", testBlocksCount)
	t.Run("ClaimStreams", testClaimStreamsCount)
	t.Run("Claims", testClaimsCount)
	t.Run("Inputs", testInputsCount)
	t.Run("Outputs", testOutputsCount)
	t.Run("OutputsAddresses", testOutputsAddressesCount)
	t.Run("PriceHistories", testPriceHistoriesCount)
	t.Run("TransactionAddresses", testTransactionAddressesCount)
	t.Run("Transactions", testTransactionsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Addresses", testAddressesInsert)
	t.Run("Addresses", testAddressesInsertWhitelist)
	t.Run("Blocks", testBlocksInsert)
	t.Run("Blocks", testBlocksInsertWhitelist)
	t.Run("ClaimStreams", testClaimStreamsInsert)
	t.Run("ClaimStreams", testClaimStreamsInsertWhitelist)
	t.Run("Claims", testClaimsInsert)
	t.Run("Claims", testClaimsInsertWhitelist)
	t.Run("Inputs", testInputsInsert)
	t.Run("Inputs", testInputsInsertWhitelist)
	t.Run("Outputs", testOutputsInsert)
	t.Run("Outputs", testOutputsInsertWhitelist)
	t.Run("OutputsAddresses", testOutputsAddressesInsert)
	t.Run("OutputsAddresses", testOutputsAddressesInsertWhitelist)
	t.Run("PriceHistories", testPriceHistoriesInsert)
	t.Run("PriceHistories", testPriceHistoriesInsertWhitelist)
	t.Run("TransactionAddresses", testTransactionAddressesInsert)
	t.Run("TransactionAddresses", testTransactionAddressesInsertWhitelist)
	t.Run("Transactions", testTransactionsInsert)
	t.Run("Transactions", testTransactionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BlockToBlockUsingNextBlock", testBlockToOneBlockUsingNextBlock)
	t.Run("BlockToBlockUsingPreviousBlock", testBlockToOneBlockUsingPreviousBlock)
	t.Run("ClaimStreamToClaimUsingClaim", testClaimStreamToOneClaimUsingClaim)
	t.Run("ClaimToClaimUsingPublisherClaim", testClaimToOneClaimUsingPublisherClaim)
	t.Run("ClaimToTransactionUsingTransactionOfClaim", testClaimToOneTransactionUsingTransactionOfClaim)
	t.Run("InputToAddressUsingAddress", testInputToOneAddressUsingAddress)
	t.Run("InputToTransactionUsingTransaction", testInputToOneTransactionUsingTransaction)
	t.Run("InputToTransactionAddressUsingTransactionAddress", testInputToOneTransactionAddressUsingTransactionAddress)
	t.Run("OutputToInputUsingSpentByInput", testOutputToOneInputUsingSpentByInput)
	t.Run("OutputToTransactionUsingTransaction", testOutputToOneTransactionUsingTransaction)
	t.Run("OutputsAddressToAddressUsingAddress", testOutputsAddressToOneAddressUsingAddress)
	t.Run("OutputsAddressToOutputUsingOutput", testOutputsAddressToOneOutputUsingOutput)
	t.Run("OutputsAddressToTransactionAddressUsingTransactionAddress", testOutputsAddressToOneTransactionAddressUsingTransactionAddress)
	t.Run("TransactionAddressToAddressUsingAddress", testTransactionAddressToOneAddressUsingAddress)
	t.Run("TransactionAddressToTransactionUsingTransaction", testTransactionAddressToOneTransactionUsingTransaction)
	t.Run("TransactionToBlockUsingBlock", testTransactionToOneBlockUsingBlock)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("ClaimToClaimStreamUsingClaimStream", testClaimOneToOneClaimStreamUsingClaimStream)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AddressToInputs", testAddressToManyInputs)
	t.Run("AddressToOutputsAddresses", testAddressToManyOutputsAddresses)
	t.Run("AddressToTransactionAddresses", testAddressToManyTransactionAddresses)
	t.Run("BlockToNextBlockBlocks", testBlockToManyNextBlockBlocks)
	t.Run("BlockToPreviousBlockBlocks", testBlockToManyPreviousBlockBlocks)
	t.Run("BlockToTransactions", testBlockToManyTransactions)
	t.Run("ClaimToPublisherClaimClaims", testClaimToManyPublisherClaimClaims)
	t.Run("InputToSpentByInputOutputs", testInputToManySpentByInputOutputs)
	t.Run("OutputToOutputsAddresses", testOutputToManyOutputsAddresses)
	t.Run("TransactionAddressToInputs", testTransactionAddressToManyInputs)
	t.Run("TransactionAddressToOutputsAddresses", testTransactionAddressToManyOutputsAddresses)
	t.Run("TransactionToTransactionOfClaimClaims", testTransactionToManyTransactionOfClaimClaims)
	t.Run("TransactionToInputs", testTransactionToManyInputs)
	t.Run("TransactionToOutputs", testTransactionToManyOutputs)
	t.Run("TransactionToTransactionAddresses", testTransactionToManyTransactionAddresses)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BlockToBlockUsingNextBlock", testBlockToOneSetOpBlockUsingNextBlock)
	t.Run("BlockToBlockUsingPreviousBlock", testBlockToOneSetOpBlockUsingPreviousBlock)
	t.Run("ClaimStreamToClaimUsingClaim", testClaimStreamToOneSetOpClaimUsingClaim)
	t.Run("ClaimToClaimUsingPublisherClaim", testClaimToOneSetOpClaimUsingPublisherClaim)
	t.Run("ClaimToTransactionUsingTransactionOfClaim", testClaimToOneSetOpTransactionUsingTransactionOfClaim)
	t.Run("InputToAddressUsingAddress", testInputToOneSetOpAddressUsingAddress)
	t.Run("InputToTransactionUsingTransaction", testInputToOneSetOpTransactionUsingTransaction)
	t.Run("InputToTransactionAddressUsingTransactionAddress", testInputToOneSetOpTransactionAddressUsingTransactionAddress)
	t.Run("OutputToInputUsingSpentByInput", testOutputToOneSetOpInputUsingSpentByInput)
	t.Run("OutputToTransactionUsingTransaction", testOutputToOneSetOpTransactionUsingTransaction)
	t.Run("OutputsAddressToAddressUsingAddress", testOutputsAddressToOneSetOpAddressUsingAddress)
	t.Run("OutputsAddressToOutputUsingOutput", testOutputsAddressToOneSetOpOutputUsingOutput)
	t.Run("OutputsAddressToTransactionAddressUsingTransactionAddress", testOutputsAddressToOneSetOpTransactionAddressUsingTransactionAddress)
	t.Run("TransactionAddressToAddressUsingAddress", testTransactionAddressToOneSetOpAddressUsingAddress)
	t.Run("TransactionAddressToTransactionUsingTransaction", testTransactionAddressToOneSetOpTransactionUsingTransaction)
	t.Run("TransactionToBlockUsingBlock", testTransactionToOneSetOpBlockUsingBlock)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BlockToBlockUsingNextBlock", testBlockToOneRemoveOpBlockUsingNextBlock)
	t.Run("BlockToBlockUsingPreviousBlock", testBlockToOneRemoveOpBlockUsingPreviousBlock)
	t.Run("ClaimToClaimUsingPublisherClaim", testClaimToOneRemoveOpClaimUsingPublisherClaim)
	t.Run("ClaimToTransactionUsingTransactionOfClaim", testClaimToOneRemoveOpTransactionUsingTransactionOfClaim)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("ClaimToClaimStreamUsingClaimStream", testClaimOneToOneSetOpClaimStreamUsingClaimStream)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AddressToInputs", testAddressToManyAddOpInputs)
	t.Run("AddressToOutputsAddresses", testAddressToManyAddOpOutputsAddresses)
	t.Run("AddressToTransactionAddresses", testAddressToManyAddOpTransactionAddresses)
	t.Run("BlockToNextBlockBlocks", testBlockToManyAddOpNextBlockBlocks)
	t.Run("BlockToPreviousBlockBlocks", testBlockToManyAddOpPreviousBlockBlocks)
	t.Run("BlockToTransactions", testBlockToManyAddOpTransactions)
	t.Run("ClaimToPublisherClaimClaims", testClaimToManyAddOpPublisherClaimClaims)
	t.Run("InputToSpentByInputOutputs", testInputToManyAddOpSpentByInputOutputs)
	t.Run("OutputToOutputsAddresses", testOutputToManyAddOpOutputsAddresses)
	t.Run("TransactionAddressToInputs", testTransactionAddressToManyAddOpInputs)
	t.Run("TransactionAddressToOutputsAddresses", testTransactionAddressToManyAddOpOutputsAddresses)
	t.Run("TransactionToTransactionOfClaimClaims", testTransactionToManyAddOpTransactionOfClaimClaims)
	t.Run("TransactionToInputs", testTransactionToManyAddOpInputs)
	t.Run("TransactionToOutputs", testTransactionToManyAddOpOutputs)
	t.Run("TransactionToTransactionAddresses", testTransactionToManyAddOpTransactionAddresses)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("BlockToNextBlockBlocks", testBlockToManySetOpNextBlockBlocks)
	t.Run("BlockToPreviousBlockBlocks", testBlockToManySetOpPreviousBlockBlocks)
	t.Run("ClaimToPublisherClaimClaims", testClaimToManySetOpPublisherClaimClaims)
	t.Run("TransactionToTransactionOfClaimClaims", testTransactionToManySetOpTransactionOfClaimClaims)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("BlockToNextBlockBlocks", testBlockToManyRemoveOpNextBlockBlocks)
	t.Run("BlockToPreviousBlockBlocks", testBlockToManyRemoveOpPreviousBlockBlocks)
	t.Run("ClaimToPublisherClaimClaims", testClaimToManyRemoveOpPublisherClaimClaims)
	t.Run("TransactionToTransactionOfClaimClaims", testTransactionToManyRemoveOpTransactionOfClaimClaims)
}

func TestReload(t *testing.T) {
	t.Run("Addresses", testAddressesReload)
	t.Run("Blocks", testBlocksReload)
	t.Run("ClaimStreams", testClaimStreamsReload)
	t.Run("Claims", testClaimsReload)
	t.Run("Inputs", testInputsReload)
	t.Run("Outputs", testOutputsReload)
	t.Run("OutputsAddresses", testOutputsAddressesReload)
	t.Run("PriceHistories", testPriceHistoriesReload)
	t.Run("TransactionAddresses", testTransactionAddressesReload)
	t.Run("Transactions", testTransactionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Addresses", testAddressesReloadAll)
	t.Run("Blocks", testBlocksReloadAll)
	t.Run("ClaimStreams", testClaimStreamsReloadAll)
	t.Run("Claims", testClaimsReloadAll)
	t.Run("Inputs", testInputsReloadAll)
	t.Run("Outputs", testOutputsReloadAll)
	t.Run("OutputsAddresses", testOutputsAddressesReloadAll)
	t.Run("PriceHistories", testPriceHistoriesReloadAll)
	t.Run("TransactionAddresses", testTransactionAddressesReloadAll)
	t.Run("Transactions", testTransactionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Addresses", testAddressesSelect)
	t.Run("Blocks", testBlocksSelect)
	t.Run("ClaimStreams", testClaimStreamsSelect)
	t.Run("Claims", testClaimsSelect)
	t.Run("Inputs", testInputsSelect)
	t.Run("Outputs", testOutputsSelect)
	t.Run("OutputsAddresses", testOutputsAddressesSelect)
	t.Run("PriceHistories", testPriceHistoriesSelect)
	t.Run("TransactionAddresses", testTransactionAddressesSelect)
	t.Run("Transactions", testTransactionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Addresses", testAddressesUpdate)
	t.Run("Blocks", testBlocksUpdate)
	t.Run("ClaimStreams", testClaimStreamsUpdate)
	t.Run("Claims", testClaimsUpdate)
	t.Run("Inputs", testInputsUpdate)
	t.Run("Outputs", testOutputsUpdate)
	t.Run("OutputsAddresses", testOutputsAddressesUpdate)
	t.Run("PriceHistories", testPriceHistoriesUpdate)
	t.Run("TransactionAddresses", testTransactionAddressesUpdate)
	t.Run("Transactions", testTransactionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceUpdateAll)
	t.Run("Blocks", testBlocksSliceUpdateAll)
	t.Run("ClaimStreams", testClaimStreamsSliceUpdateAll)
	t.Run("Claims", testClaimsSliceUpdateAll)
	t.Run("Inputs", testInputsSliceUpdateAll)
	t.Run("Outputs", testOutputsSliceUpdateAll)
	t.Run("OutputsAddresses", testOutputsAddressesSliceUpdateAll)
	t.Run("PriceHistories", testPriceHistoriesSliceUpdateAll)
	t.Run("TransactionAddresses", testTransactionAddressesSliceUpdateAll)
	t.Run("Transactions", testTransactionsSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Addresses", testAddressesUpsert)
	t.Run("Blocks", testBlocksUpsert)
	t.Run("ClaimStreams", testClaimStreamsUpsert)
	t.Run("Claims", testClaimsUpsert)
	t.Run("Inputs", testInputsUpsert)
	t.Run("Outputs", testOutputsUpsert)
	t.Run("OutputsAddresses", testOutputsAddressesUpsert)
	t.Run("PriceHistories", testPriceHistoriesUpsert)
	t.Run("TransactionAddresses", testTransactionAddressesUpsert)
	t.Run("Transactions", testTransactionsUpsert)
}
