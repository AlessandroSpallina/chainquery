// This file is generated by SQLBoiler (https://github.com/lbryio/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package model

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/lbryio/errors.go"
	"github.com/lbryio/null.go"
	"github.com/lbryio/sqlboiler/boil"
	"github.com/lbryio/sqlboiler/queries"
	"github.com/lbryio/sqlboiler/queries/qm"
	"github.com/lbryio/sqlboiler/strmangle"
)

// TransactionsAddress is an object representing the database table.
type TransactionsAddress struct {
	TransactionID         uint64    `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	AddressID             uint64    `boil:"address_id" json:"address_id" toml:"address_id" yaml:"address_id"`
	DebitAmount           string    `boil:"debit_amount" json:"debit_amount" toml:"debit_amount" yaml:"debit_amount"`
	CreditAmount          string    `boil:"credit_amount" json:"credit_amount" toml:"credit_amount" yaml:"credit_amount"`
	LatestTransactionTime time.Time `boil:"latest_transaction_time" json:"latest_transaction_time" toml:"latest_transaction_time" yaml:"latest_transaction_time"`

	R *transactionsAddressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionsAddressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionsAddressColumns = struct {
	TransactionID         string
	AddressID             string
	DebitAmount           string
	CreditAmount          string
	LatestTransactionTime string
}{
	TransactionID:         "transaction_id",
	AddressID:             "address_id",
	DebitAmount:           "debit_amount",
	CreditAmount:          "credit_amount",
	LatestTransactionTime: "latest_transaction_time",
}

// TransactionsAddressFilter allows you to filter on any columns by making them all pointers.
type TransactionsAddressFilter struct {
	TransactionID         *uint64    `boil:"transaction_id" json:"transaction_id,omitempty" toml:"transaction_id" yaml:"transaction_id,omitempty"`
	AddressID             *uint64    `boil:"address_id" json:"address_id,omitempty" toml:"address_id" yaml:"address_id,omitempty"`
	DebitAmount           *string    `boil:"debit_amount" json:"debit_amount,omitempty" toml:"debit_amount" yaml:"debit_amount,omitempty"`
	CreditAmount          *string    `boil:"credit_amount" json:"credit_amount,omitempty" toml:"credit_amount" yaml:"credit_amount,omitempty"`
	LatestTransactionTime *time.Time `boil:"latest_transaction_time" json:"latest_transaction_time,omitempty" toml:"latest_transaction_time" yaml:"latest_transaction_time,omitempty"`
}

// transactionsAddressR is where relationships are stored.
type transactionsAddressR struct {
	Transaction *Transaction
	Address     *Address
}

// transactionsAddressL is where Load methods for each relationship are stored.
type transactionsAddressL struct{}

var (
	transactionsAddressColumns               = []string{"transaction_id", "address_id", "debit_amount", "credit_amount", "latest_transaction_time"}
	transactionsAddressColumnsWithoutDefault = []string{"transaction_id", "address_id", "latest_transaction_time"}
	transactionsAddressColumnsWithDefault    = []string{"debit_amount", "credit_amount"}
	transactionsAddressPrimaryKeyColumns     = []string{"transaction_id", "address_id"}
	transactionsAddressAutoIncrementColumn   = ""
)

type (
	// TransactionsAddressSlice is an alias for a slice of pointers to TransactionsAddress.
	// This should generally be used opposed to []TransactionsAddress.
	TransactionsAddressSlice []*TransactionsAddress

	TransactionsAddressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionsAddressType                 = reflect.TypeOf(&TransactionsAddress{})
	transactionsAddressMapping              = queries.MakeStructMapping(transactionsAddressType)
	transactionsAddressPrimaryKeyMapping, _ = queries.BindMapping(transactionsAddressType, transactionsAddressMapping, transactionsAddressPrimaryKeyColumns)
	transactionsAddressInsertCacheMut       sync.RWMutex
	transactionsAddressInsertCache          = make(map[string]insertCache)
	transactionsAddressUpdateCacheMut       sync.RWMutex
	transactionsAddressUpdateCache          = make(map[string]updateCache)
	transactionsAddressUpsertCacheMut       sync.RWMutex
	transactionsAddressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single TransactionsAddress record from the query, and panics on error.
func (q TransactionsAddressQuery) OneP() *TransactionsAddress {
	o, err := q.One()
	if err != nil {
		panic(errors.Err(err))
	}

	return o
}

// One returns a single TransactionsAddress record from the query.
func (q TransactionsAddressQuery) One() (*TransactionsAddress, error) {
	o := &TransactionsAddress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: failed to execute a one query for transactions_addresses", err)
	}

	return o, nil
}

// AllP returns all TransactionsAddress records from the query, and panics on error.
func (q TransactionsAddressQuery) AllP() TransactionsAddressSlice {
	o, err := q.All()
	if err != nil {
		panic(errors.Err(err))
	}

	return o
}

// All returns all TransactionsAddress records from the query.
func (q TransactionsAddressQuery) All() (TransactionsAddressSlice, error) {
	var o []*TransactionsAddress

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Prefix("model: failed to assign all query results to TransactionsAddress slice", err)
	}

	return o, nil
}

// CountP returns the count of all TransactionsAddress records in the query, and panics on error.
func (q TransactionsAddressQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(errors.Err(err))
	}

	return c
}

// Count returns the count of all TransactionsAddress records in the query.
func (q TransactionsAddressQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Prefix("model: failed to count transactions_addresses rows", err)
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q TransactionsAddressQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q TransactionsAddressQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetSelect(q.Query, []string{})
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Prefix("model: failed to check if transactions_addresses exists", err)
	}

	return count > 0, nil
}

// TransactionG pointed to by the foreign key.
func (o *TransactionsAddress) TransactionG(mods ...qm.QueryMod) TransactionQuery {
	return o.Transaction(boil.GetDB(), mods...)
}

// Transaction pointed to by the foreign key.
func (o *TransactionsAddress) Transaction(exec boil.Executor, mods ...qm.QueryMod) TransactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(exec, queryMods...)
	queries.SetFrom(query.Query, "`transactions`")

	return query
}

// AddressG pointed to by the foreign key.
func (o *TransactionsAddress) AddressG(mods ...qm.QueryMod) AddressQuery {
	return o.Address(boil.GetDB(), mods...)
}

// Address pointed to by the foreign key.
func (o *TransactionsAddress) Address(exec boil.Executor, mods ...qm.QueryMod) AddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AddressID),
	}

	queryMods = append(queryMods, mods...)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`addresses`")

	return query
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionsAddressL) LoadTransaction(e boil.Executor, singular bool, maybeTransactionsAddress interface{}) error {
	var slice []*TransactionsAddress
	var object *TransactionsAddress

	count := 1
	if singular {
		object = maybeTransactionsAddress.(*TransactionsAddress)
	} else {
		slice = *maybeTransactionsAddress.(*[]*TransactionsAddress)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionsAddressR{}
		}
		args[0] = object.TransactionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionsAddressR{}
			}
			args[i] = obj.TransactionID
		}
	}

	query := fmt.Sprintf(
		"select * from `transactions` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Prefix("failed to eager load Transaction", err)
	}
	defer results.Close()

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Prefix("failed to bind eager loaded slice Transaction", err)
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Transaction = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				break
			}
		}
	}

	return nil
}

// LoadAddress allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transactionsAddressL) LoadAddress(e boil.Executor, singular bool, maybeTransactionsAddress interface{}) error {
	var slice []*TransactionsAddress
	var object *TransactionsAddress

	count := 1
	if singular {
		object = maybeTransactionsAddress.(*TransactionsAddress)
	} else {
		slice = *maybeTransactionsAddress.(*[]*TransactionsAddress)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transactionsAddressR{}
		}
		args[0] = object.AddressID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionsAddressR{}
			}
			args[i] = obj.AddressID
		}
	}

	query := fmt.Sprintf(
		"select * from `addresses` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Prefix("failed to eager load Address", err)
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Prefix("failed to bind eager loaded slice Address", err)
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Address = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AddressID == foreign.ID {
				local.R.Address = foreign
				break
			}
		}
	}

	return nil
}

// SetTransactionG of the transactions_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionsAddresses.
// Uses the global database handle.
func (o *TransactionsAddress) SetTransactionG(insert bool, related *Transaction) error {
	return o.SetTransaction(boil.GetDB(), insert, related)
}

// SetTransactionP of the transactions_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionsAddresses.
// Panics on error.
func (o *TransactionsAddress) SetTransactionP(exec boil.Executor, insert bool, related *Transaction) {
	if err := o.SetTransaction(exec, insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetTransactionGP of the transactions_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionsAddresses.
// Uses the global database handle and panics on error.
func (o *TransactionsAddress) SetTransactionGP(insert bool, related *Transaction) {
	if err := o.SetTransaction(boil.GetDB(), insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetTransaction of the transactions_address to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionsAddresses.
func (o *TransactionsAddress) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Prefix("failed to insert into foreign table", err)
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transactions_addresses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"transaction_id"}),
		strmangle.WhereClause("`", "`", 0, transactionsAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionID, o.AddressID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Prefix("failed to update local table", err)
	}

	o.TransactionID = related.ID

	if o.R == nil {
		o.R = &transactionsAddressR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionsAddresses: TransactionsAddressSlice{o},
		}
	} else {
		related.R.TransactionsAddresses = append(related.R.TransactionsAddresses, o)
	}

	return nil
}

// SetAddressG of the transactions_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionsAddresses.
// Uses the global database handle.
func (o *TransactionsAddress) SetAddressG(insert bool, related *Address) error {
	return o.SetAddress(boil.GetDB(), insert, related)
}

// SetAddressP of the transactions_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionsAddresses.
// Panics on error.
func (o *TransactionsAddress) SetAddressP(exec boil.Executor, insert bool, related *Address) {
	if err := o.SetAddress(exec, insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetAddressGP of the transactions_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionsAddresses.
// Uses the global database handle and panics on error.
func (o *TransactionsAddress) SetAddressGP(insert bool, related *Address) {
	if err := o.SetAddress(boil.GetDB(), insert, related); err != nil {
		panic(errors.Err(err))
	}
}

// SetAddress of the transactions_address to the related item.
// Sets o.R.Address to related.
// Adds o to related.R.TransactionsAddresses.
func (o *TransactionsAddress) SetAddress(exec boil.Executor, insert bool, related *Address) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Prefix("failed to insert into foreign table", err)
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `transactions_addresses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"address_id"}),
		strmangle.WhereClause("`", "`", 0, transactionsAddressPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.TransactionID, o.AddressID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Prefix("failed to update local table", err)
	}

	o.AddressID = related.ID

	if o.R == nil {
		o.R = &transactionsAddressR{
			Address: related,
		}
	} else {
		o.R.Address = related
	}

	if related.R == nil {
		related.R = &addressR{
			TransactionsAddresses: TransactionsAddressSlice{o},
		}
	} else {
		related.R.TransactionsAddresses = append(related.R.TransactionsAddresses, o)
	}

	return nil
}

// TransactionsAddressesG retrieves all records.
func TransactionsAddressesG(mods ...qm.QueryMod) TransactionsAddressQuery {
	return TransactionsAddresses(boil.GetDB(), mods...)
}

// TransactionsAddresses retrieves all the records using an executor.
func TransactionsAddresses(exec boil.Executor, mods ...qm.QueryMod) TransactionsAddressQuery {
	mods = append(mods, qm.From("`transactions_addresses`"))
	return TransactionsAddressQuery{NewQuery(exec, mods...)}
}

// FindTransactionsAddressG retrieves a single record by ID.
func FindTransactionsAddressG(transactionID uint64, addressID uint64, selectCols ...string) (*TransactionsAddress, error) {
	return FindTransactionsAddress(boil.GetDB(), transactionID, addressID, selectCols...)
}

// FindTransactionsAddressGP retrieves a single record by ID, and panics on error.
func FindTransactionsAddressGP(transactionID uint64, addressID uint64, selectCols ...string) *TransactionsAddress {
	retobj, err := FindTransactionsAddress(boil.GetDB(), transactionID, addressID, selectCols...)
	if err != nil {
		panic(errors.Err(err))
	}

	return retobj
}

// FindTransactionsAddress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionsAddress(exec boil.Executor, transactionID uint64, addressID uint64, selectCols ...string) (*TransactionsAddress, error) {
	transactionsAddressObj := &TransactionsAddress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `transactions_addresses` where `transaction_id`=? AND `address_id`=?", sel,
	)

	q := queries.Raw(exec, query, transactionID, addressID)

	err := q.Bind(transactionsAddressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: unable to select from transactions_addresses", err)
	}

	return transactionsAddressObj, nil
}

// FindTransactionsAddressP retrieves a single record by ID with an executor, and panics on error.
func FindTransactionsAddressP(exec boil.Executor, transactionID uint64, addressID uint64, selectCols ...string) *TransactionsAddress {
	retobj, err := FindTransactionsAddress(exec, transactionID, addressID, selectCols...)
	if err != nil {
		panic(errors.Err(err))
	}

	return retobj
}

// FindOneTransactionsAddress retrieves a single record using filters.
func FindOneTransactionsAddress(exec boil.Executor, filters TransactionsAddressFilter) (*TransactionsAddress, error) {
	obj := &TransactionsAddress{}

	err := TransactionsAddressNewQuery(exec).
		Where(filters).
		Limit(1).
		Bind(obj)

	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, errors.Prefix("model: unable to select from transactions_addresses", err)
	}

	return obj, nil
}

// FindOneTransactionsAddressG retrieves a single record using filters.
func FindOneTransactionsAddressG(filters TransactionsAddressFilter) (*TransactionsAddress, error) {
	return FindOneTransactionsAddress(boil.GetDB(), filters)
}

// FindOneTransactionsAddressOrInit retrieves a single record using filters, or initializes a new record if one is not found.
func FindOneTransactionsAddressOrInit(exec boil.Executor, filters TransactionsAddressFilter) (*TransactionsAddress, error) {
	transactionsAddressObj, err := FindOneTransactionsAddress(exec, filters)
	if err != nil {
		return nil, err
	}

	if transactionsAddressObj == nil {
		transactionsAddressObj = &TransactionsAddress{}
		objR := reflect.ValueOf(transactionsAddressObj).Elem()
		r := reflect.ValueOf(filters)
		for i := 0; i < r.NumField(); i++ {
			f := r.Field(i)
			if f.Elem().IsValid() {
				objR.FieldByName(r.Type().Field(i).Name).Set(f.Elem())
			}
		}
	}

	return transactionsAddressObj, nil
}

// FindOneTransactionsAddressOrInit retrieves a single record using filters, or initializes a new record if one is not found.
func FindOneTransactionsAddressOrInitG(filters TransactionsAddressFilter) (*TransactionsAddress, error) {
	return FindOneTransactionsAddressOrInit(boil.GetDB(), filters)
}

// FindOneTransactionsAddressOrInit retrieves a single record using filters, or initializes and inserts a new record if one is not found.
func FindOneTransactionsAddressOrCreate(exec boil.Executor, filters TransactionsAddressFilter) (*TransactionsAddress, error) {
	transactionsAddressObj, err := FindOneTransactionsAddressOrInit(exec, filters)
	if err != nil {
		return nil, err
	}
	if transactionsAddressObj.IsNew() {
		err := transactionsAddressObj.Insert(exec)
		if err != nil {
			return nil, err
		}
	}
	return transactionsAddressObj, nil
}

// FindOneTransactionsAddressOrInit retrieves a single record using filters, or initializes and inserts a new record if one is not found.
func FindOneTransactionsAddressOrCreateG(filters TransactionsAddressFilter) (*TransactionsAddress, error) {
	return FindOneTransactionsAddressOrCreate(boil.GetDB(), filters)
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TransactionsAddress) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TransactionsAddress) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TransactionsAddress) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *TransactionsAddress) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.Err("model: no transactions_addresses provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(transactionsAddressColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	transactionsAddressInsertCacheMut.RLock()
	cache, cached := transactionsAddressInsertCache[key]
	transactionsAddressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			transactionsAddressColumns,
			transactionsAddressColumnsWithDefault,
			transactionsAddressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(transactionsAddressType, transactionsAddressMapping, wl)
		if err != nil {
			return errors.Err(err)
		}
		cache.retMapping, err = queries.BindMapping(transactionsAddressType, transactionsAddressMapping, returnColumns)
		if err != nil {
			return errors.Err(err)
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `transactions_addresses` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `transactions_addresses` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `transactions_addresses` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, transactionsAddressPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Prefix("model: unable to insert into transactions_addresses", err)
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionID,
		o.AddressID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Prefix("model: unable to populate default values for transactions_addresses", err)
	}

CacheNoHooks:
	if !cached {
		transactionsAddressInsertCacheMut.Lock()
		transactionsAddressInsertCache[key] = cache
		transactionsAddressInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single TransactionsAddress record. See Update for
// whitelist behavior description.
func (o *TransactionsAddress) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single TransactionsAddress record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *TransactionsAddress) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateP uses an executor to update the TransactionsAddress, and panics on error.
// See Update for whitelist behavior description.
func (o *TransactionsAddress) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(errors.Err(err))
	}
}

// Update uses an executor to update the TransactionsAddress.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *TransactionsAddress) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	transactionsAddressUpdateCacheMut.RLock()
	cache, cached := transactionsAddressUpdateCache[key]
	transactionsAddressUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			transactionsAddressColumns,
			transactionsAddressPrimaryKeyColumns,
			whitelist,
		)

		if len(wl) == 0 {
			return errors.Err("model: unable to update transactions_addresses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `transactions_addresses` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, transactionsAddressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionsAddressType, transactionsAddressMapping, append(wl, transactionsAddressPrimaryKeyColumns...))
		if err != nil {
			return errors.Err(err)
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Prefix("model: unable to update transactions_addresses row", err)
	}

	if !cached {
		transactionsAddressUpdateCacheMut.Lock()
		transactionsAddressUpdateCache[key] = cache
		transactionsAddressUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q TransactionsAddressQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q TransactionsAddressQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Prefix("model: unable to update all for transactions_addresses", err)
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionsAddressSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TransactionsAddressSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TransactionsAddressSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(errors.Err(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionsAddressSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.Err("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `transactions_addresses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionsAddressPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to update all in transactionsAddress slice", err)
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TransactionsAddress) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TransactionsAddress) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TransactionsAddress) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(errors.Err(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TransactionsAddress) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.Err("model: no transactions_addresses provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionsAddressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionsAddressUpsertCacheMut.RLock()
	cache, cached := transactionsAddressUpsertCache[key]
	transactionsAddressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			transactionsAddressColumns,
			transactionsAddressColumnsWithDefault,
			transactionsAddressColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			transactionsAddressColumns,
			transactionsAddressPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.Err("model: unable to upsert transactions_addresses, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "transactions_addresses", update, insert, transactionsAddressAutoIncrementColumn)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `transactions_addresses` WHERE `transaction_id`=? AND `address_id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(transactionsAddressType, transactionsAddressMapping, insert)
		if err != nil {
			return errors.Err(err)
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionsAddressType, transactionsAddressMapping, ret)
			if err != nil {
				return errors.Err(err)
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	_, err = exec.Exec(cache.query, vals...)
	if err != nil {
		return errors.Prefix("model: unable to upsert for transactions_addresses", err)
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.TransactionID,
		o.AddressID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Prefix("model: unable to populate default values for transactions_addresses", err)
	}

CacheNoHooks:
	if !cached {
		transactionsAddressUpsertCacheMut.Lock()
		transactionsAddressUpsertCache[key] = cache
		transactionsAddressUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single TransactionsAddress record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionsAddress) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteG deletes a single TransactionsAddress record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TransactionsAddress) DeleteG() error {
	if o == nil {
		return errors.Err("model: no TransactionsAddress provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single TransactionsAddress record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TransactionsAddress) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(errors.Err(err))
	}
}

// Delete deletes a single TransactionsAddress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionsAddress) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.Err("model: no TransactionsAddress provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionsAddressPrimaryKeyMapping)
	sql := "DELETE FROM `transactions_addresses` WHERE `transaction_id`=? AND `address_id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to delete from transactions_addresses", err)
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q TransactionsAddressQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAll deletes all matching rows.
func (q TransactionsAddressQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.Err("model: no TransactionsAddressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Prefix("model: unable to delete all from transactions_addresses", err)
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TransactionsAddressSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionsAddressSlice) DeleteAllG() error {
	if o == nil {
		return errors.Err("model: no TransactionsAddress slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TransactionsAddressSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(errors.Err(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionsAddressSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.Err("model: no TransactionsAddress slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `transactions_addresses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionsAddressPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Prefix("model: unable to delete all from transactionsAddress slice", err)
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TransactionsAddress) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TransactionsAddress) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TransactionsAddress) ReloadG() error {
	if o == nil {
		return errors.Err("model: no TransactionsAddress provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionsAddress) Reload(exec boil.Executor) error {
	ret, err := FindTransactionsAddress(exec, o.TransactionID, o.AddressID)
	if err != nil {
		return errors.Err(err)
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionsAddressSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TransactionsAddressSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(errors.Err(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionsAddressSlice) ReloadAllG() error {
	if o == nil {
		return errors.Err("model: empty TransactionsAddressSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionsAddressSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	transactionsAddresses := TransactionsAddressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionsAddressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `transactions_addresses`.* FROM `transactions_addresses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, transactionsAddressPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&transactionsAddresses)
	if err != nil {
		return errors.Prefix("model: unable to reload all in TransactionsAddressSlice", err)
	}

	*o = transactionsAddresses

	return nil
}

// TransactionsAddressExists checks if the TransactionsAddress row exists.
func TransactionsAddressExists(exec boil.Executor, transactionID uint64, addressID uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `transactions_addresses` where `transaction_id`=? AND `address_id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, transactionID, addressID)
	}

	row := exec.QueryRow(sql, transactionID, addressID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Prefix("model: unable to check if transactions_addresses exists", err)
	}

	return exists, nil
}

// TransactionsAddressExistsG checks if the TransactionsAddress row exists.
func TransactionsAddressExistsG(transactionID uint64, addressID uint64) (bool, error) {
	return TransactionsAddressExists(boil.GetDB(), transactionID, addressID)
}

// TransactionsAddressExistsGP checks if the TransactionsAddress row exists. Panics on error.
func TransactionsAddressExistsGP(transactionID uint64, addressID uint64) bool {
	e, err := TransactionsAddressExists(boil.GetDB(), transactionID, addressID)
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// TransactionsAddressExistsP checks if the TransactionsAddress row exists. Panics on error.
func TransactionsAddressExistsP(exec boil.Executor, transactionID uint64, addressID uint64) bool {
	e, err := TransactionsAddressExists(exec, transactionID, addressID)
	if err != nil {
		panic(errors.Err(err))
	}

	return e
}

// IsNew() checks if record exists in db (aka if its primary key is set).
func (o *TransactionsAddress) IsNew() bool {
	r := reflect.ValueOf(o).Elem()
	for i := 0; i < r.NumField(); i++ {
		column := r.Type().Field(i).Tag.Get("boil")
		for _, pkColumn := range transactionsAddressPrimaryKeyColumns {
			if column == pkColumn {
				field := r.Field(i)
				if field.Interface() != reflect.Zero(field.Type()).Interface() {
					return false
				}
			}
		}
	}
	return true
}

// Save() inserts the record if it does not exist, or updates it if it does.
func (o *TransactionsAddress) Save(exec boil.Executor, whitelist ...string) error {
	if o.IsNew() {
		return o.Insert(exec, whitelist...)
	} else {
		return o.Update(exec, whitelist...)
	}
}

// SaveG() inserts the record if it does not exist, or updates it if it does.
func (o *TransactionsAddress) SaveG(whitelist ...string) error {
	if o.IsNew() {
		return o.InsertG(whitelist...)
	} else {
		return o.UpdateG(whitelist...)
	}
}

// TransactionsAddressNewQuery filters query results
func TransactionsAddressNewQuery(exec boil.Executor) *TransactionsAddressQuery {
	return &TransactionsAddressQuery{NewQuery(exec, qm.Select("*"), qm.From("`transactions_addresses`"))}
}

// TransactionsAddressNewQuery filters query results
func TransactionsAddressNewQueryG() *TransactionsAddressQuery {
	return TransactionsAddressNewQuery(boil.GetDB())
}

// Where filters query results
func (q *TransactionsAddressQuery) Where(filters TransactionsAddressFilter) *TransactionsAddressQuery {
	r := reflect.ValueOf(filters)
	for i := 0; i < r.NumField(); i++ {
		f := r.Field(i)
		if f.Elem().IsValid() {
			if nullable, ok := f.Elem().Interface().(null.Nullable); ok && nullable.IsNull() {
				queries.AppendWhere(q.Query, r.Type().Field(i).Tag.Get("boil")+" IS NULL")
			} else {
				queries.AppendWhere(q.Query, r.Type().Field(i).Tag.Get("boil")+" = ?", f.Elem().Interface())
			}
		}
	}
	return q
}

// Limit limits query results
func (q *TransactionsAddressQuery) Limit(limit int) *TransactionsAddressQuery {
	queries.SetLimit(q.Query, limit)
	return q
}

// Merge combines two TransactionsAddresses into one. The primary record will be kept, and the secondary will be deleted.
func MergeTransactionsAddresses(exec boil.Executor, primaryID uint64, secondaryID uint64) (err error) {
	tx, ok := exec.(boil.Transactor)
	if !ok {
		txdb, ok := exec.(boil.Beginner)
		if !ok {
			return errors.Err("database does not support transactions")
		}

		tx, err = txdb.Begin()
		if err != nil {
			return errors.Err(err)
		}

		defer func() {
			if p := recover(); p != nil {
				tx.Rollback()
				panic(p) // Rollback, then propagate panic
			} else if err != nil {
				tx.Rollback()
			} else {
				err = tx.Commit()
			}
		}()
	}

	primary, err := FindTransactionsAddress(tx, primaryID)
	if err != nil {
		return errors.Err(err)
	} else if primary == nil {
		return errors.Err("primary TransactionsAddress not found")
	}

	secondary, err := FindTransactionsAddress(tx, secondaryID)
	if err != nil {
		return errors.Err(err)
	} else if secondary == nil {
		return errors.Err("secondary TransactionsAddress not found")
	}

	foreignKeys := []foreignKey{}

	conflictingKeys := []conflictingUniqueKey{}

	err = mergeModels(tx, primaryID, secondaryID, foreignKeys, conflictingKeys)
	if err != nil {
		return err
	}

	pr := reflect.ValueOf(primary)
	sr := reflect.ValueOf(secondary)
	// for any column thats null on the primary and not null on the secondary, copy from secondary to primary
	for i := 0; i < sr.Elem().NumField(); i++ {
		pf := pr.Elem().Field(i)
		sf := sr.Elem().Field(i)
		if sf.IsValid() {
			if nullable, ok := sf.Interface().(null.Nullable); ok && !nullable.IsNull() && pf.Interface().(null.Nullable).IsNull() {
				pf.Set(sf)
			}
		}
	}

	err = primary.Update(tx)
	if err != nil {
		return err
	}

	err = secondary.Delete(tx)
	if err != nil {
		return err
	}

	return nil
}

// Merge combines two TransactionsAddresses into one. The primary record will be kept, and the secondary will be deleted.
func MergeTransactionsAddressesG(primaryID uint64, secondaryID uint64) error {
	return MergeTransactionsAddresses(boil.GetDB(), primaryID, secondaryID)
}
