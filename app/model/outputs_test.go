// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testOutputs(t *testing.T) {
	t.Parallel()

	query := Outputs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOutputsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = output.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutputsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Outputs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOutputsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OutputSlice{output}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOutputsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OutputExists(tx, output.ID)
	if err != nil {
		t.Errorf("Unable to check if Output exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OutputExistsG to return true, but got false.")
	}
}
func testOutputsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	outputFound, err := FindOutput(tx, output.ID)
	if err != nil {
		t.Error(err)
	}

	if outputFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOutputsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Outputs(tx).Bind(output); err != nil {
		t.Error(err)
	}
}

func testOutputsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Outputs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOutputsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	outputOne := &Output{}
	outputTwo := &Output{}
	if err = randomize.Struct(seed, outputOne, outputDBTypes, false, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}
	if err = randomize.Struct(seed, outputTwo, outputDBTypes, false, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = outputOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = outputTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Outputs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOutputsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	outputOne := &Output{}
	outputTwo := &Output{}
	if err = randomize.Struct(seed, outputOne, outputDBTypes, false, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}
	if err = randomize.Struct(seed, outputTwo, outputDBTypes, false, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = outputOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = outputTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOutputsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutputsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx, outputColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOutputToManyOutputsAddresses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Output
	var b, c OutputsAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, outputsAddressDBTypes, false, outputsAddressColumnsWithDefault...)
	randomize.Struct(seed, &c, outputsAddressDBTypes, false, outputsAddressColumnsWithDefault...)

	b.OutputID = a.ID
	c.OutputID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	outputsAddress, err := a.OutputsAddresses(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range outputsAddress {
		if v.OutputID == b.OutputID {
			bFound = true
		}
		if v.OutputID == c.OutputID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := OutputSlice{&a}
	if err = a.L.LoadOutputsAddresses(tx, false, (*[]*Output)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OutputsAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OutputsAddresses = nil
	if err = a.L.LoadOutputsAddresses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OutputsAddresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", outputsAddress)
	}
}

func testOutputToManyAddOpOutputsAddresses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Output
	var b, c, d, e OutputsAddress

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outputDBTypes, false, strmangle.SetComplement(outputPrimaryKeyColumns, outputColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OutputsAddress{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, outputsAddressDBTypes, false, strmangle.SetComplement(outputsAddressPrimaryKeyColumns, outputsAddressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OutputsAddress{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOutputsAddresses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.OutputID {
			t.Error("foreign key was wrong value", a.ID, first.OutputID)
		}
		if a.ID != second.OutputID {
			t.Error("foreign key was wrong value", a.ID, second.OutputID)
		}

		if first.R.Output != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Output != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OutputsAddresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OutputsAddresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OutputsAddresses(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testOutputToOneInputUsingSpentByInput(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Output
	var foreign Input

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, outputDBTypes, false, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, inputDBTypes, false, inputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Input struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SpentByInputID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.SpentByInput(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := OutputSlice{&local}
	if err = local.L.LoadSpentByInput(tx, false, (*[]*Output)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.SpentByInput == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SpentByInput = nil
	if err = local.L.LoadSpentByInput(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.SpentByInput == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOutputToOneTransactionUsingTransaction(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Output
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, outputDBTypes, false, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.TransactionID = foreign.Hash
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Hash != foreign.Hash {
		t.Errorf("want: %v, got %v", foreign.Hash, check.Hash)
	}

	slice := OutputSlice{&local}
	if err = local.L.LoadTransaction(tx, false, (*[]*Output)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOutputToOneSetOpInputUsingSpentByInput(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Output
	var b, c Input

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outputDBTypes, false, strmangle.SetComplement(outputPrimaryKeyColumns, outputColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, inputDBTypes, false, strmangle.SetComplement(inputPrimaryKeyColumns, inputColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Input{&b, &c} {
		err = a.SetSpentByInput(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SpentByInput != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SpentByInputOutputs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SpentByInputID != x.ID {
			t.Error("foreign key was wrong value", a.SpentByInputID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SpentByInputID))
		reflect.Indirect(reflect.ValueOf(&a.SpentByInputID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SpentByInputID != x.ID {
			t.Error("foreign key was wrong value", a.SpentByInputID, x.ID)
		}
	}
}
func testOutputToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Output
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, outputDBTypes, false, strmangle.SetComplement(outputPrimaryKeyColumns, outputColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Outputs[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TransactionID != x.Hash {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TransactionID != x.Hash {
			t.Error("foreign key was wrong value", a.TransactionID, x.Hash)
		}
	}
}
func testOutputsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = output.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOutputsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OutputSlice{output}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOutputsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Outputs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	outputDBTypes = map[string]string{`Addresslist`: `text`, `Created`: `datetime`, `Hash160`: `varchar`, `ID`: `varchar`, `IsSpent`: `tinyint`, `Modified`: `datetime`, `RequiredSignatures`: `int`, `ScriptPubKeyAsm`: `text`, `ScriptPubKeyHex`: `text`, `SequenceID`: `int`, `SpentByInputID`: `varchar`, `SpentByTransactionID`: `varchar`, `SpentByTransactionSequenceID`: `int`, `TransactionID`: `varchar`, `Type`: `varchar`, `Value`: `decimal`}
	_             = bytes.MinRead
)

func testOutputsUpdate(t *testing.T) {
	t.Parallel()

	if len(outputColumns) == len(outputPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	if err = output.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOutputsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(outputColumns) == len(outputPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	output := &Output{}
	if err = randomize.Struct(seed, output, outputDBTypes, true, outputColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, output, outputDBTypes, true, outputPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(outputColumns, outputPrimaryKeyColumns) {
		fields = outputColumns
	} else {
		fields = strmangle.SetComplement(
			outputColumns,
			outputPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(output))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OutputSlice{output}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOutputsUpsert(t *testing.T) {
	t.Parallel()

	if len(outputColumns) == len(outputPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	output := Output{}
	if err = randomize.Struct(seed, &output, outputDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = output.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Output: %s", err)
	}

	count, err := Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &output, outputDBTypes, false, outputPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Output struct: %s", err)
	}

	if err = output.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Output: %s", err)
	}

	count, err = Outputs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
