// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4d\x73\xdb\xbc\x11\xbe\xfb\x57\xe0\x16\x6a\x6a\xcf\x58\x7e\xd3\xb7\xe9\x74\x72\xa0\x29\xd8\xe6\x1b\x89\x72\x49\x2a\x4d\x7a\x81\x68\x12\x92\x50\x53\xa0\x42\x80\xb1\xdd\x5f\xdf\x21\xc0\x0f\xf0\x4b\xa2\x2c\xa6\x8d\x33\xbd\xd9\xe2\x62\x77\x01\xec\x3e\xfb\x2c\x80\x8b\x0b\xf0\xa7\x2d\x59\xc7\x1e\xc7\x60\xb1\x3b\x3b\x53\xff\x77\xb8\xc7\xf1\x16\x53\x7e\x8d\xd7\x84\x9e\x19\x36\xd4\x5d\x08\x5c\xfd\x7a\x0a\x81\x79\x03\xac\xb9\x0b\xe0\x17\xd3\x71\x1d\xb0\x7c\x08\x23\xff\x71\x79\xa6\x9d\x01\x00\xc0\x92\x04\x4b\xe0\x40\xdb\xd4\xa7\xe7\x67\xf2\x97\x07\xc2\xd9\x12\x7c\xd6\x6d\xe3\x4e\xb7\xb5\xab\xcb\x91\x18\x6d\x2d\xa6\xd3\x73\x29\xe0\x6f\x3c\x42\x9f\xa2\xf8\xb1\x94\xfa\xcb\xe5\x08\xa4\x7f\xe8\x86\x0b\x6d\xe0\x40\x17\x84\x1e\x27\x74\x0c\x8c\xf9\x74\x9a\x7a\x22\xff\x45\x6b\x4c\x71\xec\x85\xc8\x27\x0d\xa5\x11\x5d\x91\x78\xeb\x71\x12\x51\xb6\x04\xa6\xe5\xc2\x5b\x68\x83\x85\xe5\x98\xb7\x16\x9c\xd4\xc5\x03\xb2\x5a\x11\x3f\x09\xf9\xcb\x12\x4c\xa0\x61\xce\xf4\xa9\x36\xfe\x70\xfe\xa1\xe1\xec\xc6\x63\x9b\x41\xfc\x04\xb9\x42\x4c\xd6\x1b\xbe\x04\xd7\xe6\xad\x69\xb9\x9d\x0e\x6e\x71\x40\x3c\x8a\x38\xd9\xe2\x1e\xb2\xf1\x63\x88\x51\x1c\x45\x7c\xc8\x25\xa5\xde\x16\x23\x3f\xf4\xc8\x76\x78\xd5\x11\xf5\x0f\xcf\x6b\x17\xe3\xef\x24\x4a\x18\x12\x21\x87\x4e\xdd\x8a\xdc\x36\x7e\xe6\xc3\x6a\x94\xca\x18\xf9\xf7\xe1\x29\x71\x2f\x5e\xe3\x41\x97\x52\x1a\xef\x15\x27\xdf\x71\xcc\x48\x44\xfb\xca\xa1\x0d\x7e\x2e\x3d\x1d\x9f\xec\x29\x8f\x3d\xca\x3c\x9f\x0b\xd5\x1e\xdb\x60\xb6\x04\x2e\xfc\xe2\x36\x3f\x33\xb4\x8b\x23\x1f\x33\x86\x83\x25\x70\x4d\xeb\xab\x69\xb9\xda\x78\x04\x26\xf0\x46\x5f\x4c\x5d\x70\xa9\xa8\xce\xd2\x3f\xc6\x1e\x4f\xa5\x27\xba\x0b\x5d\x73\x06\xcb\xbc\xcb\x07\x19\x0b\xdb\x86\x96\x8b\xd2\xaf\x8e\xab\xcf\xee\xf3\xec\x89\x02\xb2\x22\x47\x8e\x05\x73\x0b\x2c\xee\xd3\x01\x6d\x7a\x85\xe2\x7b\xdb\x9c\xe9\xf6\x57\xf0\x09\x7e\x05\xcb\xfb\x4f\xe8\x5a\xe0\x26\xd0\x52\xc8\x1c\x49\xdb\x0b\xcb\xfc\xfb\x02\x4a\x09\x33\x78\x96\x22\x77\x22\x28\x35\x89\x3c\x99\xa0\x31\xb7\x1c\xd7\xd6\xd3\x4d\x5b\x1a\x94\x23\xb7\x5c\xab\x3b\xb1\x92\x9f\xbd\x90\x04\x7f\xb0\x74\x73\x8d\x3b\x68\x7c\xd2\x5a\x57\xdb\x74\xe4\xb4\xe6\x36\xf8\xc3\x99\x5b\xe8\xb3\x3e\x35\x27\xad\xa2\xa3\xcc\xb0\x69\x4d\xe0\x17\xd5\xb9\x0c\xbd\xb4\x1c\xc7\x3a\xe4\x5c\x11\x8f\x9a\x1a\x9d\x4d\xc9\x99\xc0\xb8\x5c\x54\x45\xbc\xa6\xec\x7d\x86\x05\x95\x25\x6a\x03\x88\x0e\x87\x8c\x3c\x40\xb4\x22\x56\x3a\x24\x67\x45\x3c\x68\x65\x6c\x8c\xce\x46\x00\x5a\xb7\xa6\x05\x3f\x9a\x94\x46\x93\xeb\x32\x34\xee\x74\xdb\x81\xee\xc7\x84\xaf\x3e\x6c\x1f\xde\x17\xe9\x90\xfd\x8f\x12\x4a\xfc\x28\xc0\x69\x3e\xd8\xf3\x7f\xa0\x9b\xb9\x3d\xd3\xdd\x8f\xc6\x7c\x76\x6f\x43\xc7\x81\x93\x74\xf7\xd1\xf5\x74\x6e\x7c\x42\x8e\xf9\x4f\xf8\xf1\xfd\xdf\xda\x0b\x33\xa4\xc1\xab\x4b\xb6\xb2\xc1\xad\x85\x5b\x01\x92\x87\x17\xb1\x8c\x28\xfd\x7c\x32\x30\x12\xba\x4b\x38\xf2\xa3\x84\xf2\xc3\x25\x39\x4a\xf8\x11\xd2\xdf\xbd\x30\xc1\x07\x6a\xf7\x0a\x37\x24\xda\x10\xa4\x01\x4e\xad\x60\xda\x22\xd7\x0b\xf1\x07\x23\x10\x75\x10\xcf\x57\xa8\xf6\x5d\x29\x07\x87\xd6\x30\xf6\x9e\x2a\x08\xfc\x73\x81\xa8\xea\x52\x36\xa1\xa3\xfd\xaa\x63\xb0\x82\x9b\x55\x24\xbe\x99\xdb\xd0\xbc\xb5\xa4\xe0\x4d\x45\xb0\x82\x38\x8d\x24\x19\x01\x1b\xde\x40\x1b\x5a\x06\x2c\xb8\x71\x01\xde\xe9\x04\x27\x70\x0a\xd3\x09\xea\x8e\xa1\x4f\xa0\x32\x65\x6b\x0e\x74\xc3\x35\xe7\x16\x68\x2f\x06\x35\x8c\xaf\x97\x04\x05\xb6\x14\xc9\x1c\x4c\x1b\xe1\xbc\x77\x54\x06\x8e\xf9\xe0\xca\xa2\xf7\x19\xb8\x1f\x55\x15\xf9\x5f\x10\x5b\xbd\x20\x88\x31\x63\xdd\xb8\x9a\x0b\x14\x18\xf0\xfe\x64\x0c\x58\x91\x98\x71\xc4\x30\xa6\x65\x4e\x14\x04\x73\x5d\x5a\xfa\xed\x72\x54\xfe\x8c\x92\x38\x54\xfb\xb2\xe2\xdb\xcf\x97\xf6\xf5\xb4\xd5\xf3\x25\xdc\x47\x9e\x32\x21\x45\x36\x5f\xf9\xfd\x03\xdc\x74\xc5\x34\xb1\x70\xcd\xd8\xcd\x64\x7a\xc5\x79\x26\xfb\x0b\xc6\xb8\xa8\xe3\xdd\x11\xae\x82\x4d\xfa\xf1\x50\x0f\x54\xa3\x9b\x43\x56\x47\xc9\x38\xb2\x8d\x6f\x73\x26\x97\x63\xc8\x8f\x08\x7d\xf0\x18\x3e\xd8\x61\x64\xe7\x0b\xb9\xf4\xc9\xac\x28\x65\xad\x51\xc2\x87\xea\x3e\x73\x75\xb4\x59\xf0\x6b\x12\x6c\x87\x69\x80\x92\x5d\x20\x63\xb9\xcf\xb4\x19\xfe\x96\x60\xd1\xab\xbf\x86\x90\xe5\x4a\xfc\x98\xec\x38\x62\x64\x8d\x3c\xb6\x95\x94\xe3\x75\x73\x55\x34\x89\xe6\xf4\x55\x9a\xde\x0a\xea\x99\x22\xeb\xf6\xd2\x14\x21\xa2\xa2\x63\x3d\xfc\xab\xf4\xc4\xab\xe2\x68\x3f\x7a\xb2\xc7\x72\x8d\x4e\xd5\x70\xa0\x6a\x9b\x37\xa9\xd7\x31\xf6\x15\x9c\x15\xa6\x3f\xcb\x70\xd3\xb2\xb8\x6b\x6f\x18\xa3\x84\xab\xad\x62\x91\x74\x4d\x69\xa1\xb3\x17\xca\x0b\xc9\x5f\x15\xe3\x51\x83\xcd\x88\x5f\x7b\x80\xfa\x1e\xc8\xad\x89\xb6\x86\x79\x23\x86\x49\xb0\x3c\xaf\x68\x6d\xcb\x80\x62\x3f\xf2\xaa\x8f\x59\x99\x34\xb9\x9a\x6a\x18\x12\x35\xa9\x5e\x9d\x00\x2d\x86\x9b\xbc\x63\xa0\xfc\x7b\xd3\x51\x25\x9b\xfa\x37\x41\x1d\xf6\x14\xb0\x14\x39\x0e\x57\x40\xfe\xb2\xc3\xd5\x8b\x8f\x53\x6a\xdc\x2e\x79\x40\x8f\xf8\x65\xa0\x8a\x99\x6b\x7b\x7d\xd5\x94\x27\x06\xf8\x5b\x42\x62\x1c\xa4\x15\x98\x7a\x3c\x89\x71\xcb\x5d\x8b\x72\xf0\x31\xfe\xfd\xb2\x5c\x91\x3f\xbf\x76\x45\xf2\x7c\x0a\x09\xe3\xa7\x78\x4f\x98\xa0\x40\xbc\x27\xf5\x49\x45\xd3\x56\xbf\x13\x03\xdf\x4c\xff\x34\x97\x59\xd8\xd9\x3e\x2d\x54\x91\x46\x8e\x9d\xcb\xf8\xef\xa0\x20\x72\xe0\x7f\x91\x09\xb4\x3b\xe0\xa4\xbb\x75\xfd\x52\xc0\x7f\x73\xf7\x06\xaa\x03\xf5\xa3\xf8\xa2\x00\x34\x8f\xe0\xab\x71\xdb\x71\xf8\x5e\x11\x6a\x39\x76\x97\xd3\x3b\x48\x77\xe6\xc9\x2e\x22\x54\xcc\x48\xec\xd6\x79\x73\x1f\x47\xc0\x98\xcf\x66\xd0\x72\xc1\x3b\x8a\x71\x80\x03\xb0\x8a\x62\x10\xe3\x15\x8e\x53\x8a\xcf\x00\xa1\x80\x6f\x08\x03\x7e\x14\x26\x5b\x0a\xa2\x38\xc0\xf1\xbb\x36\x4b\xbc\x27\x57\x92\xbe\xff\x82\x64\x29\x3b\xab\xae\xb3\xa5\xec\xe7\x1f\x4a\x97\xe4\x9a\x2a\x6c\xa3\x34\xda\x8f\x30\x49\x05\x25\x71\x29\x33\xbf\xd4\x54\xcd\x95\xa8\x02\x1f\x27\x91\xa6\xba\xf1\xff\xb3\xa6\x03\xf7\x35\x8d\x18\x3b\x92\x31\xf5\x0f\xb4\x65\x80\x1f\x08\x47\xde\x56\x5e\xc0\x1c\xba\x37\x29\xc1\xc4\x49\xb6\x20\x5a\x01\xbe\xc1\x40\xa0\x2a\x03\x3c\x92\x40\x92\x19\x17\x38\x93\x7e\xe6\xcf\xef\xca\x9a\x19\x9c\x6a\x4c\x86\x65\x1f\x6b\xa1\xc7\x31\xe3\xa8\x79\xc7\x33\xe4\x85\x82\x12\xca\xb5\x3d\xea\x97\x97\x8a\xaa\x32\x3f\xfe\x57\x75\xb5\xd3\xa1\x1f\x96\xb0\xfb\xae\x0d\x4a\xf3\x53\xb1\x93\x2d\x17\x1e\x5d\x5b\xbc\xf7\x3a\xa2\xd4\x3b\x49\x63\x3f\xd5\x53\x49\x82\x9e\x83\x0d\x11\xcc\x59\x29\x54\xc2\xfa\x6d\xd7\x38\xf1\xf2\xa7\x5f\xe7\x36\xe8\xa5\x71\xbf\x66\x8b\x7a\x5b\xac\x3e\x4e\xb9\x7a\xdf\x7c\x67\x26\x9e\x2e\xa5\x3e\x0d\x74\xed\x22\x15\xca\x36\x4f\xe9\x20\x0a\x29\x70\x71\x01\xc6\xe0\x02\x18\x38\xe6\x64\x45\x7c\x8f\x63\xf7\x65\x87\xcf\xc1\x15\xb8\x00\x0e\x8f\xb1\xb7\x4d\xff\xcf\x0e\x65\x93\x87\x90\xb0\x0d\x8e\x4f\xf2\xb0\xc0\x45\x85\xc6\x79\xc0\x48\x1d\x35\x03\xf0\x44\xf8\xa6\xee\x4d\x8e\x89\xa5\x7d\x46\xd6\xd5\x7b\xa1\xd7\xed\x9b\x5f\xda\xe9\x7a\xd7\xb3\xf7\x66\xbd\xb8\xd8\x1e\xee\xc5\x91\x20\xcb\xc8\x63\xb2\xed\x9d\xc1\x89\xb9\x98\x89\xf6\xb1\x4b\xee\x5f\x82\xbe\x97\x82\xd9\x61\xf1\xc5\x05\xd0\x83\x80\xa4\x53\xf0\x42\xb0\x22\x38\x0c\x64\x99\xc1\x1e\x7b\x01\x84\x06\xf8\x99\xd0\x75\x5a\x97\x98\xd8\x65\x90\xc6\x08\xcb\x0a\x70\xc2\x37\x51\xac\x74\xc1\xe3\xab\x51\x51\x70\x65\x77\x4e\xea\x46\xb3\x1b\x07\xca\xd3\x1e\xa6\x7a\xac\x30\xfe\xfd\xea\xb5\x8f\x31\x18\xa2\x88\xa1\x15\x7a\xea\xd7\xff\x86\x1e\x5d\x27\xde\x7a\x88\x23\x0d\xbe\x49\xb6\x0f\xd4\x23\xa1\xbc\x83\x54\x83\x83\xf0\xb0\x1a\x2e\xc7\x3c\xda\x58\x61\x8c\xfc\x24\x4e\xe3\xfe\x25\xcb\xa1\xdf\x46\xe5\x74\x57\x24\xe4\x38\x7e\xa3\x6f\xc8\xda\xd8\x86\xc8\xeb\xfd\x37\x02\x42\x64\x0f\x6b\xe8\x7c\xba\x50\x63\x0f\xc7\x3c\x60\xd8\xe3\xc9\x7d\x8e\x32\xe2\x0c\x5e\x85\xbc\xaa\x75\x3f\x9f\x59\x01\xda\x47\xd9\xae\x5f\xed\x0a\xdb\x0b\x4a\xbe\x25\x8d\xd7\x10\xca\x02\x9c\x67\xc5\xe6\x5c\xa9\x15\x1d\x0f\xee\x84\x42\x43\x45\xb8\xac\xc7\xaf\xa0\x5e\x47\x8b\xaf\xca\x8c\x46\xa2\x4c\x28\x3f\x09\xb0\xa8\xf3\x0c\xa3\xb9\x1e\x0d\x2e\x52\xdf\xea\x23\xde\x7e\xc8\xe9\xf4\x69\xe1\x85\x64\x7b\x07\x9f\xe5\x4d\x5d\x58\xcf\x00\x4f\xcb\xa1\x4f\x1b\xff\x75\xdc\x72\xb0\x21\x7d\x90\x20\xe7\x0a\x8c\xd3\xaa\x98\xd7\x31\x64\x5a\xe0\x92\x56\x62\x54\xd7\xea\x48\x78\xd1\x32\x9c\x91\x9e\xbc\x69\x56\x96\xd0\x47\x1a\x3d\x51\x74\x80\x9d\x1d\x45\x8f\xca\xda\xd2\x7c\xac\x4f\x58\x76\x61\xdc\xaf\x68\x0c\xfa\xae\x7a\xc8\xd3\xfe\xa3\xc8\x65\xff\x73\x9c\x01\x18\x46\x1b\xd0\x67\xbb\xec\x37\xf1\xbe\x0e\x4c\xe2\x60\xb0\x79\xf4\x58\xb3\xd7\x01\x4c\x55\xa9\x51\x47\x49\x51\x9d\x89\x7e\xd8\x61\x91\x92\xba\x0b\x61\x50\x24\x70\xcb\xe3\xbb\xf2\x06\xb7\x7d\x48\xeb\x79\x56\xb7\xb8\xfb\x9c\xab\x6f\x1e\x98\xfe\x14\x48\xf1\x9f\x00\x00\x00\xff\xff\x02\xc2\xff\x3e\xb7\x33\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 13239, mode: os.FileMode(420), modTime: time.Unix(1521997896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

