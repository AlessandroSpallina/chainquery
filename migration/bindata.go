// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x73\xdb\xb8\x11\x7f\xf7\xa7\xc0\xdc\xcb\x51\x53\x79\xc6\xf2\x25\xd7\x74\x3a\x79\xa0\x29\x3a\xe1\x45\xa2\x5c\x91\x4a\x93\xbe\x40\x10\x09\x49\xa8\x25\x90\x21\xc0\xd8\xee\xa7\xef\x10\xe0\x1f\xf0\x9f\x44\xc9\x4c\x2f\xf6\xf4\xd1\xe6\x62\x17\x58\xec\xfe\xf6\x07\x2c\x74\x79\x09\xfe\xb2\x27\x9b\x08\x71\x0c\x16\xe1\xc5\x85\xfa\xb7\xc3\x11\xc7\x7b\x4c\xf9\x0d\xde\x10\x7a\x61\xcc\x4d\xdd\x35\x81\x63\x7c\x34\xa7\x3a\xb0\x6e\x81\x3d\x73\x81\xf9\xc5\x72\x5c\x07\x2c\xbd\x2d\x22\xf4\x5b\x8c\xa3\xa7\x25\x18\x9b\xb7\xfa\x62\xe2\x02\xe3\xa3\x3e\xd7\x0d\xd7\x9c\x03\xc7\x74\xc1\x0e\x71\x42\x47\xc0\x98\x4d\x26\x89\x1a\xf9\x27\xdc\x60\x8a\x23\xb4\x83\x1e\x01\x7f\x6f\x36\x6e\x52\xbf\xcb\xb4\x5c\xfd\x66\x62\x56\x67\xb5\xda\x05\xde\xfd\xf2\x42\xbb\x00\x00\x80\x25\xf1\x97\xc0\x31\xe7\x96\x3e\x19\x5e\xc8\xff\xac\x08\x67\x4b\xf0\x59\x9f\x27\x53\xd5\xae\xaf\x06\x62\xb4\xbd\x98\x4c\x86\x52\x40\x2c\xeb\x21\x88\xee\x0b\xa9\xbf\x5e\x0d\x4e\x5d\x59\x55\x69\x40\xd7\x24\xda\x23\x4e\x02\xca\x96\xc0\xb2\x5d\xf3\x83\x39\x07\x0b\xdb\xb1\x3e\xd8\xe6\xb8\x2a\xee\x93\xf5\x9a\x78\xf1\x8e\x27\xae\x9d\x2d\x6e\x26\xa6\x36\x7a\x37\x7c\x57\x9b\xeb\x16\xb1\x6d\x2f\xd3\x04\x99\x42\x4c\x36\x5b\xbe\x04\x37\xd6\x07\xcb\x76\x5b\xe7\xb7\xc7\x3e\x41\x14\x72\xb2\xc7\x1d\x64\xa3\xfb\x1d\x86\x51\x10\xf0\x3e\x3d\x4a\xd1\x1e\x43\x6f\x87\xc8\xbe\x7f\xd5\x01\xf5\x8e\xaf\x2b\x8c\xf0\x77\x12\xc4\x0c\x8a\x88\x83\xcf\xdd\x8a\xcc\x36\x7e\xe4\xfd\x6a\x94\xca\x18\xf9\xcf\xf1\x25\x71\x14\x6d\x70\xaf\xae\x94\xc6\x3b\xc5\xc9\x77\x1c\x31\x12\xd0\xae\x72\x70\x8b\x1f\x8b\x99\x8e\x9e\x3d\x53\x1e\x21\xca\x90\xc7\x85\x6a\xc4\xb6\x98\x2d\x81\x6b\x7e\x71\xeb\x9f\x19\x0c\xa3\xc0\xc3\x8c\x61\x7f\x09\x5c\xcb\xfe\x6a\xd9\xae\x36\x1a\xe4\x18\x78\xa5\xa8\x4e\xb3\x3f\xc2\x88\x27\xd2\x63\xdd\x35\x5d\x6b\x6a\x16\x79\x97\x03\xe7\x62\x3e\x37\x6d\x17\x26\x5f\x1d\x57\x9f\xde\x65\xd9\x13\xf8\x64\x4d\x4e\x1c\x0b\x66\x36\x58\xdc\x25\x03\x9a\xf4\x0a\xc5\x77\x73\x6b\xaa\xcf\xbf\x82\x4f\xe6\x57\xb0\xbc\xfb\x04\x6f\x04\x6c\x02\x2d\x41\xcc\x81\xb4\xbd\xb0\xad\x7f\x2c\x4c\x29\x61\xf9\x8f\x52\xe4\xa3\x08\x4a\x4d\x22\x4f\x2a\x68\xcc\x6c\xc7\x9d\xeb\xc9\xa6\x2d\x0d\xca\xa1\x5b\xf8\xea\xa3\xf0\xe4\x67\xb4\x23\xfe\x1f\x2c\xd9\x5c\xe3\xa3\x69\x7c\xd2\x1a\xbd\x6d\x39\x72\x59\xb3\x39\xf8\xc3\x99\xd9\xf0\xb3\x3e\xb1\xc6\x8d\xa2\x83\xd4\xb0\x65\x8f\xcd\x2f\xea\xe4\x52\xf4\xd2\x32\x1c\x6b\x91\x73\x45\x3c\x6a\x6a\x74\xd6\x25\xa7\x02\xe3\x32\x51\x15\xf1\xea\xb2\x77\x29\x16\x94\x5c\xd4\x04\x10\x2d\x13\x32\xb2\x00\xd1\xf2\x58\x69\x91\x9c\xe6\xf1\xa0\x15\xb1\x31\xb8\x18\x00\xd3\xfe\x60\xd9\xe6\x7b\x8b\xd2\x60\x7c\x53\xaa\xc7\x8e\xe9\xbe\x8f\xf9\xfa\xdd\x7e\xf5\x26\x4f\x87\xf4\x6f\x18\x53\xe2\x05\x3e\x4e\xf2\x61\x3e\xfb\x27\xbc\x9d\xcd\xa7\xba\xfb\xde\x98\x4d\xef\xe6\xa6\xe3\x98\xe3\x64\xf7\xe1\xcd\x64\x66\x7c\x82\x8e\xf5\x2f\xf3\xfd\x9b\x1f\x50\xb1\x95\x0d\x6e\xac\xdb\x0a\x90\xac\x9e\x84\x1b\x61\xf2\xf9\xd9\xc0\x48\x68\x18\x73\xe8\x05\x31\xe5\xc7\x2b\x72\x10\xf3\x13\xa4\xbf\xa3\x5d\x8c\x0f\x97\xee\x35\xae\x0a\x34\xe1\x47\x0d\x9a\x1a\xa1\xb4\x41\xae\x13\xde\xf7\x46\x1f\xaa\x10\x9e\xf9\xa7\xf2\x5d\x29\x06\xc7\x3c\x18\xa1\x87\x12\xfe\xfe\x5c\x10\xaa\x4e\x29\x5d\xd0\xc9\xf3\xaa\x22\xb0\x82\x9a\x65\x1c\xbe\x9d\xcd\x4d\xeb\x83\x2d\x05\x6f\x4b\x82\x25\xbc\xa9\xa5\xc8\x00\xcc\xcd\x5b\x73\x6e\xda\x86\x99\x13\xe3\x1c\xba\x93\x05\x8e\xcd\x89\x99\x2c\x50\x77\x0c\x7d\x6c\x2a\x4b\xb6\x67\x40\x37\x5c\x6b\x66\x83\xe6\x52\x50\x41\xf8\x6a\x41\x50\x40\x4b\x91\xcc\xa0\xb4\x16\xce\x07\x47\xa5\xd0\x98\x0d\x2e\x39\xbd\xcb\xc0\xc3\x98\xaa\xc8\xbf\x42\x64\x45\xbe\x1f\x61\xc6\xda\x51\x35\x13\xc8\x31\xe0\xcd\xe9\x18\x90\xc6\x46\x15\xde\x48\xc4\x38\x64\x18\xd3\x22\x35\x72\x96\xb9\x29\x0c\xfe\x76\x35\x48\x35\x14\x5f\x61\x1c\xed\xd4\x23\xda\xd5\xe0\xa7\x05\x81\x6a\x12\xeb\x99\x43\x0f\x11\xa9\x54\x48\x91\xcd\xf6\x21\x0b\x50\xea\xe3\xc7\x92\xac\x9b\xf8\x4c\x13\xae\xab\x07\x71\x2a\xd3\x29\xe0\x53\xd9\x57\x18\xec\xa2\x9c\xb7\x87\xba\x8a\x3a\xc9\xc7\x63\x47\xa1\x0a\xeb\xec\xb3\x4c\x4a\xe2\x91\xee\x79\xd3\x64\x32\x39\x06\xbd\x80\xd0\x15\x62\xf8\xe8\x41\x23\xbd\x65\xc8\xa4\x9f\x4d\x8e\x12\xf2\x1a\xc4\xbc\xaf\x43\x68\xa6\x8e\xd6\x2b\x7f\x45\x82\x85\x98\xfa\x30\x0e\x7d\x19\xcb\x5d\x96\xcd\xf0\xb7\x18\x8b\x23\xfb\x19\xbc\x2c\xd3\xe1\x45\x24\xe4\x90\x91\x0d\x44\x6c\x2f\xa9\xc7\x79\x4b\x55\x34\x89\x23\xea\x59\x9a\x5e\x0a\xde\x59\x22\xe9\x0e\xd2\x15\x21\xa2\xe2\x62\x35\xfa\xcb\x34\x05\x95\x11\xb4\x1b\x4d\x39\x60\xb9\x42\xab\x2a\x30\x50\xb6\xcd\xeb\x14\xec\x14\xfb\x0a\xcc\x0a\xd3\x9f\x65\xb4\x69\x69\xd8\x35\x1f\x1b\x83\x98\xab\x07\xc6\x3c\xe7\xea\xd2\x42\x67\x27\x90\x17\x92\xcd\x10\xdf\x2c\xdb\xc0\xe7\x6a\x00\xf8\x0a\xaa\x03\xac\x11\x22\xf1\xdf\x0e\xe5\xe0\x00\x58\x57\x44\x1b\x33\xa4\x16\xfe\xc4\x5f\x0e\x4b\x5a\x9b\x92\x27\xdf\x9e\x8c\x2a\x60\x56\xe4\x5b\xa6\xa6\x1c\xc1\x44\xcd\xc7\xb3\x73\xa7\xc1\x70\x9d\xac\xf4\x94\xba\x2f\x3a\xaa\xe4\xad\xc0\x8b\x20\x1d\xed\xa5\x2f\xc1\x9c\xe3\xa5\x93\x3f\x85\xb8\xdc\x37\x79\x4e\x75\x0c\xe3\x15\xbc\xc7\x4f\x3d\xd5\xda\x4c\xdb\xf9\xf5\x56\xde\x39\xe0\x6f\x31\x89\xb0\x9f\xd4\x6e\x8a\x78\x1c\xe1\x86\x56\x8d\x72\x75\x32\xfa\xfd\xaa\xf0\xc8\xdb\x73\x3d\x92\xa5\xd3\x8e\x30\xfe\x9c\xd9\x13\x26\xb8\x13\xef\xc8\x99\x12\x51\xb8\x7a\x82\xad\x10\xf8\x62\xce\x5c\x33\x99\x84\xad\x47\xae\x85\x2a\x52\x4b\xb1\xa1\x8c\xff\x16\xf2\x22\x07\xfe\x0f\x39\x44\xf3\x04\x9c\x64\xb7\x6e\x9e\x72\xf4\xaf\xef\x5e\x4f\x65\xa0\x7a\x95\x9f\xe3\x7f\xfd\x0a\xbf\x1c\xb7\x2d\x97\xf7\x25\xa1\x86\x6b\x7b\xb9\xbc\xa3\x44\x69\x16\x87\x01\xa1\x62\x45\x62\xb7\x86\x0d\xf4\x04\x18\xb3\xe9\xd4\xb4\x5d\xf0\x2b\xc5\xd8\xc7\x3e\x58\x07\x11\x88\xf0\x1a\x47\xc9\xd9\x80\x01\x42\x01\xdf\x12\x06\xbc\x60\x17\xef\x29\x08\x22\x1f\x47\xbf\xd6\xcf\xc7\xce\x74\x09\xb4\x3a\x4a\x69\xd7\x6f\xdf\x0e\xea\x36\x08\x05\x1e\x62\x98\x81\x87\x2d\x8e\x30\xe0\x5b\x0c\x74\x67\x0a\x92\xaf\x0c\xf0\x00\xac\x30\x08\x51\xc4\xb0\x0f\x1e\x08\xdf\x02\x16\x62\xec\xd7\x8d\xce\xe2\x90\x77\xa4\x76\xd2\x61\xaf\xf0\xf8\x9e\x5e\xb0\x57\x19\x5a\xfa\xef\x1f\x4a\xd1\xa4\x4f\x15\x86\x53\x18\xed\x46\xd2\xa4\x82\x82\x2c\x15\x70\x53\x68\x2a\x27\x68\x50\xc2\xac\x67\x11\xb5\xaa\xf1\xff\x33\xb5\x23\x4d\xa6\x5a\x8c\x9d\xc8\xd2\xba\x07\xda\xd2\xc7\x2b\xc2\x21\xda\xcb\xae\xd1\x91\x6e\x4f\x01\x2e\x4e\xbc\x07\xc1\x5a\xa0\x89\x40\x72\x01\x25\x02\xbc\x52\xdb\x02\xdb\x92\xcf\xfc\xf1\xd7\xa2\x4e\xfb\xcf\xb4\x25\x83\xb2\x8b\xb1\x1d\xe2\x98\x71\x58\x6f\x4c\xf5\xd9\x05\x51\x02\xb9\xb2\x43\xdd\xb2\x52\x51\x55\x64\xc7\x9f\x55\xca\x5b\x27\xf4\xc3\xd2\xf5\x50\xaf\xa3\x30\x3f\x11\x3b\xd9\xd0\xa5\x69\xdb\xe2\x83\x3d\x94\x42\xef\x38\x89\xfc\x44\x4f\x29\x05\x3a\x0e\x36\x44\x2c\xa7\x85\x50\x89\xea\x97\x5d\xe1\xc4\x63\xa5\x6e\x67\xc5\x5e\xfb\xdc\xdd\xce\x77\x14\xed\xb1\xfa\x9e\xe6\xfa\x4d\xfd\x65\x9c\x78\x6d\x95\xcc\xe9\xdc\x5e\x51\xa3\x42\x79\xb2\xcc\x0e\x2d\xd7\x8a\x59\x70\x79\x09\x46\xe0\x12\x18\x38\xe2\x64\x4d\x3c\xc4\xb1\xfb\x14\xe2\x21\xb8\x06\x97\xc0\xe1\x11\x46\xfb\xe4\xef\xf4\x02\x39\x5e\xed\x08\xdb\xe2\xe8\x59\x33\xcc\x71\x51\x61\x8e\x08\x18\xc9\x44\xad\x94\xc4\x55\x66\x93\x61\x62\x61\x9f\x91\x4d\xb9\x7d\x75\xde\xbe\x79\x85\x9d\x52\x2b\x9c\xf9\x95\xcb\x81\xd1\xd9\xa7\xf1\xae\x2f\x0b\xf2\xc6\x7e\x7f\xef\xad\x04\xd5\x87\x88\xc9\x43\xfb\xd4\x1c\x5b\x8b\xa9\x38\xfc\xb6\xc9\xfd\x5b\x1c\x3e\x0a\xc1\xe2\x3b\xf1\x21\xe2\x30\x7b\xba\x78\x2c\xd0\xbb\xca\xe1\xf5\x1a\x7b\x9c\x7c\xc7\x5d\x6b\x6a\x7a\x6b\x7f\x79\x09\x74\xdf\x27\x89\x4f\xd1\x0e\xac\x09\xde\xf9\xb2\x84\x62\xc4\x9e\x00\xa1\x3e\x7e\x24\x74\x93\xd4\x5c\x26\x22\x18\x24\xf1\xcf\x52\x6a\x11\xf3\x6d\x10\x29\x97\x0a\xa3\xeb\x41\x4e\x25\xe4\xa1\x84\x34\x7a\xc1\x0b\x28\x4f\x8e\x84\xe5\x5b\x9a\xd1\xef\xd7\xe7\xbe\x8d\x61\x90\x42\x06\xd7\xf0\xa1\xdb\x75\xc2\x0e\xd1\x4d\x8c\x36\x7d\xdc\x10\xf1\x6d\xbc\x5f\x51\x44\x76\xb2\x0d\xac\xbe\xc1\x23\x7c\x57\x4e\x85\x13\x1e\xd1\xac\x31\x86\x5e\x1c\x25\x29\xfd\x94\xc2\xc3\x6f\x79\x63\x99\x30\xb8\x26\x3b\x8e\xa3\xae\x2d\xa7\x15\xf1\x21\xe3\x22\x33\xd5\x05\x67\xf2\xbf\xe8\x9e\x87\x43\x8e\xfd\x5f\x7e\xf2\xb7\x80\x4d\x14\x4c\x80\xdd\xe1\x9e\x8e\x10\x39\x40\xa5\x5a\x1f\xa1\x54\x28\xd5\x29\x4f\x51\x0e\xcc\xe4\x2e\x83\x5e\xd1\x45\x51\xeb\x40\xd9\xba\x97\xad\x2c\xaf\x64\x27\xd9\xae\xf6\xf1\x85\xed\x05\x25\xdf\xe2\xda\xbb\x16\xc5\x01\xc3\xb4\x02\x0f\x95\x02\xda\xf2\x70\x52\x28\x34\x54\xd8\x4f\xef\x5a\x4a\xa5\xa0\xe5\xaa\x45\x95\x19\x0c\x44\xed\x54\xfe\x25\x50\xa6\x4a\xbe\x8c\xba\x3f\x6a\x04\xad\xba\xd5\x27\xbc\xe2\x91\xcb\xe9\x72\xab\x21\x24\x3b\x36\xac\x84\xac\xb8\x8e\xd2\x79\xf1\xe0\xb3\x5a\x06\x5a\xc6\xdd\x10\xdf\x91\x69\xab\x29\x39\xdc\x22\x6c\x23\xb9\x54\x41\x8d\xe4\x05\xd0\xf0\xe2\xa2\x51\x54\x4f\x81\x5b\xcb\x20\x5c\x1b\xfd\x6d\xd4\x70\xdf\x25\x5d\x22\xc1\xda\x15\x58\xad\x95\xb1\xbb\x65\xc8\x24\xc7\x57\xad\xc0\xda\xb6\xcd\x92\x30\xa9\xa5\x78\x29\x67\xf2\xa2\x99\x33\x8b\xc3\x30\x88\x0e\xf4\x59\x52\x01\xec\xc3\xde\x39\x6a\xaa\xba\x3b\x09\x38\xbb\x3e\xf4\xde\x02\xea\xca\xff\x1b\xab\x40\xe6\xf3\xf6\x3a\xb0\xbe\x87\xb9\xdf\x73\x64\x6d\xd8\x89\x5e\x31\x58\x09\x76\xd6\x25\x91\xcb\x33\x24\x7e\xdb\x1c\x6b\x03\x79\x7b\x75\x6b\xe9\xcf\x4b\x3f\x6b\xa5\x7e\x82\xf2\x39\x88\x79\x7e\x89\xdd\xda\x85\x78\xd1\x69\x1a\xd3\x7b\x1a\x3c\x50\x78\xe4\xa0\x7b\xd2\x49\xb3\xa0\xb2\xf5\x5f\x6a\x11\x96\xbe\x13\xea\xc8\xd9\xfa\xfc\x55\xcd\x9f\x91\xa7\x27\x5e\x88\xf7\x74\xc2\xaa\x02\x43\xba\xcb\x5e\x9d\x25\x56\xe9\x8c\x68\xeb\xd4\x1b\x47\x15\x7b\x2d\x74\xa6\x2c\x35\x68\x21\xa2\xea\x64\x82\x1f\x76\xeb\xae\x64\xf1\x42\x18\x94\x5c\xa2\xfe\xf8\xba\x40\x86\xe6\x21\x8d\x8d\x81\x76\x71\xf7\xf1\x95\xbe\xc6\x41\x61\xb8\x4b\x68\xa9\xf8\xa5\x02\x47\x3c\x3e\xf4\x46\x39\x0c\xa1\xfa\xc3\x82\xda\x1d\x3b\xe2\x28\x17\x68\xf8\x8e\x42\xd2\xf2\xb9\x31\xbc\x65\x89\x20\xa2\x9d\xf6\x13\x38\xf8\xbf\x01\x00\x00\xff\xff\x5e\x72\xde\x1b\xad\x3b\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 15277, mode: os.FileMode(420), modTime: time.Unix(1524369656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

