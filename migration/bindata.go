// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x73\xdb\xb8\x15\x7e\xf7\xaf\xc0\xec\xcb\x52\x53\x79\xc6\xf2\x26\xdb\x74\x3a\x79\xa0\x29\x3a\xe1\x46\xa2\x5c\x91\x4a\x93\xbe\x40\x10\x09\x49\xa8\x29\x50\x21\xc0\xc4\xea\xaf\xef\x10\xe0\x05\xbc\x49\x94\xcc\x74\xe3\x4c\x1f\x6d\x7e\x38\xb8\x9d\xf3\x9d\x0f\x38\xd0\xf5\x35\xf8\xcb\x8e\x6c\x22\xc4\x31\x58\xec\xaf\xae\xd4\xbf\x1d\x8e\x38\xde\x61\xca\xef\xf0\x86\xd0\x2b\x63\x6e\xea\xae\x09\x1c\xe3\xbd\x39\xd5\x81\x75\x0f\xec\x99\x0b\xcc\x4f\x96\xe3\x3a\x60\xe9\x6d\x11\xa1\x5f\x62\x1c\x1d\x96\x60\x6c\xde\xeb\x8b\x89\x0b\x8c\xf7\xfa\x5c\x37\x5c\x73\x0e\x1c\xd3\x05\x01\xe2\x84\x8e\x80\x31\x9b\x4c\x12\x33\xf2\x4f\xb8\xc1\x14\x47\x28\x80\x1e\x01\x7f\x6f\xee\xdc\xa4\x7e\x97\x61\xb9\xfa\xdd\xc4\xac\x8e\x6a\x15\x84\xde\xe3\xf2\x4a\xbb\x02\x00\x80\x25\xf1\x97\xc0\x31\xe7\x96\x3e\x19\x5e\xc9\xff\xac\x08\x67\x4b\xf0\x51\x9f\x27\x43\xd5\x6e\x6f\x06\xa2\xb5\xbd\x98\x4c\x86\x12\x20\xa6\xf5\x2d\x8c\x1e\x0b\xd4\x5f\x6f\x06\xe7\xce\xac\x6a\x34\xa4\x6b\x12\xed\x10\x27\x21\x65\x4b\x60\xd9\xae\xf9\xce\x9c\x83\x85\xed\x58\xef\x6c\x73\x5c\x85\xfb\x64\xbd\x26\x5e\x1c\xf0\x64\x69\x67\x8b\xbb\x89\xa9\x8d\xde\x0c\xdf\xd4\xc6\xba\x45\x6c\xdb\xcb\x30\x41\x66\x10\x93\xcd\x96\x2f\xc1\x9d\xf5\xce\xb2\xdd\xd6\xf1\xed\xb0\x4f\x10\x85\x9c\xec\x70\x07\x6c\xf4\x18\x60\x18\x85\x21\xef\x73\x45\x29\xda\x61\xe8\x05\x88\xec\xfa\x37\x1d\x52\xef\xf4\xbc\xf6\x11\xfe\x4a\xc2\x98\x41\xe1\x71\xf0\xb9\x5b\x91\xf5\x8d\x9f\x78\xbf\x16\xa5\x31\x46\xfe\x73\x7a\x4a\x1c\x45\x1b\xdc\xeb\x52\xca\xce\x3b\xf9\xc9\x57\x1c\x31\x12\xd2\xae\x38\xb8\xc5\x4f\xc5\x48\x47\xcf\x1e\x29\x8f\x10\x65\xc8\xe3\xc2\x34\x62\x5b\xcc\x96\xc0\x35\x3f\xb9\xf5\xcf\x0c\xee\xa3\xd0\xc3\x8c\x61\x7f\x09\x5c\xcb\xfe\x6c\xd9\xae\x36\x1a\xe4\x1c\x78\xa3\x98\x4e\xa3\x3f\xc2\x88\x27\xe8\xb1\xee\x9a\xae\x35\x35\x8b\xb8\xcb\x89\x73\x31\x9f\x9b\xb6\x0b\x93\xaf\x8e\xab\x4f\x1f\xb2\xe8\x09\x7d\xb2\x26\x67\xb6\x05\x33\x1b\x2c\x1e\x92\x06\x4d\x76\x85\xe1\x87\xb9\x35\xd5\xe7\x9f\xc1\x07\xf3\x33\x58\x3e\x7c\x80\x77\x82\x36\x81\x96\x30\xe6\x40\xf6\xbd\xb0\xad\x7f\x2c\x4c\x89\xb0\xfc\x27\x09\x79\x2f\x9c\x52\x93\xcc\x93\x02\x8d\x99\xed\xb8\x73\x3d\xd9\xb4\xa5\x41\x39\x74\x8b\xb5\x7a\x2f\x56\xf2\x23\x0a\x88\xff\x07\x4b\x36\xd7\x78\x6f\x1a\x1f\xb4\xc6\xd5\xb6\x1c\x39\xad\xd9\x1c\xfc\xe1\xcc\x6c\xf8\x51\x9f\x58\xe3\x46\xe8\x20\xed\xd8\xb2\xc7\xe6\x27\x75\x70\x29\x7b\x69\x19\x8f\xb5\xe0\x5c\xe1\x8f\x9a\xea\x9d\x75\xe4\x54\x70\x5c\x06\x55\x19\xaf\x8e\x7d\x48\xb9\xa0\xb4\x44\x4d\x04\xd1\x32\x20\x23\x73\x10\x2d\xf7\x95\x16\xe4\x34\xf7\x07\xad\xf0\x8d\xc1\xd5\x00\x98\xf6\x3b\xcb\x36\xdf\x5a\x94\x86\xe3\xbb\x52\x3e\x76\x4c\xf7\x6d\xcc\xd7\x6f\x76\xab\x57\x79\x38\xa4\x7f\xc3\x98\x12\x2f\xf4\x71\x12\x0f\xf3\xd9\x3f\xe1\xfd\x6c\x3e\xd5\xdd\xb7\xc6\x6c\xfa\x30\x37\x1d\xc7\x1c\x27\xbb\x0f\xef\x26\x33\xe3\x03\x74\xac\x7f\x99\x6f\x5f\x7d\x87\x8c\xad\x6c\x70\x63\xde\x56\x88\x64\x75\x10\xcb\x08\x93\xcf\xcf\x26\x46\x42\xf7\x31\x87\x5e\x18\x53\x7e\x3a\x23\x87\x31\x3f\x03\xfd\x15\x05\x31\x3e\x9e\xba\xd7\xb8\x0a\x68\xe2\x8f\x1a\x35\x35\x52\x69\x03\xae\x13\xdf\xf7\x26\x1f\xaa\x14\x9e\xad\x4f\xe5\xbb\x92\x0c\x4e\xad\x60\x84\xbe\x95\xf8\xf7\xc7\xa2\x50\x75\x48\xe9\x84\xce\x1e\x57\x95\x81\x15\xd6\x2c\xf3\xf0\xfd\x6c\x6e\x5a\xef\x6c\x09\xbc\x2f\x01\x4b\x7c\x53\x0b\x91\x01\x98\x9b\xf7\xe6\xdc\xb4\x0d\x33\x17\xc6\x39\x75\x27\x13\x1c\x9b\x13\x33\x99\xa0\xee\x18\xfa\xd8\x54\xa6\x6c\xcf\x80\x6e\xb8\xd6\xcc\x06\xcd\xa9\xa0\xc2\xf0\xd5\x84\xa0\x90\x96\x82\xcc\xa8\xb4\xe6\xce\x47\x5b\xa5\xd4\x98\x35\x2e\x2d\x7a\x97\x86\xc7\x39\x55\xc1\xff\x84\xcc\x8a\x7c\x3f\xc2\x8c\xb5\xb3\x6a\x06\xc8\x39\xe0\xd5\xf9\x1c\x90\xfa\x46\x95\xde\x48\xc4\x38\x64\x18\xd3\x22\x34\x72\x95\xb9\x29\x3a\xfc\xed\x66\x90\x5a\x28\xbe\xc2\x38\x0a\xd4\x23\xda\xcd\xe0\x87\x25\x81\x6a\x10\xeb\xd9\x82\x1e\x13\x52\x29\x48\xc1\x66\xfb\x90\x39\x28\xf5\xf1\x53\x09\xeb\x26\x6b\xa6\x89\xa5\xab\x3b\x71\x8a\xe9\xe4\xf0\x29\xf6\x27\x74\x76\x91\xce\xdb\x5d\x5d\x65\x9d\xe4\xe3\xa9\xa3\x50\x45\x75\xf6\x99\x26\xa5\xf0\x48\xf7\xbc\x69\x30\x19\x8e\x41\x2f\x24\x74\x85\x18\x3e\x79\xd0\x48\x6f\x19\x32\xf4\xb3\xc5\x51\x22\x5e\xc3\x98\xf7\x75\x08\xcd\xcc\xd1\x7a\xe6\xaf\x20\xd8\x1e\x53\x1f\xc6\x7b\x5f\xfa\x72\x97\x69\x33\xfc\x25\xc6\xe2\xc8\x7e\x81\x2e\xcb\x6c\x78\x11\xd9\x73\xc8\xc8\x06\x22\xb6\x93\xd2\xe3\xb2\xa9\x2a\x96\xc4\x11\xf5\x22\x4b\x2f\x85\xef\x2c\x11\x74\x47\xe5\x8a\x80\xa8\xbc\x58\xf5\xfe\xb2\x4c\x41\x65\x06\xed\x26\x53\x8e\xf4\x5c\x91\x55\x15\x1a\x28\xf7\xcd\xeb\x12\xec\x9c\xfe\x15\x9a\x15\x5d\x7f\x94\xde\xa6\xa5\x6e\xd7\x7c\x6c\x0c\x63\xae\x1e\x18\xf3\x98\xab\xa3\x85\xcd\x4e\x24\x2f\x90\xcd\x14\xdf\x8c\x6d\xd0\x73\x35\x02\xfc\x09\xb2\x03\xac\x09\x22\xf1\xdf\x0e\xe9\xe0\x08\x59\x57\xa0\x8d\x11\x52\x73\x7f\xe2\x2f\x87\x25\xab\x4d\xc1\x93\x6f\x4f\x26\x15\x30\x2b\xe2\x2d\x33\x53\xf6\x60\xa2\xc6\xe3\xc5\xb1\xd3\xd0\x71\x5d\xac\xf4\x14\xba\x2f\xda\xab\xe4\xad\xc0\x8b\x10\x1d\xed\xa9\x2f\xe1\x9c\xd3\xa9\x93\x1f\xf6\xb8\x5c\x37\x79\x4e\x76\xdc\xc7\x2b\xf8\x88\x0f\x3d\xe5\xda\xcc\xda\xe5\xf9\x56\xde\x39\xe0\x2f\x31\x89\xb0\x9f\xe4\x6e\x8a\x78\x1c\xe1\x86\x52\x8d\x72\x75\x32\xfa\xfd\xa6\x58\x91\xd7\x97\xae\x48\x16\x4e\x01\x61\xfc\x39\xa3\x27\x4c\x68\x27\xde\x51\x33\x25\x50\xb8\x3a\xc0\x56\x0a\x7c\x31\x67\xae\x99\x0c\xc2\xd6\x23\xd7\x42\x85\xd4\x42\x6c\x28\xfd\xbf\x45\xbc\xc8\x86\xff\x43\x0d\xd1\x3c\x00\x27\xd9\xad\xbb\x43\xce\xfe\xf5\xdd\xeb\x29\x0d\x54\xaf\xf2\x73\xfe\xaf\x5f\xe1\x97\xfd\xb6\xe5\xf2\xbe\x04\x6a\xb8\xb6\x97\xd3\x3b\x29\x94\x66\xf1\x3e\x24\x54\xcc\x48\xec\xd6\xb0\x41\x9e\x00\x63\x36\x9d\x9a\xb6\x0b\x7e\xa5\x18\xfb\xd8\x07\xeb\x30\x02\x11\x5e\xe3\x28\x39\x1b\x30\x40\x28\xe0\x5b\xc2\x80\x17\x06\xf1\x8e\x82\x30\xf2\x71\xf4\x6b\x53\x4f\xbc\xa3\xca\x92\x63\xff\x09\x4f\xd2\xe9\x5d\x77\x55\x2c\xa5\xff\xfe\xae\x6a\x49\xae\xa9\x22\x36\x8a\x4e\xbb\xe9\x25\x69\xa0\xd0\x2d\x45\xe4\x17\x96\xca\xb1\x12\x96\xe8\xe3\x59\x9a\xa9\xda\xf9\xff\x45\xd3\x89\x7a\x4f\xcd\xc7\xce\x14\x4c\xdd\x1d\x6d\xe9\xe3\x15\xe1\x10\xed\x64\x01\xe7\x44\xe1\xa5\xe0\x12\x27\xde\x81\x70\x0d\xf8\x16\x03\x41\xaa\x0c\xf0\x50\xf2\x48\xda\xb7\xa0\x99\xe4\x33\x7f\xfa\xb5\x48\x99\xfe\x33\xfb\x92\x4e\xd9\xa5\xb3\x00\x71\xcc\x38\xac\xd7\x88\xfa\x2c\x48\x28\x8e\x5c\xd9\xa1\x6e\x51\xa9\x98\x2a\xa2\xe3\xcf\xca\xaa\xad\x03\xfa\x6e\xe1\x7a\xac\xec\x50\x74\x3f\x11\x3b\xd9\x50\x30\x69\xdb\xe2\xa3\xe5\x8c\xc2\xee\x38\xf1\xfc\xc4\x4e\x29\x04\x3a\x36\x36\x84\x2f\xa7\x89\x50\xf1\xea\x97\x9d\xe1\xc4\xbb\xa1\x6e\xc7\xb6\x5e\x4b\xce\xdd\x8e\x5a\x14\xed\xb0\xfa\xb4\xe5\xf6\x55\xfd\x91\x9a\x78\xf8\x94\x8c\xe9\xd2\xb2\x4d\xa3\x41\x79\xc8\x53\xce\x0f\x39\x0a\x5c\x5f\x83\x11\xb8\x06\x06\x8e\x38\x59\x13\x0f\x71\xec\x1e\xf6\x78\x08\x6e\xc1\x35\x70\x78\x84\xd1\x2e\xf9\x1b\xb0\x6d\x18\x07\x3e\xa0\x21\x07\x2b\x0c\x38\xa1\x07\x42\x39\x08\xc8\x8e\x70\x06\x10\x03\xab\x30\x0c\x00\xfb\x12\xac\x42\x12\xe0\x28\xbd\xfa\x8d\x57\x01\x61\x5b\x1c\x3d\x6b\x42\x39\x8d\x2a\x9a\x0f\x01\x23\x99\x97\xe5\x83\x6f\x84\x6f\xab\x83\xcf\x28\xb4\xe8\x9f\x91\x4d\xb9\xf0\x74\xd9\x36\x7b\x45\x3f\xa5\x22\x36\xf3\x2b\xc7\xfa\xd1\xc5\xe7\xe8\xae\x6f\x02\xf2\x92\x7c\x7f\x2f\xa5\x84\x48\x87\x88\xc9\xe3\xf6\xd4\x1c\x5b\x8b\xa9\x38\xb6\xb6\xe1\xfe\x2d\x8e\x0d\x05\xb0\xf8\x4e\x7c\x88\x38\xcc\x1e\x1d\x9e\x8a\x8b\xae\x38\xbc\x5e\x63\x8f\x93\xaf\xb8\x6b\x0a\x4e\xef\xdb\xaf\xaf\x81\xee\xfb\x24\x59\x53\x14\x80\x35\xc1\x81\x2f\x33\x2e\x46\xec\x00\x08\xf5\xf1\x13\xa1\x9b\x24\x45\x33\xe1\xf0\x20\x09\x17\x96\x2a\x91\x98\x6f\xc3\x48\xb9\x0e\x18\xdd\x0e\x72\xe5\x21\xaf\x29\x48\xe3\x2a\x78\x21\xe5\xc9\x61\xae\x7c\xbf\x32\xfa\xfd\xf6\xd2\x57\x2d\x0c\x52\xc8\xe0\x1a\x7e\xeb\x76\x11\x10\x20\xba\x89\xd1\xa6\x8f\xbb\x1d\xbe\x8d\x77\x2b\x8a\x48\x20\x0b\xb8\xea\xeb\x39\xc2\x83\x72\x28\x9c\xf1\xfc\x65\x8d\x31\xf4\xe2\x28\x09\xe9\x43\x4a\x0f\xbf\xe5\x25\x61\xc2\xe0\x9a\x04\x1c\x47\x5d\x8b\x45\x2b\xe2\x43\xc6\x45\x64\xaa\x13\xce\xf0\xbf\xe8\x9e\x87\xf7\x1c\xfb\xbf\xfc\xe0\xaf\xf8\x9a\x14\x9b\x20\xbb\xe3\xd5\x18\x01\x39\xa2\xbc\x5a\x9f\x8f\x54\x14\xd8\x39\x8f\x48\x8e\x8c\xe4\x21\xa3\x5e\x51\xff\x50\xf3\x40\xb9\x77\x2f\x9b\x59\x9e\xf8\xce\xea\xbb\x5a\x81\x17\x7d\x2f\x28\xf9\x12\xd7\x5e\xa4\x28\x0b\x30\x4c\x13\xf6\x50\xc9\xb7\x2d\x4f\x1e\x85\x41\x43\xa5\xfd\xf4\x96\xa4\x94\x0a\x5a\x2e\x49\x54\xcc\x60\x20\x52\xad\xf2\x2f\xc1\x32\x55\xad\x66\xd4\xd7\xa3\xa6\xe7\xaa\x5b\x7d\xc6\xfb\x1b\x39\x9d\x2e\x97\x20\x02\xd9\xb1\xd4\x24\xb0\xe2\x22\x49\xe7\xc5\x53\xcd\x6a\x1a\x68\x69\x77\x47\x7c\x47\x86\xad\xa6\xc4\x70\x0b\xd8\x46\x72\xaa\x42\x49\x69\xb7\xaf\x5f\x0f\x06\xc3\xab\xab\x46\xa8\x9e\x12\xb7\x96\x51\xb8\x36\xfa\xdb\xa8\xe1\xa6\x4a\x2e\x89\x24\x6b\x57\x70\xb5\x56\xe6\xee\x96\x26\x93\x9c\x5f\xb5\x82\x6b\xdb\x36\x4b\xd2\xa4\x96\xf2\xa5\x1c\xc9\x8b\x16\xda\x2c\xde\xef\xc3\xe8\x48\x85\x24\x05\x60\x1f\xf6\x2e\x69\x53\xd3\xdd\x45\xc0\xc5\xf9\xa1\xf7\xe2\x4d\xd7\xe3\x42\x63\x16\xc8\xd6\xbc\x3d\x0f\xac\x1f\x61\xbe\xee\x39\xb3\x36\xec\x44\xaf\x1c\xac\x38\x3b\xeb\x12\xc8\xe5\x11\x12\xbf\x6d\x8c\xb5\x86\xbc\x3d\xbb\xb5\x54\xd6\xe5\x3a\x6b\xa5\x4a\x80\xf2\x39\x8c\x79\x7e\xfd\xdc\x5a\x3f\x78\xd1\x61\x1a\xd3\x47\x1a\x7e\xa3\xf0\xc4\xb9\xf8\xac\x83\x69\x21\x65\xeb\xbf\xb1\x22\x2c\x7d\xe1\xd3\x51\xb3\xf5\xf9\x7b\x98\x3f\x23\x4e\xcf\xbc\x3f\xef\xe9\x84\x55\x25\x86\x74\x97\xbd\xba\x4a\xac\xca\x19\x51\x90\xa9\x97\x7c\x2a\xfd\xb5\xc8\x99\x32\x6a\xd0\x22\x44\xd5\xc1\x84\xdf\xed\x92\x5e\x89\xe2\x85\xe8\x50\x6a\x89\xfa\xb3\xe9\x82\x19\x9a\x9b\x34\xd6\x11\xda\xe1\xee\xd3\x4f\xfa\x8e\x06\xed\xf7\x41\x22\x4b\xc5\x6f\x0c\x38\xe2\xf1\xb1\xd7\xc5\xfb\x3d\x54\x7f\x12\x50\xbb\x92\x47\x1c\xe5\x80\x86\xef\x68\x4f\x5a\x3e\x37\xba\xb7\x4c\x11\x44\x54\xdf\x7e\x80\x05\xfe\x6f\x00\x00\x00\xff\xff\xdc\x70\xeb\x5a\x67\x3b\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 15207, mode: os.FileMode(420), modTime: time.Unix(1524257741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

