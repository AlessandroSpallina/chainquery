// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x73\xdb\xba\x15\xde\xfb\x57\x60\x17\x6a\x6a\xcf\x58\xbe\xe9\x6d\x3a\x9d\x2c\x68\x0a\xb6\x79\x23\x51\x2e\x49\xa5\x49\x37\x10\x4d\x42\x12\x6a\x0a\x54\x08\x30\xb6\xfb\xeb\x3b\x04\xf8\x00\x5f\x12\x65\x31\x6d\x9c\xe9\xce\x16\x3f\x9c\x83\xc7\x39\xdf\x79\x00\x17\x17\xe0\x4f\x5b\xb2\x8e\x3d\x8e\xc1\x62\x77\x76\xa6\xfe\xef\x70\x8f\xe3\x2d\xa6\xfc\x1a\xaf\x09\x3d\x33\x6c\xa8\xbb\x10\xb8\xfa\xf5\x14\x02\xf3\x06\x58\x73\x17\xc0\x2f\xa6\xe3\x3a\x60\xf9\x10\x46\xfe\xe3\xf2\x4c\x3b\x03\x00\x80\x25\x09\x96\xc0\x81\xb6\xa9\x4f\xcf\xcf\xe4\x2f\x0f\x84\xb3\x25\xf8\xac\xdb\xc6\x9d\x6e\x6b\x57\x97\x23\x31\xda\x5a\x4c\xa7\xe7\x12\xe0\x6f\x3c\x42\x9f\xa2\xf8\xb1\x44\xfd\xe5\x72\x04\xd2\x3f\x74\xc3\x85\x36\x70\xa0\x0b\x42\x8f\x13\x3a\x06\xc6\x7c\x3a\x4d\x67\x22\xff\x45\x6b\x4c\x71\xec\x85\xc8\x27\x0d\xa1\x11\x5d\x91\x78\xeb\x71\x12\x51\xb6\x04\xa6\xe5\xc2\x5b\x68\x83\x85\xe5\x98\xb7\x16\x9c\xd4\xe1\x01\x59\xad\x88\x9f\x84\xfc\x65\x09\x26\xd0\x30\x67\xfa\x54\x1b\x7f\x38\xff\xd0\x98\xec\xc6\x63\x9b\x41\xe6\x09\x72\x81\x98\xac\x37\x7c\x09\xae\xcd\x5b\xd3\x72\x3b\x27\xb8\xc5\x01\xf1\x28\xe2\x64\x8b\x7b\x60\xe3\xc7\x10\xa3\x38\x8a\xf8\x90\x5b\x4a\xbd\x2d\x46\x7e\xe8\x91\xed\xf0\xa2\x23\xea\x1f\x5e\xd7\x2e\xc6\xdf\x49\x94\x30\x24\x4c\x0e\x9d\x7a\x14\xb9\x6e\xfc\xcc\x87\x95\x28\x85\x31\xf2\xef\xc3\x4b\xe2\x5e\xbc\xc6\x83\x6e\xa5\x54\xde\xcb\x4e\xbe\xe3\x98\x91\x88\xf6\xc5\xa1\x0d\x7e\x2e\x67\x3a\x3e\x79\xa6\x3c\xf6\x28\xf3\x7c\x2e\x44\x7b\x6c\x83\xd9\x12\xb8\xf0\x8b\xdb\xfc\xcc\xd0\x2e\x8e\x7c\xcc\x18\x0e\x96\xc0\x35\xad\xaf\xa6\xe5\x6a\xe3\x11\x98\xc0\x1b\x7d\x31\x75\xc1\xa5\x22\x3a\x73\xff\x18\x7b\x3c\x45\x4f\x74\x17\xba\xe6\x0c\x96\x7e\x97\x0f\x32\x16\xb6\x0d\x2d\x17\xa5\x5f\x1d\x57\x9f\xdd\xe7\xde\x13\x05\x64\x45\x8e\x1c\x0b\xe6\x16\x58\xdc\xa7\x03\xda\xe4\x0a\xc1\xf7\xb6\x39\xd3\xed\xaf\xe0\x13\xfc\x0a\x96\xf7\x9f\xd0\xb5\xe0\x4d\xa0\xa5\x94\x39\x92\xba\x17\x96\xf9\xf7\x05\x94\x08\x33\x78\x96\x90\x3b\x61\x94\x9a\x64\x9e\x0c\x68\xcc\x2d\xc7\xb5\xf5\xf4\xd0\x96\x06\xe5\xc8\x2d\xf7\xea\x4e\xec\xe4\x67\x2f\x24\xc1\x1f\x2c\x3d\x5c\xe3\x0e\x1a\x9f\xb4\xd6\xdd\x36\x1d\xb9\xac\xb9\x0d\xfe\x70\xe6\x16\xfa\xac\x4f\xcd\x49\x2b\x74\x94\x29\x36\xad\x09\xfc\xa2\x4e\x2e\x63\x2f\x2d\xe7\xb1\x0e\x9c\x2b\xec\x51\x53\xad\xb3\x89\x9c\x09\x8e\xcb\xa1\x2a\xe3\x35\xb1\xf7\x19\x17\x54\xb6\xa8\x8d\x20\x3a\x26\x64\xe4\x06\xa2\x15\xb6\xd2\x81\x9c\x15\xf6\xa0\x95\xb6\x31\x3a\x1b\x01\x68\xdd\x9a\x16\xfc\x68\x52\x1a\x4d\xae\x4b\xd3\xb8\xd3\x6d\x07\xba\x1f\x13\xbe\xfa\xb0\x7d\x78\x5f\xb8\x43\xf6\x3f\x4a\x28\xf1\xa3\x00\xa7\xfe\x60\xcf\xff\x81\x6e\xe6\xf6\x4c\x77\x3f\x1a\xf3\xd9\xbd\x0d\x1d\x07\x4e\xd2\xd3\x47\xd7\xd3\xb9\xf1\x09\x39\xe6\x3f\xe1\xc7\xf7\x7f\x6b\x0f\xcc\x90\x06\xaf\x0e\xd9\xca\x01\xb7\x06\x6e\x85\x48\x1e\x5e\xc4\x36\xa2\xf4\xf3\xc9\xc4\x48\xe8\x2e\xe1\xc8\x8f\x12\xca\x0f\x87\xe4\x28\xe1\x47\xa0\xbf\x7b\x61\x82\x0f\xc4\xee\x15\x6e\x20\xda\x18\xa4\x41\x4e\xad\x64\xda\x82\xeb\xc5\xf8\x83\x25\x10\x75\x12\xcf\x77\xa8\xf6\x5d\x09\x07\x87\xf6\x30\xf6\x9e\x2a\x0c\xfc\x73\x91\xa8\x3a\xa5\x6c\x41\x47\xcf\xab\xce\xc1\x0a\x6f\x56\x99\xf8\x66\x6e\x43\xf3\xd6\x92\xc0\x9b\x0a\xb0\xc2\x38\x0d\x27\x19\x01\x1b\xde\x40\x1b\x5a\x06\x2c\x72\xe3\x82\xbc\xd3\x05\x4e\xe0\x14\xa6\x0b\xd4\x1d\x43\x9f\x40\x65\xc9\xd6\x1c\xe8\x86\x6b\xce\x2d\xd0\x1e\x0c\x6a\x1c\x5f\x0f\x09\x0a\x6d\x29\xc8\x9c\x4c\x1b\xe6\xbc\x77\x54\x46\x8e\xf9\xe0\xca\xa6\xf7\x19\xb8\x9f\x55\x15\xfc\x2f\xc8\xad\x5e\x10\xc4\x98\xb1\x6e\x5e\xcd\x01\x05\x07\xbc\x3f\x99\x03\x56\x24\x66\x1c\x31\x8c\x69\xe9\x13\x45\x82\xb9\x2e\x35\xfd\x76\x39\x2a\x7f\x46\x49\x1c\xaa\x75\x59\xf1\xed\xe7\x73\xfb\xba\xdb\xea\xf9\x16\xee\x4b\x9e\x32\x90\x82\xcd\x77\x7e\xff\x00\x37\xdd\x31\x4d\x6c\x5c\xd3\x76\x33\x4c\x2f\x3b\xcf\xb0\xbf\xa0\x8d\x8b\x38\xde\x6d\xe1\x2a\xd9\xa4\x1f\x0f\xd5\x40\xb5\x74\x73\xc8\xe8\x28\x33\x8e\xec\xe0\xdb\x26\x93\xe3\x18\xf2\x23\x42\x1f\x3c\x86\x0f\x56\x18\x59\x7f\x21\x47\x9f\x9c\x15\xa5\x59\x6b\x94\xf0\xa1\xaa\xcf\x5c\x1c\x6d\x06\xfc\x1a\x82\xed\x30\x0d\x50\xb2\x0b\xa4\x2d\xf7\x59\x36\xc3\xdf\x12\x2c\x6a\xf5\xd7\x24\x64\xb9\x10\x3f\x26\x3b\x8e\x18\x59\x23\x8f\x6d\x65\xca\xf1\xba\xb5\x2a\x92\x44\x71\xfa\x2a\x49\x6f\x85\xf5\x4c\xe1\x75\x7b\xd3\x14\x01\x51\xd9\xb1\x6e\xfe\xd5\xf4\xc4\xab\xf2\x68\xbf\xf4\x64\x8f\xe6\x5a\x3a\x55\xe3\x81\xaa\x6e\xde\x4c\xbd\x8e\xd1\xaf\xf0\xac\x50\xfd\x59\x9a\x9b\x96\xd9\x5d\x7b\xc1\x18\x25\x5c\x2d\x15\x0b\xa7\x6b\xa2\x85\xcc\x5e\x2c\x2f\x90\xbf\x2a\xc7\xa3\x46\x36\x23\x7e\xed\x41\xea\x7b\x28\xb7\x06\x6d\x35\xf3\x86\x0d\x93\x60\x79\x5e\x91\xda\xe6\x01\xc5\x79\xe4\x51\x1f\xb3\xd2\x69\x72\x31\x55\x33\x24\xaa\x53\xbd\xda\x01\x5a\x14\x37\xf3\x8e\x81\xfc\xef\x4d\x5b\x95\x2c\xea\xdf\x44\xea\xb0\x27\x80\xa5\xcc\x71\x38\x02\xf2\x97\x1d\xae\x5e\x7c\x9c\x12\xe3\x76\xc9\x03\x7a\xc4\x2f\x03\x45\xcc\x5c\xda\xeb\xa3\xa6\xec\x18\xe0\x6f\x09\x89\x71\x90\x46\x60\xea\xf1\x24\xc6\x2d\x77\x2d\x4a\xe3\x63\xfc\xfb\x65\xb9\x23\x7f\x7e\xed\x8e\xe4\xfe\x14\x12\xc6\x4f\x99\x3d\x61\x22\x05\xe2\x3d\x53\x9f\x14\x9a\x96\xfa\x9d\x1c\xf8\x66\xea\xa7\xb9\xf4\xc2\xce\xf2\x69\xa1\x42\x1a\x3e\x76\x2e\xed\xbf\x23\x05\x91\x03\xff\x8b\x99\x40\xfb\x04\x9c\xf4\xb4\xae\x5f\x0a\xfa\x6f\x9e\xde\x40\x71\xa0\xde\x8a\x2f\x02\x40\xb3\x05\x5f\xb5\xdb\x8e\xe6\x7b\x05\xd4\xd2\x76\x97\xcb\x3b\x98\xee\xcc\x93\x5d\x44\xa8\x58\x91\x38\xad\xf3\xe6\x39\x8e\x80\x31\x9f\xcd\xa0\xe5\x82\x77\x14\xe3\x00\x07\x60\x15\xc5\x20\xc6\x2b\x1c\xa7\x29\x3e\x03\x84\x02\xbe\x21\x0c\xf8\x51\x98\x6c\x29\x88\xe2\x00\xc7\xef\xda\x34\xf1\x9e\xb9\x92\x9c\xfb\x2f\x98\x2c\x65\xbd\xea\x7a\xb6\x94\xfd\xfc\x43\xd3\x25\xb9\xa7\x4a\xb6\x51\x2a\xed\x97\x30\x49\x01\x65\xe2\x52\x7a\x7e\x29\xa9\xea\x2b\x51\x85\x3e\x4e\x4a\x9a\xea\xca\xff\x9f\x35\x1d\xb8\xaf\x69\xd8\xd8\x91\x19\x53\x7f\x43\x5b\x06\xf8\x81\x70\xe4\x6d\xe5\x05\xcc\xa1\x7b\x93\x92\x4c\x9c\x64\x0b\xa2\x15\xe0\x1b\x0c\x04\xab\x32\xc0\x23\x49\x24\x99\x72\xc1\x33\xe9\x67\xfe\xfc\xae\x8c\x99\xc1\xa9\xca\xa4\x59\xf6\xd1\x16\x7a\x1c\x33\x8e\x9a\x77\x3c\x43\x5e\x28\x28\xa6\x5c\x3b\xa3\x7e\x7e\xa9\x88\x2a\xfd\xe3\x7f\x15\x57\x3b\x27\xf4\xc3\x1c\x76\xdf\xb5\x41\xa9\x7e\x2a\x4e\xb2\xe5\xc2\xa3\xeb\x88\xf7\x5e\x47\x94\x72\x27\xa9\xed\xa7\x72\x2a\x4e\xd0\x73\xb0\x21\x8c\x39\x0b\x85\x8a\x59\xbf\xed\x18\x27\x5e\xfe\xf4\xab\xdc\x06\xbd\x34\xee\x57\x6c\x51\x6f\x8b\xd5\xc7\x29\x57\xef\x9b\xef\xcc\xc4\xd3\xa5\x74\x4e\x03\x5d\xbb\x48\x81\xb2\xcc\x53\x2a\x88\x02\x05\x2e\x2e\xc0\x18\x5c\x00\x03\xc7\x9c\xac\x88\xef\x71\xec\xbe\xec\xf0\x39\xb8\x02\x17\xc0\xe1\x31\xf6\xb6\xe9\xff\x59\x53\x36\x79\x08\x09\xdb\xe0\xf8\xa4\x19\x16\xbc\xa8\xa4\x71\x1e\x30\xd2\x89\x9a\x01\x78\x22\x7c\x53\x9f\x4d\xce\x89\xa5\x7e\x46\xd6\xd5\x7b\xa1\xd7\x9d\x9b\x5f\xea\xe9\x7a\xd7\xb3\xf7\x66\xbd\xb8\xd8\x1e\xe4\xc5\x91\x90\x79\x71\x01\xf4\x20\x20\xa9\x6a\x2f\x04\x2b\x82\xc3\x40\x86\x07\xec\xb1\x17\x40\x68\x80\x9f\x09\x5d\xa7\xf1\x84\x89\xd3\x01\xe9\xd9\xb2\x2c\x70\x26\x7c\x13\xc5\x4a\xf5\x3a\xbe\x1a\x15\x81\x52\x56\xd5\x62\xb6\x33\x38\x31\x17\x33\xf5\x16\x3d\xa2\x3c\xad\x3d\xaa\xed\x80\xf1\xef\x57\xaf\x7d\x44\xc1\x10\x45\x0c\xad\xd0\x53\xbf\xba\x35\xf4\xe8\x3a\xf1\xd6\x43\xb4\x22\xf8\x26\xd9\x3e\x50\x8f\x84\xf2\xee\x50\x3d\x54\xc2\xc3\xea\x31\x1f\xf3\xd8\x62\x85\x31\xf2\x93\x38\xb5\xd7\x97\xcc\xf6\x7f\x1b\x95\xcb\x5d\x91\x90\xe3\xf8\x8d\xbe\xfd\x6a\xcb\x12\x84\x3f\xee\xef\xe4\x0b\xc8\x9e\x68\xdf\xf9\xe4\xa0\x16\xf5\x8f\x79\x78\xb0\x67\x26\xf7\x39\x3b\x88\xde\xb9\x4a\x55\x55\xed\x7e\xbe\xb2\x82\x6c\x8f\xd2\x5d\xbf\x92\x15\xba\x17\x94\x7c\x4b\x1a\xaf\x18\x94\x0d\x38\xcf\x82\xc4\xb9\xc2\xf1\x1d\x0f\xe5\x84\x40\x43\x65\xa6\xac\x36\xaf\xb0\x55\x47\x69\xae\x62\x46\x23\x41\xef\xca\x4f\x82\x2c\xea\xf9\x81\xd1\xdc\x8f\x46\x0e\x51\x3f\xea\x23\xde\x6c\xc8\xe5\xf4\x29\xbd\x05\xb2\xbd\xf2\xce\xfc\xa6\x0e\xd6\x33\xc2\xd3\x72\xea\xd3\xc6\x7f\x1d\xb7\x34\x24\xe4\x1c\x24\xc9\xb9\x82\xe3\xb4\x2a\xe7\x75\x0c\x99\x16\xbc\xa4\x95\x1c\xd5\xb5\x3b\x92\x5e\xb4\x8c\x67\xe4\x4c\xde\x74\x36\x95\xd0\x47\x1a\x3d\x51\x74\x20\xab\x1a\xf4\x5d\xf2\x90\xdd\xf2\xa3\x92\xb3\xfe\x7d\x10\xd1\xce\x42\x1e\x93\x8d\xe9\x32\x96\x76\xe2\xfe\xc5\xaa\x41\xf7\x40\xb7\x24\xdb\x76\xbf\x49\xc0\x75\xa6\x10\x1d\xb6\x66\x0f\xaf\xa6\xb8\x83\x29\xaa\xa8\x51\x07\xc7\xab\x93\x89\x7e\x58\xd7\x45\xf1\xa5\x85\x50\x28\x3c\xaa\xe5\x15\x5b\x79\x15\xda\x3e\xa4\xb5\x31\xd4\x0d\x77\x9f\x73\xf1\xcd\xce\xe3\x4f\xe1\xba\xff\x09\x00\x00\xff\xff\x43\xce\x00\xc5\x00\x33\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 13056, mode: os.FileMode(420), modTime: time.Unix(1521990035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

