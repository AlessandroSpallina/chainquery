// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x73\xdb\xba\x11\x7e\xf7\xaf\xc0\xdb\xa1\xa6\xf6\x4c\xe4\x93\x9e\xa6\xd3\xc9\x03\x4d\xc1\x36\x4f\x24\xca\x25\xa9\x34\xe9\x0b\x44\x93\x90\x84\x9a\x02\x15\x02\x8c\xed\xfe\xfa\x0e\x01\x5e\xc0\x9b\x44\x49\x4c\x7b\x9c\xe9\x9b\x2d\x2e\x76\x17\x8b\xdd\x6f\x2f\xc0\xd5\x15\xf8\xd3\x96\xac\x63\x8f\x63\xb0\xd8\x5d\x5c\xa8\xff\x3b\xdc\xe3\x78\x8b\x29\xbf\xc1\x6b\x42\x2f\x0c\x1b\xea\x2e\x04\xae\x7e\x33\x85\xc0\xbc\x05\xd6\xdc\x05\xf0\x8b\xe9\xb8\x0e\x58\x3e\x86\x91\xff\xb4\xbc\xd0\x2e\x00\x00\x60\x49\x82\x25\x70\xa0\x6d\xea\xd3\xcb\x0b\xf9\xcb\x23\xe1\x6c\x09\x3e\xeb\xb6\x71\xaf\xdb\xda\xf5\xbb\x91\x58\x6d\x2d\xa6\xd3\x4b\x49\xe0\x6f\x3c\x42\x9f\xa3\xf8\xa9\xa4\xfa\xcb\xbb\x11\x48\xff\xd0\x0d\x17\xda\xc0\x81\x2e\x08\x3d\x4e\xe8\x18\x18\xf3\xe9\x34\xd5\x44\xfe\x8b\xd6\x98\xe2\xd8\x0b\x91\x4f\x1a\x4c\x23\xba\x22\xf1\xd6\xe3\x24\xa2\x6c\x09\x4c\xcb\x85\x77\xd0\x06\x0b\xcb\x31\xef\x2c\x38\xa9\x93\x07\x64\xb5\x22\x7e\x12\xf2\xd7\x25\x98\x40\xc3\x9c\xe9\x53\x6d\xfc\xe1\xf2\x43\x43\xd9\x8d\xc7\x36\x83\xe8\x09\x72\x86\x98\xac\x37\x7c\x09\x6e\xcc\x3b\xd3\x72\x3b\x15\xdc\xe2\x80\x78\x14\x71\xb2\xc5\x3d\x68\xe3\xa7\x10\xa3\x38\x8a\xf8\x90\x26\xa5\xde\x16\x23\x3f\xf4\xc8\x76\x78\xd6\x11\xf5\x0f\xef\x6b\x17\xe3\xef\x24\x4a\x18\x12\x2e\x87\xce\x3d\x8a\x5c\x36\x7e\xe1\xc3\x72\x94\xcc\x18\xf9\xf7\xe1\x2d\x71\x2f\x5e\xe3\x41\x4d\x29\x85\xf7\xf2\x93\xef\x38\x66\x24\xa2\x7d\xe9\xd0\x06\xbf\x94\x9a\x8e\xcf\xd6\x94\xc7\x1e\x65\x9e\xcf\x05\x6b\x8f\x6d\x30\x5b\x02\x17\x7e\x71\x9b\x9f\x19\xda\xc5\x91\x8f\x19\xc3\xc1\x12\xb8\xa6\xf5\xd5\xb4\x5c\x6d\x3c\x02\x13\x78\xab\x2f\xa6\x2e\x78\xa7\xb0\xce\xc2\x3f\xc6\x1e\x4f\xa9\x27\xba\x0b\x5d\x73\x06\xcb\xb8\xcb\x17\x19\x0b\xdb\x86\x96\x8b\xd2\xaf\x8e\xab\xcf\x1e\xf2\xe8\x89\x02\xb2\x22\x47\xae\x05\x73\x0b\x2c\x1e\xd2\x05\x6d\x7c\x05\xe3\x07\xdb\x9c\xe9\xf6\x57\xf0\x09\x7e\x05\xcb\x87\x4f\xe8\x46\xe0\x26\xd0\x52\xc8\x1c\x49\xd9\x0b\xcb\xfc\xfb\x02\x4a\x0a\x33\x78\x91\x24\xf7\xc2\x29\x35\x89\x3c\x19\xa1\x31\xb7\x1c\xd7\xd6\xd3\x43\x5b\x1a\x94\x23\xb7\xb4\xd5\xbd\xb0\xe4\x67\x2f\x24\xc1\xef\x2c\x3d\x5c\xe3\x1e\x1a\x9f\xb4\x56\x6b\x9b\x8e\xdc\xd6\xdc\x06\xbf\x3b\x73\x0b\x7d\xd6\xa7\xe6\xa4\x95\x74\x94\x09\x36\xad\x09\xfc\xa2\x2a\x97\xa1\x97\x96\xe3\x58\x07\x9d\x2b\xfc\x51\x53\xbd\xb3\x49\x39\x13\x18\x97\x93\xaa\x88\xd7\xa4\x7d\xc8\xb0\xa0\x62\xa2\x36\x80\xe8\x50\xc8\xc8\x1d\x44\x2b\x7c\xa5\x83\x72\x56\xf8\x83\x56\xfa\xc6\xe8\x62\x04\xa0\x75\x67\x5a\xf0\xa3\x49\x69\x34\xb9\x29\x5d\xe3\x5e\xb7\x1d\xe8\x7e\x4c\xf8\xea\xc3\xf6\xf1\x7d\x11\x0e\xd9\xff\x28\xa1\xc4\x8f\x02\x9c\xc6\x83\x3d\xff\x07\xba\x9d\xdb\x33\xdd\xfd\x68\xcc\x67\x0f\x36\x74\x1c\x38\x49\x4f\x1f\xdd\x4c\xe7\xc6\x27\xe4\x98\xff\x84\x1f\xdf\xff\xad\x3d\x31\x43\x1a\x9c\x9c\xb2\x95\x03\x6e\x4d\xdc\x0a\x90\x3c\xbe\x0a\x33\xa2\xf4\xf3\xd9\xc0\x48\xe8\x2e\xe1\xc8\x8f\x12\xca\x0f\xa7\xe4\x28\xe1\x47\x50\x7f\xf7\xc2\x04\x1f\xc8\xdd\x2b\xdc\xa0\x68\x43\x90\x06\x38\xb5\x82\x69\x0b\x5d\x2f\xc4\x1f\xac\x80\xa8\x83\x78\x6e\xa1\xda\x77\x25\x1d\x1c\xb2\x61\xec\x3d\x57\x10\xf8\x8f\x05\xa2\xaa\x4a\xd9\x86\x8e\xd6\xab\x8e\xc1\x0a\x6e\x56\x91\xf8\x76\x6e\x43\xf3\xce\x92\x84\xb7\x15\xc2\x0a\xe2\x34\x82\x64\x04\x6c\x78\x0b\x6d\x68\x19\xb0\xa8\x8d\x0b\xf0\x4e\x37\x38\x81\x53\x98\x6e\x50\x77\x0c\x7d\x02\x95\x2d\x5b\x73\xa0\x1b\xae\x39\xb7\x40\x7b\x32\xa8\x61\x7c\x3d\x25\x28\xb0\xa5\x50\xe6\x60\xda\x70\xe7\xbd\xab\x32\x70\xcc\x17\x57\x8c\xde\x67\xe1\x7e\x54\x55\xe8\x7f\x42\x6c\xf5\x82\x20\xc6\x8c\x75\xe3\x6a\x4e\x50\x60\xc0\xfb\xb3\x31\x60\x45\x62\xc6\x11\xc3\x98\x96\x31\x51\x14\x98\xeb\x52\xd2\xaf\xef\x46\xe5\xcf\x28\x89\x43\xb5\x2f\x2b\xbe\xfd\xf1\xc2\xbe\x1e\xb6\x7a\x6e\xc2\x7d\xc5\x53\x46\xa4\xd0\xe6\x96\xdf\xbf\xc0\x4d\x2d\xa6\x09\xc3\x35\x7d\x37\xa3\xe9\xe5\xe7\x19\xed\x4f\xe8\xe3\x22\x8f\x77\x7b\xb8\x0a\x36\xe9\xc7\x43\x3d\x50\xad\xdc\x1c\x32\x3b\xca\x8a\x23\x3b\xf8\x36\x65\x72\x3a\x86\xfc\x88\xd0\x47\x8f\xe1\x83\x1d\x46\x36\x5f\xc8\xa9\xcf\xae\x8a\xd2\xaa\x35\x4a\xf8\x50\xdd\x67\xce\x8e\x36\x13\x7e\x8d\x82\xed\x30\x0d\x50\xb2\x0b\xa4\x2f\xf7\xd9\x36\xc3\xdf\x12\x2c\x7a\xf5\x53\x0a\xb2\x9c\x89\x1f\x93\x1d\x47\x8c\xac\x91\xc7\xb6\xb2\xe4\x38\x6d\xaf\x0a\x27\xd1\x9c\x9e\xc4\xe9\xad\xa0\x9e\x29\xa2\x6e\x6f\x99\x22\x48\x54\x74\xac\xbb\x7f\xb5\x3c\xf1\xaa\x38\xda\xaf\x3c\xd9\x23\xb9\x56\x4e\xd5\x70\xa0\x2a\x9b\x37\x4b\xaf\x63\xe4\x2b\x38\x2b\x44\x7f\x96\xee\xa6\x65\x7e\xd7\xde\x30\x46\x09\x57\x5b\xc5\x22\xe8\x9a\xd4\x82\x67\x2f\x94\x17\x94\x3f\x2b\xc6\xa3\x46\x35\x23\x7e\xed\x01\xea\x7b\x20\xb7\x46\xda\xea\xe6\x0d\x1f\x26\xc1\xf2\xb2\xc2\xb5\x2d\x02\x8a\xf3\xc8\xb3\x3e\x66\x65\xd0\xe4\x6c\xaa\x6e\x48\xd4\xa0\x3a\x39\x00\x5a\x04\x37\xeb\x8e\x81\xe2\xef\x4d\x7b\x95\x6c\xea\xdf\x44\xe9\xb0\x27\x81\xa5\xc8\x71\x38\x03\xf2\xd7\x1d\xae\x5e\x7c\x9c\x93\xe3\x76\xc9\x23\x7a\xc2\xaf\x03\x65\xcc\x9c\xdb\xe9\x59\x53\x4e\x0c\xf0\xb7\x84\xc4\x38\x48\x33\x30\xf5\x78\x12\xe3\x96\xbb\x16\x65\xf0\x31\xfe\xed\x5d\x69\x91\x3f\x9f\x6a\x91\x3c\x9e\x42\xc2\xf8\x39\xda\x13\x26\x4a\x20\xde\xb3\xf4\x49\x49\xd3\x56\xbf\x13\x03\xdf\x4c\xff\x34\x97\x51\xd8\xd9\x3e\x2d\x54\x92\x46\x8c\x5d\x4a\xff\xef\x28\x41\xe4\xc2\xff\x62\x25\xd0\xae\x80\x93\x9e\xd6\xcd\x6b\x01\xff\xcd\xd3\x1b\x28\x0f\xd4\x47\xf1\x45\x02\x68\x8e\xe0\xab\x7e\xdb\x31\x7c\xaf\x10\xb5\x8c\xdd\xe5\xf6\x0e\x96\x3b\xf3\x64\xc7\x7b\x56\x30\x92\xe3\x4f\x58\xc2\x64\x13\xe4\x7a\x0d\x93\xfd\xfc\x43\x8b\x18\x69\x53\xa5\x06\x28\x85\xf6\x2b\x63\x24\x83\xb2\x9c\x28\xe3\xb1\xe4\x54\xf5\xe0\xa8\x12\xd4\x67\x95\x32\x75\xe1\xff\xaf\x65\x0e\xdc\xa2\x34\x7c\xec\xc8\x3a\xa6\xbf\xa3\x2d\x03\xfc\x48\x38\xf2\xb6\xf2\x5a\xe4\xd0\x6d\x06\x30\xe6\xb3\x19\xb4\x5c\xf0\x8b\x93\x6c\x41\xb4\x02\x7c\x83\x81\xc0\x3a\x06\x78\x04\xf8\x86\x30\x90\x09\x07\xab\x28\x16\x9f\xf9\xcb\x2f\x65\x26\x0b\xce\x15\x26\xdd\xb2\x8f\xb4\xd0\xe3\x98\x71\xd4\xbc\x79\x19\x72\xcc\xaf\xb8\x72\xed\x8c\xfa\xc5\xa5\xc2\xaa\x8c\x8f\xff\x55\xb6\xeb\x54\xe8\x87\x05\xec\xbe\x61\x7e\x29\x7e\x2a\x4e\xb2\xe5\x1a\xa2\xeb\x88\xf7\x5e\x12\x94\x7c\x27\xa9\xef\xa7\x7c\x2a\x41\xd0\x73\xb1\x21\x9c\x39\x4b\x85\x8a\x5b\xbf\xed\x1c\x27\xde\xe3\xf4\xeb\xa7\x06\xbd\xca\xed\xd7\x02\x51\x6f\x8b\xd5\x27\x23\xd7\xef\x9b\xaf\xbf\xc4\x83\xa2\x54\xa7\x81\x2e\x43\x24\x43\xd9\x7c\x29\x75\x7d\x41\x05\xae\xae\xc0\x18\x5c\x01\x03\xc7\x9c\xac\x88\xef\x71\xec\xbe\xee\xf0\x25\xb8\x06\x57\xc0\xe1\x31\xf6\xb6\xe9\xff\xd9\xa8\x34\x79\x0c\x09\xdb\xe0\xf8\x2c\x0d\x0b\x5c\x8c\xf1\x0a\xc7\x98\xfa\x98\x01\x0f\x18\xa9\xa2\x66\x00\x9e\x09\xdf\xd4\xb5\xc9\x31\xb1\x94\xcf\xc8\xba\x7a\x5b\x73\xda\xb9\xf9\xa5\x9c\xae\xd7\x36\x7b\xef\xbb\x8b\xeb\xe6\x41\xde\x01\x09\x9e\x57\x57\x40\x0f\x02\x92\x8a\xf6\x42\xb0\x22\x38\x0c\x64\x7a\xc0\x1e\x7b\x05\x84\x06\xf8\x85\xd0\x75\x9a\x4f\x98\x38\x1d\x90\x9e\x2d\xcb\x12\x67\xc2\x37\x51\xac\xf4\x94\xe3\xeb\x51\x91\x28\x65\xaf\x2b\xb4\x9d\xc1\x89\xb9\x98\xa9\x77\xdb\x11\xe5\x69\x47\x50\x6d\xd2\xc7\xbf\x5d\x9f\xfa\xb4\x81\x21\x8a\x18\x5a\xa1\xe7\x7e\xdd\x64\xe8\xd1\x75\xe2\xad\x87\x18\x10\xf0\x4d\xb2\x7d\xa4\x1e\x09\xe5\x8d\x9e\x7a\xa8\x84\x87\xd5\x63\x3e\xe6\x09\xc4\x0a\x63\xe4\x27\x71\xea\xaf\xaf\x99\xef\xff\x3a\x2a\xb7\xbb\x22\x21\xc7\xf1\x1b\x7d\x91\xd5\x56\x25\x88\x78\xdc\x3f\x5f\x17\x24\x7b\xb2\x7d\xe7\x43\x80\x5a\xd6\x3f\xe6\x39\xc0\x1e\x4d\x1e\x72\x74\x10\x13\x6d\x15\xaa\xaa\xd2\xfd\x7c\x67\x05\xd8\x1e\x25\xbb\x7e\x51\x2a\x64\x2f\x28\xf9\x96\x34\xde\x16\x28\x06\xb8\xcc\x92\xc4\xa5\x82\xf1\x1d\xcf\xd7\x04\x43\x43\x45\xa6\xac\x63\xae\xa0\x55\x47\xc3\xac\xd2\x8c\x46\x02\xde\x95\x9f\x04\x58\xd4\xeb\x03\xa3\x69\x8f\x46\x0d\x51\x3f\xea\x23\x5e\x52\xc8\xed\xf4\x69\xbd\x05\x65\x7b\xe7\x9d\xc5\x4d\x9d\x58\xcf\x00\x4f\xcb\xa1\x4f\x1b\xff\x75\xdc\x32\x26\x90\x3a\x48\x90\x73\x05\xc6\x69\x55\xcc\xeb\x58\x32\x2d\x70\x49\x2b\x31\xaa\xcb\x3a\x12\x5e\xb4\x0c\x67\xa4\x26\x6f\xba\x9a\x4a\xe8\x13\x8d\x9e\x29\x3a\x50\x55\x0d\xfa\x5a\x98\xbf\x0c\xc5\xa9\x5f\x4d\x26\x26\x46\xc8\x63\x72\xf6\x5b\x26\xc6\x4e\xba\x7f\xb1\x6a\x06\x3d\x30\xfa\xc8\x6c\xe8\x37\xd1\xb4\x1e\xf6\x62\x88\xd5\x1c\x93\xd5\x04\x77\x84\x7d\x95\x6a\xd4\x01\xd8\xaa\x32\xc5\x63\x2c\xf5\x75\xe8\xf9\xcf\xb5\x0e\x0b\xae\x81\x7f\x7e\xe0\x3f\x38\x43\xa8\x1a\x94\xb3\xa1\x5c\x78\x3e\xc4\xed\x18\x21\x75\x0e\x7d\xdf\xd0\x5c\xe7\x3f\x01\x00\x00\xff\xff\xbf\x74\xeb\xd5\xe0\x32\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 13024, mode: os.FileMode(420), modTime: time.Unix(1521943138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

