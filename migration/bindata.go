// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5d\x73\xdb\xba\xd1\xbe\xf7\xaf\xc0\x9c\x9b\x50\xf3\xda\x33\x56\x4e\xde\xd3\x74\x3a\xb9\xa0\x29\xda\xe6\x89\x44\xb9\x12\x95\x26\xbd\x81\x20\x12\x92\x50\x53\x20\x43\x80\xb1\xdd\x5f\xdf\x21\xc0\x0f\xf0\x4b\xa2\x24\xa6\x89\x33\xbd\x8b\xc5\xc5\xe2\x6b\xf7\xd9\x67\x77\x91\xab\x2b\xf0\x7f\x3b\xb2\x89\x10\xc7\x60\x11\x5e\x5c\xa8\x7f\xcf\x39\xe2\x78\x87\x29\xbf\xc1\x1b\x42\x2f\x8c\x99\xa9\x3b\x26\x70\xf4\x9b\xb1\x09\xac\x5b\x60\x4f\x1d\x60\x7e\xb6\xe6\xce\x1c\x2c\x57\x7e\xe0\x3e\x2e\x2f\xb4\x0b\x00\x00\x58\x12\x6f\x09\xe6\xe6\xcc\xd2\xc7\x97\x17\xf2\x97\x15\xe1\x6c\x09\x3e\xe9\x33\xe3\x5e\x9f\x69\x6f\xaf\x07\x62\xb4\xbd\x18\x8f\x2f\xa5\x80\xbb\x45\x84\x3e\x05\xd1\x63\x21\xf5\x97\xeb\x01\x48\xfe\xa1\x1b\x8e\x39\x03\x73\xd3\x01\x3e\xe2\x84\x0e\x81\x31\x1d\x8f\x93\x95\xc8\x3f\xe1\x06\x53\x1c\x21\x1f\xba\xa4\xa6\x34\xa0\x6b\x12\xed\x10\x27\x01\x65\x4b\x60\xd9\x8e\x79\x67\xce\xc0\xc2\x9e\x5b\x77\xb6\x39\xaa\x8a\x7b\x64\xbd\x26\x6e\xec\xf3\x97\x25\x18\x4d\x17\x37\x63\x53\x1b\xbe\xbf\x7c\x5f\x5b\xeb\x16\xb1\x6d\x2f\xcb\x04\x99\x42\x4c\x36\x5b\xbe\x04\x37\xd6\x9d\x65\x3b\xad\xeb\xdb\x61\x8f\x20\x0a\x39\xd9\xe1\x0e\xb2\xd1\xa3\x8f\x61\x14\x04\xbc\xcf\x13\xa5\x68\x87\xa1\xeb\x23\xb2\xeb\x5f\x75\x40\xdd\xc3\xfb\x0a\x23\xfc\x8d\x04\x31\x83\xc2\xe2\xe0\xb9\x57\x91\xcd\x8d\x9f\x79\xbf\x1a\xa5\x32\x46\xfe\x7d\x78\x4b\x1c\x45\x1b\xdc\xeb\x51\xca\xc9\x3b\xd9\xc9\x37\x1c\x31\x12\xd0\xae\x72\x70\x8b\x9f\x8b\x95\x0e\xcf\x5e\x29\x8f\x10\x65\xc8\xe5\x42\x35\x62\x5b\xcc\x96\xc0\x31\x3f\x3b\xf5\xcf\x0c\x86\x51\xe0\x62\xc6\xb0\xb7\x04\x8e\x65\x7f\xb1\x6c\x47\x1b\x0e\xc0\xc8\xbc\xd5\x17\x63\x07\x5c\x2b\xaa\x53\xef\x8f\x30\xe2\x89\xf4\x48\x77\x4c\xc7\x9a\x98\x85\xdf\x65\x83\x8c\xc5\x6c\x66\xda\x0e\x4c\xbe\xce\x1d\x7d\xf2\x90\x79\x4f\xe0\x91\x35\x39\x72\x2c\x98\xda\x60\xf1\x90\x0c\x68\xd2\x2b\x14\x3f\xcc\xac\x89\x3e\xfb\x02\x3e\x9a\x5f\xc0\xf2\xe1\x23\xbc\x11\xb0\x09\xb4\x04\x31\x07\x72\xee\x85\x6d\xfd\x7d\x61\x4a\x09\xcb\x7b\x96\x22\xf7\xc2\x28\x35\x89\x3c\xa9\xa0\x31\xb5\xe7\xce\x4c\x4f\x2e\x6d\x69\x50\x0e\x9d\xe2\xac\xee\xc5\x49\x7e\x42\x3e\xf1\xfe\x64\xc9\xe5\x1a\xf7\xa6\xf1\x51\x6b\x3c\x6d\x6b\x2e\xb7\x35\x9d\x81\x3f\xe7\x53\x1b\x7e\xd2\xc7\xd6\xa8\x51\x74\x90\x4e\x6c\xd9\x23\xf3\xb3\xba\xb8\x14\xbd\xb4\x0c\xc7\x5a\xe4\x1c\x61\x8f\x9a\x6a\x9d\x75\xc9\x89\xc0\xb8\x4c\x54\x45\xbc\xba\xec\x43\x8a\x05\xa5\x23\x6a\x02\x88\x96\x05\x19\x99\x81\x68\xb9\xad\xb4\x48\x4e\x72\x7b\xd0\x0a\xdb\x18\x5c\x0c\x80\x69\xdf\x59\xb6\xf9\xc1\xa2\x34\x18\xdd\x14\xa6\x71\xaf\xcf\xe6\xa6\xf3\x21\xe6\xeb\xf7\xbb\xd5\xbb\xdc\x1d\xd2\xbf\x61\x4c\x89\x1b\x78\x38\xf1\x87\xd9\xf4\x1f\xf0\x76\x3a\x9b\xe8\xce\x07\x63\x3a\x79\x98\x99\xf3\xb9\x39\x4a\x6e\x1f\xde\x8c\xa7\xc6\x47\x38\xb7\xfe\x69\x7e\x78\xf7\xb7\xe6\xb8\x6c\x52\xef\xe4\x88\xad\x5c\x70\x63\xdc\x56\x80\x64\xf5\x22\x8e\x11\x26\x9f\xcf\x06\x46\x42\xc3\x98\x43\x37\x88\x29\x3f\x1c\x91\x83\x98\x1f\x21\xfd\x0d\xf9\x31\xde\x1f\xba\xd7\xb8\x2a\xd0\x84\x1f\x35\x68\x6a\x84\xd2\x06\xb9\x4e\x78\xdf\x1b\x7d\xa8\x42\x78\x76\x3e\x95\xef\x4a\x30\x38\x74\x82\x11\x7a\x2a\xe1\xef\xcf\x05\xa1\xea\x92\xd2\x0d\x1d\xbd\xae\x2a\x02\x2b\xa8\x59\xc6\xe1\xdb\xe9\xcc\xb4\xee\x6c\x29\x78\x5b\x12\x2c\xe1\x4d\xcd\x45\x06\x60\x66\xde\x9a\x33\xd3\x36\xcc\x9c\x18\xe7\xd0\x9d\x6c\x70\x64\x8e\xcd\x64\x83\xfa\xdc\xd0\x47\xa6\xb2\x65\x7b\x0a\x74\xc3\xb1\xa6\x36\x68\x0e\x05\x15\x84\xaf\x06\x04\x05\xb4\x14\xc9\x0c\x4a\x6b\xe6\xbc\x77\x54\x0a\x8d\xd9\xe0\xd2\xa1\x77\x19\xb8\x1f\x53\x15\xf9\x5f\x10\x59\x91\xe7\x45\x98\xb1\x76\x54\xcd\x04\x72\x0c\x78\x77\x3c\x06\xa4\xb6\x51\x85\x37\x12\x31\x0e\x19\xc6\xb4\x70\x8d\x9c\x65\x6e\x8a\x09\x7f\xbf\x1e\xa4\x1a\x8a\xaf\x30\x8e\x7c\x35\x45\xbb\x1e\xfc\xb4\x20\x50\x75\x62\x3d\x3b\xd0\x7d\x44\x2a\x15\x52\x64\xb3\x7b\xc8\x0c\x94\x7a\xf8\xb9\x24\xeb\x24\x67\xa6\x89\xa3\xab\x1b\x71\x2a\xd3\xc9\xe0\x53\xd9\x5f\xd0\xd8\x45\x38\x6f\x37\x75\x15\x75\x92\x8f\x87\x52\xa1\x0a\xeb\xec\x33\x4c\x4a\xe2\x91\xde\x79\xd3\x62\x32\x39\x06\xdd\x80\xd0\x15\x62\xf8\x60\xa2\x91\x56\x19\x32\xe9\xb3\xc9\x51\x42\x5e\x83\x98\xf7\x95\x84\x66\xea\x68\x3d\xf2\x57\x24\x58\x88\xa9\x07\xe3\xd0\x93\xb6\xdc\x65\xdb\x0c\x7f\x8d\xb1\x48\xd9\x4f\xe0\x65\x99\x0e\x37\x22\x21\x87\x8c\x6c\x20\x62\x3b\x49\x3d\x4e\xdb\xaa\xa2\x49\xa4\xa8\x27\x69\x7a\x2d\x78\x67\x09\xa7\xdb\x4b\x57\x84\x88\x8a\x8b\x55\xeb\x2f\xd3\x14\x54\x46\xd0\x6e\x34\x65\xcf\xcc\x15\x5a\x55\x81\x81\xf2\xdc\xbc\x4e\xc1\x8e\x99\x5f\x81\x59\x31\xf5\x27\x69\x6d\x5a\x6a\x76\xcd\x69\x63\x10\x73\x35\x61\xcc\x7d\xae\x2e\x2d\x74\x76\x02\x79\x21\xf9\xab\x42\x3c\xac\xb1\x1a\xf1\x6b\x07\x4c\xdf\x83\xb8\x15\xd1\x46\x33\xaf\xd9\x30\xf1\x96\x97\x25\xad\x4d\x1e\x90\xdf\x47\x16\xef\x31\x2b\x9c\x26\x53\x53\x36\x43\xa2\x3a\xd5\xc9\x0e\xd0\x30\x71\x9d\x71\xf4\xe4\x7f\xaf\xda\xaa\x64\x6a\xff\x2a\x98\x43\x7b\xfc\x4a\x80\xe3\x70\xfc\xe3\x2f\x21\x2e\x37\x3f\xce\x09\x71\x61\xbc\x82\x8f\xf8\xa5\xa7\x80\x99\x69\x3b\x3d\x68\xca\xc2\x01\xfe\x1a\x93\x08\x7b\x49\x00\xa6\x88\xc7\x11\x6e\xe8\xb7\x28\xf5\x8f\xe1\x1f\xd7\xc5\x89\xfc\xff\xa9\x27\x92\xb9\x93\x4f\x18\x3f\x67\xf5\x84\x09\x02\xc4\x3b\x12\x9f\x44\x34\xc9\xf8\x5b\x21\xf0\xd5\x24\x4e\x53\xe9\x84\xad\x79\xd3\x42\x15\xa9\xb9\xd8\xa5\xb4\xff\x16\x06\x22\x07\xfe\x17\x89\x40\xf3\x02\xe6\xc9\x6d\xdd\xbc\xe4\xe8\x5f\xbf\xbd\x9e\xc2\x40\xb5\x1e\x9f\xe3\x7f\xbd\x0e\x5f\xb6\xdb\x96\x0a\x7c\x49\xa8\xa1\xf6\x2e\xb7\x77\x90\xed\x4c\xe3\x30\x20\x54\xec\x48\xdc\xd6\x65\xfd\x1e\x07\xc0\x98\x4e\x26\xa6\xed\x80\x37\x14\x63\x0f\x7b\x60\x1d\x44\x20\xc2\x6b\x1c\x25\x04\x9f\x01\x42\x01\xdf\x12\x06\xdc\xc0\x8f\x77\x14\x04\x91\x87\xa3\x37\x4d\x33\xf1\x8e\x54\x49\xae\xfd\x17\xe4\x4a\x69\xc1\xba\x4a\x96\xd2\x9f\xbf\x2b\x5b\x92\x67\xaa\x90\x8d\x62\xd2\x6e\x7c\x49\x2a\x28\x78\x4b\xe1\xf9\x85\xa6\xb2\xaf\x04\x25\xf8\x38\x8b\x33\x55\x27\xff\x1f\x69\x3a\xd0\xb4\xa9\xd9\xd8\x91\x84\xa9\xbb\xa1\x2d\x3d\xbc\x22\x1c\xa2\x9d\xec\xc2\x1c\xe8\x9e\x14\x58\x32\x8f\x77\x20\x58\x03\xbe\xc5\x40\x80\x2a\x03\x3c\x90\x38\x92\xce\x2d\x60\x26\xf9\xcc\x9f\xdf\x14\x21\xd3\x3b\x73\x2e\x69\x94\x5d\x26\xf3\x11\xc7\x8c\xc3\x7a\xa3\xa7\xcf\xae\x82\x62\xc8\x95\x1b\xea\xe6\x95\x8a\xaa\xc2\x3b\x7e\x54\x54\x6d\x5d\xd0\x77\x73\xd7\x7d\xbd\x83\x62\xfa\xb1\xb8\xc9\x86\xae\x47\xdb\x15\xef\xed\x49\x14\x7a\x47\x89\xe5\x27\x7a\x4a\x2e\xd0\x71\xb0\x21\x6c\x39\x0d\x84\x8a\x55\xbf\xee\x08\x27\x1e\xff\x74\x4b\xdb\x7a\xed\x1b\x77\x4b\xb5\x28\xda\x61\xf5\x7d\xca\xdb\x77\xf5\x97\x66\xe2\xf5\x52\xb2\xa6\x53\x7b\x2f\x8d\x0a\x65\x92\xa7\xe4\x0f\xb9\x14\xb8\xba\x02\x43\x70\x05\x0c\x1c\x71\xb2\x26\x2e\xe2\xd8\x79\x09\xf1\x25\x78\x0b\xae\xc0\x9c\x47\x18\xed\x92\xbf\x01\xdb\x06\xb1\xef\x01\x1a\x70\xb0\xc2\x80\x13\xfa\x42\x28\x07\x3e\xd9\x11\xce\x00\x62\x60\x15\x04\x3e\x60\x5f\xfd\x55\x40\x7c\x1c\xa5\xf5\xdb\x78\xe5\x13\xb6\xc5\xd1\x59\x1b\xca\x61\x54\xe1\x7c\x08\x18\xc9\xbe\x2c\x0f\x3c\x11\xbe\xad\x2e\x3e\x83\xd0\x62\x7e\x46\x36\xe5\xee\xd1\x69\xd7\xec\x16\xf3\x94\x3a\xd1\xcc\xab\xa4\xf5\xc3\x93\xf3\xe8\xae\x8d\xfd\xbc\xaf\xde\xdf\x73\x27\x41\xd2\x21\x62\x32\xdd\x9e\x98\x23\x6b\x31\x11\x69\x6b\x9b\xdc\xbf\x44\xda\x50\x08\xa6\x35\xea\xab\x2b\xa0\x7b\x1e\x49\xb6\x80\x7c\xb0\x26\xd8\xf7\x64\x80\xc3\x88\xbd\x00\x42\x3d\xfc\x4c\xe8\x26\x89\x88\x4c\xd8\x17\x48\xac\x93\xa5\x81\x3f\xe6\xdb\x20\x52\xb2\xef\xe1\xdb\x41\x1e\xe8\x65\x55\x80\x54\x27\x4d\xfb\x1c\x94\x27\xb9\x53\xb9\x9c\x31\xfc\xe3\xed\xa9\x2f\x41\x18\xa4\x90\xc1\x35\x7c\xea\x96\x77\xfb\x88\x6e\x62\xb4\xe9\xa3\x94\xc2\xb7\xf1\x6e\x45\x11\xf1\x65\xd3\x53\x7d\x71\x46\xb8\x5f\xb6\xbc\x23\x9e\x8c\xac\x31\x86\x6e\x1c\x25\x1e\xf4\x92\x7a\xe3\xef\x79\x1b\x95\x30\xb8\x26\x3e\xc7\x51\xd7\x06\xcb\x8a\x78\x90\x71\xe1\x08\xea\x86\x33\xf9\xdf\x74\xd7\xc5\x21\xc7\xde\x6f\x3f\xf9\xcb\xb7\x26\x82\x24\xb0\x65\x7f\x07\x43\x88\xec\x21\x3a\xad\x4f\x2e\x2a\x84\xe7\x98\x87\x17\x7b\x56\xf2\x90\x21\x9d\xe8\x19\xa8\xb0\x5b\x9e\xdd\xcd\x76\x96\xc7\x99\xa3\xe6\xae\x76\xad\xc5\xdc\x0b\x4a\xbe\xc6\xb5\x57\x1c\xca\x01\x5c\xa6\xf1\xf1\x52\x09\x6f\x2d\xcf\x04\x85\x42\x43\x45\xd9\xb4\x28\x51\x42\xde\x96\x9a\x84\x2a\x33\x18\x88\xc8\xa6\xfc\x24\x50\xa6\x4a\x8d\x8c\xfa\x79\xd4\xe8\x53\xf5\xaa\x8f\x78\xb3\x22\xb7\xd3\xa5\xe6\x20\x24\x9b\x4b\x0e\xa9\xdf\x54\x85\xf5\x14\x29\xb5\x0c\x33\xb5\xe1\x5f\x87\x0d\x95\x18\xb9\x06\x89\x8e\x8e\x00\x47\xad\x0c\x96\x2d\x43\xc6\x39\xa0\x69\x05\xb8\xb5\x9d\x8e\xc4\x25\x2d\x05\x28\xb9\x92\x57\x4d\x24\x59\x1c\x86\x41\xb4\xa7\x03\x90\x0a\x60\x0f\xf6\x4e\xd9\x52\xd5\x5d\xf3\xcc\x33\x00\xb9\xf7\xe6\x44\x57\x3a\xdc\x08\xbb\xd9\x99\xb7\x03\xef\xfa\x11\xe6\xe7\x9e\x43\x59\xc3\x4d\xf4\x0a\x7a\x8a\xb1\xa7\xe7\xab\x29\x87\x5d\xf7\x88\xf2\x0a\x89\xd7\xb6\xc6\xda\x40\xde\x1e\x4e\x5a\xda\xbf\xf2\x9c\xb5\x52\xa5\x5b\xf9\x1c\xc4\x3c\x2f\xaf\xb6\xd6\xc7\x5f\xb5\x9b\xc6\xf4\x91\x06\x4f\x14\x1e\xc8\xfb\x8e\x4a\xbc\x0a\xee\x58\xff\x8f\x40\x84\xa5\xcf\x50\x3a\x92\xa4\x3e\xff\xd3\xc6\x8f\xf0\xd3\x23\xeb\xc3\x3d\x64\x10\x4d\xc0\x90\xde\xb2\x5b\xa7\x65\x55\xfe\x20\x1a\x0e\xf5\x96\x46\x65\xbe\x16\xfe\x50\x96\x1a\xb4\x30\x3f\x75\x31\xc1\x77\x2b\x42\x2b\x5e\xbc\x10\x13\x8a\x38\xdb\xf0\xb6\xb7\x40\x86\xe6\x21\x8d\x75\xf2\x76\x71\xe7\x39\x53\x5f\x87\x9f\x57\x8d\x14\x28\x0c\xfd\x84\x07\x8a\x87\xf0\x1c\xf1\x78\xdf\x13\xd8\x30\x84\xea\xbb\xf5\x5a\xc9\x19\x71\x94\x0b\x34\x7c\x47\x21\x69\xf9\xdc\x68\xde\x32\x44\x10\xd1\x5d\xfa\xe1\x07\xfc\x9f\x00\x00\x00\xff\xff\x60\xe8\xa8\x80\x73\x39\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 14707, mode: os.FileMode(420), modTime: time.Unix(1523082049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

