// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x73\xdb\xb8\xd5\xbe\xf7\xaf\xc0\xdd\x52\xf3\xda\x33\x96\x37\xef\x36\x9d\x4e\x2e\x68\x0a\xb6\xb9\x91\x28\x97\xa4\xd2\xa4\x37\x10\x24\x42\x12\x26\x14\xa9\x10\x60\x62\xf5\xd7\x77\x00\xf0\x03\xfc\x92\x68\x49\xdb\xae\x33\xbd\xb3\xc5\x07\x07\x87\xc0\x39\xcf\x79\x0e\x81\x9b\x1b\xf0\x7f\x5b\xba\x4e\x30\x27\x60\xb6\xbb\xba\xd2\xff\xf7\x38\xe6\x64\x4b\x22\x7e\x4f\xd6\x34\xba\xb2\x5c\x68\xfa\x10\xf8\xe6\xfd\x18\x02\xfb\x01\x38\x53\x1f\xc0\xcf\xb6\xe7\x7b\x60\xbe\x08\xe3\xe5\x57\x36\xbf\x32\xae\x00\x00\x60\x4e\x83\x39\xf0\xa0\x6b\x9b\xe3\xeb\x2b\xf5\xcb\x82\x72\x36\x07\x9f\x4c\xd7\x7a\x32\x5d\xe3\xee\x76\x20\x87\x3b\xb3\xf1\xf8\x5a\x01\x96\x1b\x4c\xa3\x1f\x71\xf2\xb5\x44\xfd\xe5\x76\x00\xc4\x1f\xa6\xe5\x43\x17\x78\xd0\x07\x21\xe6\x34\x1a\x02\x6b\x3a\x1e\x0b\x57\xd4\xbf\x68\x4d\x22\x92\xe0\x10\x2d\x69\xc3\x68\x1c\xad\x68\xb2\xc5\x9c\xc6\x11\x9b\x03\xdb\xf1\xe1\x23\x74\xc1\xcc\xf1\xec\x47\x07\x8e\xea\xf0\x80\xae\x56\x74\x99\x86\x7c\x3f\x07\x23\x68\xd9\x13\x73\x6c\x0c\xdf\x5f\xbf\x6f\x38\xbb\xc1\x6c\x73\x11\x3f\x41\x6e\x90\xd0\xf5\x86\xcf\xc1\xbd\xfd\x68\x3b\x7e\xa7\x83\x5b\x12\x50\x1c\x21\x4e\xb7\xa4\x07\x36\xf9\x1a\x12\x94\xc4\x31\xbf\xe4\x92\x46\x78\x4b\xd0\x32\xc4\x74\x7b\x79\xd3\x71\xb4\x3c\xfe\x5e\xbb\x84\x7c\xa7\x71\xca\x90\x8c\x39\x74\xee\x56\xe4\x73\x93\x17\x7e\x59\x8b\xca\x18\xa3\xff\x3a\xfe\x4a\x1c\x27\x6b\x72\xd1\xa5\x54\x93\xf7\x8a\x93\xef\x24\x61\x34\x8e\xfa\xe2\xd0\x86\xbc\x94\x9e\x0e\xcf\xf6\x94\x27\x38\x62\x78\xc9\xa5\x69\xcc\x36\x84\xcd\x81\x0f\x3f\xfb\xcd\xc7\x0c\xed\x92\x78\x49\x18\x23\xc1\x1c\xf8\xb6\xf3\xc5\x76\x7c\x63\x38\x00\x23\xf8\x60\xce\xc6\x3e\xb8\xd5\x4c\x67\xe9\x9f\x10\xcc\x05\x7a\x64\xfa\xd0\xb7\x27\xb0\xcc\xbb\x7c\x90\x35\x73\x5d\xe8\xf8\x48\x3c\xf5\x7c\x73\xf2\x9c\x67\x4f\x1c\xd0\x15\x7d\xe5\x58\x30\x75\xc0\xec\x59\x0c\x68\xb3\x2b\x0d\x3f\xbb\xf6\xc4\x74\xbf\x80\x8f\xf0\x0b\x98\x3f\x7f\x44\xf7\x62\xa3\xe6\xc0\x10\x94\x39\x50\x73\xcf\x1c\xfb\xef\x33\xa8\x10\x76\xf0\xa2\x20\x4f\x32\x28\x0d\xc5\x3c\x19\xd0\x9a\x3a\x9e\xef\x9a\x62\xd3\xe6\x56\xc4\x91\x5f\xae\xd5\x93\x5c\xc9\x4f\x38\xa4\xc1\xef\x4c\x6c\xae\xf5\x04\xad\x8f\x46\xeb\x6a\xdb\x9e\x7a\xad\xa9\x0b\x7e\xf7\xa6\x0e\xfa\x64\x8e\xed\x51\x2b\x74\x90\x4d\x6c\x3b\x23\xf8\x59\x77\x2e\x63\x2f\x23\xe7\xb1\x0e\x9c\x2f\xe3\xd1\xd0\xa3\xb3\x89\x9c\x48\x8e\xcb\xa1\x3a\xe3\x35\xb1\xcf\x19\x17\x54\x96\xa8\x8d\x20\x3a\x1c\xb2\xf2\x00\x31\x8a\x58\xe9\x40\x4e\x8a\x78\x30\xca\xd8\x18\x5c\x0d\x00\x74\x1e\x6d\x07\x7e\xb0\xa3\x28\x1e\xdd\x97\xa1\xf1\x64\xba\x1e\xf4\x3f\xa4\x7c\xf5\x7e\xbb\x78\x57\xa4\x43\xf6\x3f\x4a\x23\xba\x8c\x03\x22\xf2\xc1\x9d\xfe\x03\x3d\x4c\xdd\x89\xe9\x7f\xb0\xa6\x93\x67\x17\x7a\x1e\x1c\x89\xdd\x47\xf7\xe3\xa9\xf5\x11\x79\xf6\x3f\xe1\x87\x77\x7f\x6b\xaf\xcc\x30\x0a\x4e\xae\xd9\x7a\x6a\xb5\x56\x6e\x8d\x49\x16\x7b\xb9\x8e\x48\x3c\x3e\x9b\x19\x69\xb4\x4b\x39\x5a\xc6\x69\xc4\x8f\xd7\xe4\x38\xe5\xaf\x40\x7f\xc7\x61\x4a\x8e\x14\xef\x15\x69\x20\xda\x28\xa4\xc1\x4e\xad\x6c\xda\x82\xeb\x45\xf9\x17\x53\x10\x75\x16\xcf\x57\xa8\xf6\x5c\xab\x07\xc7\xd6\x30\xc1\x3f\x2a\x14\xfc\xe7\x62\x51\xdd\xa5\xec\x85\x5e\xed\x57\x9d\x84\x35\xe2\xac\x52\xf1\xc3\xd4\x85\xf6\xa3\xa3\x80\x0f\x15\x60\x85\x72\x1a\x49\x32\x00\x2e\x7c\x80\x2e\x74\x2c\x58\xaa\xe3\x82\xbe\xc5\x1b\x8e\xe0\x18\xfa\x50\xee\xb5\x62\xdf\xe2\xa5\x9d\x29\x30\x2d\xdf\x9e\x3a\xa0\xbd\x1e\xd4\x68\xbe\x5e\x15\x34\xe6\xd2\x90\x39\x9f\x36\x02\xfa\xe0\xa8\x8c\x1f\xf3\xc1\x95\x65\xef\x33\xf0\x30\xb1\x6a\xf8\x9f\x90\x5e\x71\x10\x24\x42\xac\x1c\xe0\xd6\x0c\x52\xf2\xc0\xbb\xb3\x79\x60\x45\x13\xc6\x11\x23\x24\x2a\xf3\x22\xe7\xa8\x98\xe3\x10\x25\x64\x49\xe8\x77\x99\x92\x3d\x29\x50\x0e\x63\x44\xd0\x6f\xcf\x21\x0b\x1c\x62\x29\xe5\xab\x78\xd3\x13\x01\x58\xf3\xe2\xa6\x32\xc3\xa0\x50\xc4\xeb\x72\x55\x7e\xbd\xd5\x7e\x46\x69\x12\xea\x8d\x64\xf1\xec\xcf\x47\x53\x75\x9a\x31\xf3\xed\x3e\xa4\xf6\x32\x90\x86\xcd\xa3\xe4\xf0\x00\x5f\xac\x98\x21\x17\xae\x99\x69\x39\x46\x2c\xb4\x5b\x2c\x7d\x63\x33\x0e\x0f\xf4\x64\x08\x18\x2d\xdb\xd5\x1c\x70\x9f\x47\x80\x51\x04\x43\x27\xb6\x17\x57\x64\xd8\x9f\x90\x27\xa4\x1a\x3a\x40\x12\x3a\x63\x8b\x87\xc7\x7a\xc9\x9a\x6c\xbf\xa4\xc8\x50\xc2\x2d\x8b\xc7\x36\x67\x72\x1c\x43\xcb\x98\x46\x0b\xcc\xc8\xd1\x4e\x2d\xfb\x4e\x93\xa3\xcf\x16\x97\x42\xfd\xc7\x29\xbf\x54\x17\x9f\x9b\x8b\x9a\xba\xa9\x86\x60\x3b\x12\x05\x28\xdd\x05\x2a\x98\xfb\xbc\x36\x23\xdf\x52\x22\xd3\xe4\x14\x5d\x9b\x1b\x59\x26\x74\xc7\x11\xa3\x6b\x84\xd9\x56\x29\xb7\xd3\xde\x55\xb3\x24\x9b\xfc\x93\x2c\xbd\x15\x32\xb6\x45\x2c\x77\x53\xf1\x4c\x43\x34\x52\xea\xba\xdc\xb9\x0e\xa1\x28\xc7\xea\x7c\x5f\xcf\x9c\xaa\x40\x2c\xb5\x42\xe6\x90\xa6\x10\x2d\xd3\xb3\xcc\x11\x6c\x13\x88\x07\xe6\xae\x49\xda\x1a\x89\x54\x67\xaf\x34\x82\x27\x38\xa0\xd1\xb4\x9c\xfb\x93\x0a\x56\x23\x8b\xda\xf6\xb6\x3d\x4e\xb9\xde\xb0\x17\x29\xdb\x44\x4b\x9b\xbd\x8a\x84\x44\xfe\xac\x25\x02\xb5\x08\x4a\xf9\x7b\x8f\xa2\x70\x80\xb2\x6b\xd0\xd6\x34\x69\x04\x32\x0d\xe6\xd7\x15\xab\x6d\x69\x50\xec\x48\x2e\x66\x08\x2b\x93\x2e\x37\x53\x8d\xc4\xac\x16\x9e\x9b\x04\x2d\x33\x37\xf5\xd4\xc5\xb2\xf0\x4d\x87\x96\xfa\xbc\xf2\x36\xe4\xc7\x81\x22\x28\xf8\xe3\x78\x15\xe5\xfb\x1d\xa9\x1e\x42\x9d\x53\x27\x77\xe9\x02\x7d\x25\xfb\x0b\x55\xdd\xdc\xda\xe9\x95\x57\x7d\xbc\x21\xdf\x52\x9a\x90\x40\x54\xf1\x08\xf3\x34\x21\x2d\xe7\x5e\xda\x37\xa8\xe1\x6f\xb7\xe5\x8a\xfc\xff\xa9\x2b\x92\xa7\x54\x48\x19\x3f\xc7\x7b\xca\xa4\x8c\xe2\x3d\xe5\x93\x80\xa2\xc5\x1e\x75\xf2\xe0\x9b\x69\x0d\xa7\x32\x0d\x0f\xca\x91\x12\xd2\xa2\x47\x64\xfc\x77\x68\x11\x35\xf0\x3f\x29\x08\xda\x3d\xf0\xc4\x76\xdd\xef\x8b\x1a\xd0\xdc\xbe\x4b\x15\x83\xfa\xc1\x48\x51\x05\x9a\x07\x22\xd5\xc8\xed\x38\x0a\xa9\x80\x5a\x0e\x41\xd4\xfb\x1d\x95\x3d\xd3\x74\xc7\x7b\x2a\x19\x65\xf1\x27\x94\x32\xd9\xe7\xfc\xa6\x96\xc9\x1e\xfc\xa1\x62\x46\xad\xaa\x26\x05\xca\x49\xfb\xc9\x19\x65\xa0\x54\x15\x65\x4e\x96\x96\xaa\x41\x9c\xd7\xd7\x4b\x48\x9a\xfa\xec\xff\xd3\x34\x47\x0f\xb6\x5a\x02\xed\x95\x82\xa6\x7f\xb4\xcd\x03\xb2\xa0\x1c\xe1\xad\x3a\xaa\x3a\xf6\xad\x14\x58\xd3\xc9\x04\x3a\x3e\xf8\xc5\x4b\xb7\x20\x5e\x01\xbe\x21\x40\x71\x1e\xe0\x31\xe0\x1b\xca\x40\x36\x39\x58\xc5\x89\x7c\xcc\x5f\x7e\x29\x4b\x5a\x70\xee\x64\x59\x6c\xf6\x98\x2d\xc4\x9c\x30\x8e\x9a\xa7\x61\x97\x3c\x7a\xd1\xc2\xb9\xb6\x47\xfd\x92\x53\x33\x55\xe6\xc8\x7f\xad\xec\x75\x7a\xf4\x07\x66\xed\xa1\x13\x96\xd2\x81\xb1\xdc\xcc\x96\xb3\xa1\xae\x5d\x3e\x78\x72\x53\xda\x1d\x89\xf0\x17\x76\x2a\x79\xd0\x73\xb0\x25\xe3\x39\x2b\x8a\x5a\x64\xbf\xed\x6a\x27\xef\x49\xf5\x6c\xae\x2e\x7a\xc4\xde\xaf\x1f\x8a\xf0\x96\xe8\x77\x79\xee\xde\x35\xaf\xe5\xc9\x9b\x5e\xc2\xa7\x0b\x1d\x50\x29\x83\xaa\x13\xd3\x44\x7e\x81\x02\x37\x37\x60\x08\x6e\x80\x45\x12\x4e\x57\x74\x89\x39\xf1\xf7\x3b\x72\x0d\xee\xc0\x0d\xf0\x78\x42\xf0\x56\xfc\x9f\x7d\x7b\x4d\x17\x21\x65\x1b\x92\x9c\xe5\x61\xc1\x8d\x09\x59\x91\x84\x44\x4b\xc2\x00\x06\x96\x70\xd4\x0e\xc0\x0f\xca\x37\x75\x6f\x72\x5e\x2c\xe7\x67\x74\x5d\x3d\x95\x3a\x6d\xdf\x96\xe5\x3c\x5d\xd7\xa0\x3a\x4e\xf1\xeb\xf7\x00\x2e\x72\x43\x4b\xda\xbc\xb9\x01\x66\x10\x50\x31\x37\x0e\xc1\x8a\x92\x30\x50\x35\x82\x60\xb6\x07\x34\x0a\xc8\x0b\x8d\xd6\xa2\xa8\x30\xb9\x3d\x40\x6c\x2e\xcb\xaa\x67\xca\x37\x71\xa2\x75\x98\xc3\xbb\x41\x51\x2d\x55\xe7\x2b\xbd\x9d\xc0\x91\x3d\x9b\xe8\x97\x0e\xe2\x88\x8b\xf6\xa0\xda\xb2\x0f\x7f\xbb\x3b\xf5\xce\x09\x43\x11\x62\x68\x85\x7e\xf4\xeb\x2d\x43\x1c\xad\x53\xbc\xbe\xc4\xe7\x02\xbe\x49\xb7\x8b\x08\xd3\x50\x1d\x5d\xea\xbb\x4a\x79\x58\xdd\xe7\xd7\xdc\x4d\x59\x11\x82\x96\x69\x22\x02\x76\x9f\x05\xff\xaf\x83\xf2\x75\x57\x34\xe4\x24\x79\xa3\x77\xe5\xda\xa4\x82\x4c\xc8\xc3\xf7\x33\x24\xe4\x40\xc9\xef\xbc\xa1\x51\x2f\xfd\x8d\x7b\x1a\xaf\xee\x79\xa5\x2b\xcf\x39\x3f\xc8\xcf\xdc\x3a\x59\x55\xa7\xcf\xea\x84\xa8\x7e\x39\xdf\xbe\x6a\xf2\xfa\x99\xb0\x9c\x7c\x16\xd1\x6f\x69\xe3\xd2\x87\xb6\x04\xd7\x59\x9d\xb8\xd6\x68\xbe\xe3\x6a\xa1\x34\x68\xe9\xe4\x94\xf5\xcf\x15\xc2\xea\x68\x9f\x75\xcc\x60\x20\x19\x5e\xfb\x49\xd2\x45\x5d\x23\x14\x7b\x5d\x77\xac\x8e\x39\xed\x8a\x8b\x7a\x9d\x3e\x8d\xb8\x44\xb6\xf7\xe1\x59\xe6\xd4\xc1\x66\x46\x79\x46\x4e\x7e\xc6\xf0\xaf\xc3\x96\x8f\x06\xca\x07\x45\x73\xbe\x64\x39\xa3\xca\x7a\x1d\x43\xc6\x05\x33\x19\x25\x4b\x75\xad\x8e\x22\x18\x23\x63\x1a\xe5\xc9\xdb\x57\x54\x48\x15\x9a\x52\x58\x95\x2a\xe5\x48\x8b\xa6\x06\xea\xf5\xe6\xc8\x27\x03\xb9\x8c\x5e\x36\xaa\x19\x8e\x95\xac\xaf\xc2\x5b\x42\xb8\x23\xe7\xdf\x56\x5b\xfe\xef\x00\x00\x00\xff\xff\x3a\x8d\xca\xae\x32\x32\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 12850, mode: os.FileMode(420), modTime: time.Unix(1521341877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

