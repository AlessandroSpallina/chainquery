// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x73\xdb\xba\x11\x7e\xf7\xaf\xc0\xdb\xa1\xa6\xf6\x8c\xe5\x93\x9e\xa6\xd3\xc9\x03\x4d\xc1\x36\x4f\x24\xca\x25\xa9\x34\xe9\x0b\x04\x91\x90\x84\x09\x45\x2a\x04\x98\xd8\xfd\xf5\x1d\x02\xbc\x80\x37\x89\xba\x9c\x36\xf2\x9c\x37\x5b\xfc\xb0\xbb\x00\x76\xbf\xdd\x05\x70\x73\x03\xfe\xb2\xa1\xab\x18\x73\x02\x66\xdb\xab\x2b\xf5\x7f\x87\x63\x4e\x36\x24\xe4\xf7\x64\x45\xc3\x2b\xc3\x86\xba\x0b\x81\xab\xdf\x8f\x21\x30\x1f\x80\x35\x75\x01\xfc\x6c\x3a\xae\x03\xe6\x8b\x20\xf2\xbe\xce\xaf\xb4\x2b\x00\x00\x98\x53\x7f\x0e\x1c\x68\x9b\xfa\xf8\xfa\x4a\xfe\xb2\xa0\x9c\xcd\xc1\x27\xdd\x36\x9e\x74\x5b\xbb\xbb\x1d\x88\xd1\xd6\x6c\x3c\xbe\x96\x00\x6f\x8d\x69\xf8\x23\x8a\xbf\x96\xa8\xbf\xdd\x0e\x40\xfa\x87\x6e\xb8\xd0\x06\x0e\x74\x41\x80\x39\x0d\x87\xc0\x98\x8e\xc7\xa9\x25\xf2\x5f\xb4\x22\x21\x89\x71\x80\x3c\xda\x10\x1a\x85\x4b\x1a\x6f\x30\xa7\x51\xc8\xe6\xc0\xb4\x5c\xf8\x08\x6d\x30\xb3\x1c\xf3\xd1\x82\xa3\x3a\xdc\xa7\xcb\x25\xf5\x92\x80\xbf\xce\xc1\x08\x1a\xe6\x44\x1f\x6b\xc3\xf7\xd7\xef\x1b\xc6\xae\x31\x5b\x9f\xc5\x4e\x90\x0b\x24\x74\xb5\xe6\x73\x70\x6f\x3e\x9a\x96\xdb\x69\xe0\x86\xf8\x14\x87\x88\xd3\x0d\xe9\x81\x8d\xbf\x06\x04\xc5\x51\xc4\xcf\xb9\xa4\x21\xde\x10\xe4\x05\x98\x6e\xce\x2f\x3a\x0a\xbd\xfd\xf3\xda\xc6\xe4\x3b\x8d\x12\x86\x84\xcb\xa1\x53\xb7\x22\xd7\x4d\x5e\xf8\x79\x25\x4a\x61\x8c\xfe\x67\xff\x94\x38\x8e\x57\xe4\xac\x4b\x29\x95\xf7\xf2\x93\xef\x24\x66\x34\x0a\xfb\xe2\xd0\x9a\xbc\x94\x96\x0e\x4f\xb6\x94\xc7\x38\x64\xd8\xe3\x42\x34\x66\x6b\xc2\xe6\xc0\x85\x9f\xdd\xe6\x67\x86\xb6\x71\xe4\x11\xc6\x88\x3f\x07\xae\x69\x7d\x31\x2d\x57\x1b\x0e\xc0\x08\x3e\xe8\xb3\xb1\x0b\x6e\x15\xd1\x59\xf8\xc7\x04\xf3\x14\x3d\xd2\x5d\xe8\x9a\x13\x58\xc6\x5d\x3e\xc8\x98\xd9\x36\xb4\x5c\x94\x7e\x75\x5c\x7d\xf2\x9c\x47\x4f\xe4\xd3\x25\x3d\x70\x2c\x98\x5a\x60\xf6\x9c\x0e\x68\x93\x2b\x04\x3f\xdb\xe6\x44\xb7\xbf\x80\x8f\xf0\x0b\x98\x3f\x7f\x44\xf7\x82\x37\x81\x96\x52\xe6\x40\xea\x9e\x59\xe6\x3f\x67\x50\x22\x4c\xff\x45\x42\x9e\x84\x53\x6a\x92\x79\x32\xa0\x31\xb5\x1c\xd7\xd6\xd3\x4d\x9b\x1b\x21\x47\x6e\xb9\x56\x4f\x62\x25\x3f\xe1\x80\xfa\xbf\xb3\x74\x73\x8d\x27\x68\x7c\xd4\x5a\x57\xdb\x74\xe4\xb4\xa6\x36\xf8\xdd\x99\x5a\xe8\x93\x3e\x36\x47\xad\xd0\x41\xa6\xd8\xb4\x46\xf0\xb3\x6a\x5c\xc6\x5e\x5a\xce\x63\x1d\x38\x57\xf8\xa3\xa6\x7a\x67\x13\x39\x11\x1c\x97\x43\x55\xc6\x6b\x62\x9f\x33\x2e\xa8\x2c\x51\x1b\x41\x74\x18\x64\xe4\x0e\xa2\x15\xbe\xd2\x81\x9c\x14\xfe\xa0\x95\xbe\x31\xb8\x1a\x00\x68\x3d\x9a\x16\xfc\x60\x86\x61\x34\xba\x2f\x5d\xe3\x49\xb7\x1d\xe8\x7e\x48\xf8\xf2\xfd\x66\xf1\xae\x08\x87\xec\x7f\x94\x84\xd4\x8b\x7c\x92\xc6\x83\x3d\xfd\x17\x7a\x98\xda\x13\xdd\xfd\x60\x4c\x27\xcf\x36\x74\x1c\x38\x4a\x77\x1f\xdd\x8f\xa7\xc6\x47\xe4\x98\xff\x86\x1f\xde\xfd\xa3\x3d\x31\xc3\xd0\x3f\x3a\x65\x2b\x1b\xdc\x9a\xb8\x15\x22\x59\xbc\x8a\x65\x44\xe9\xe7\x93\x89\x91\x86\xdb\x84\x23\x2f\x4a\x42\xbe\x3f\x25\x47\x09\x3f\x00\xfd\x1d\x07\x09\xd9\x93\xbb\x97\xa4\x81\x68\x63\x90\x06\x39\xb5\x92\x69\x0b\xae\x17\xe3\x9f\xad\x80\xa8\x93\x78\xbe\x42\xb5\xef\x4a\x3a\xd8\xb7\x86\x31\xfe\x51\x61\xe0\x9f\x8b\x44\x55\x93\xb2\x09\x1d\x6c\x57\x9d\x83\x15\xde\xac\x32\xf1\xc3\xd4\x86\xe6\xa3\x25\x81\x0f\x15\x60\x85\x71\x1a\x41\x32\x00\x36\x7c\x80\x36\xb4\x0c\x58\xd4\xc6\x05\x79\xa7\x13\x1c\xc1\x31\x4c\x27\xa8\x3b\x86\x3e\x82\xca\x94\xad\x29\xd0\x0d\xd7\x9c\x5a\xa0\x3d\x19\xd4\x38\xbe\x9e\x12\x14\xda\x52\x90\x39\x99\x36\xdc\x79\xe7\xa8\x8c\x1c\xf3\xc1\x95\x45\xef\x33\x70\x37\xab\x2a\xf8\x37\xc8\xad\xd8\xf7\x63\xc2\x58\x37\xaf\xe6\x80\x82\x03\xde\x9d\xcc\x01\x4b\x1a\x33\x8e\x18\x21\x61\x19\x13\x45\x81\xb9\x2a\x35\xfd\x7a\x3b\x28\x7f\x46\x49\x1c\xa8\x7d\x59\xf1\xed\xe7\x0b\xfb\x7a\xd8\xea\xf9\x12\xee\x2a\x9e\x32\x90\x82\xcd\x57\x7e\xf7\x00\x37\x5d\x31\x4d\x2c\x5c\xd3\x77\x33\x4c\x2f\x3f\xcf\xb0\x6f\xd0\xc7\x45\x1e\xef\xf6\x70\x95\x6c\xd2\x8f\xfb\x7a\xa0\x5a\xb9\x79\xce\xec\x28\x2b\x8e\x6c\xe3\xdb\x8c\xc9\x71\x0c\x79\x11\x0d\x17\x98\x91\xbd\x1d\x46\x76\xbe\x90\xa3\x4f\xae\x8a\xd2\xaa\x35\x4a\xf8\xb9\xba\xcf\x5c\x5c\xd8\x4c\xf8\x35\x04\xdb\x92\xd0\x47\xc9\xd6\x97\xbe\xdc\x67\xda\x8c\x7c\x4b\x88\xe8\xd5\x8f\x29\xc8\x72\x21\x5e\x4c\xb7\x1c\x31\xba\x42\x98\x6d\x64\xc9\x71\xdc\x5c\x15\x49\xa2\x39\x3d\x4a\xd2\xa5\xb0\x9e\x29\xa2\x6e\x67\x99\x22\x20\x2a\x3b\xd6\xdd\xbf\x5a\x9e\xe0\x2a\x8f\xf6\x2b\x4f\x76\x68\xae\x95\x53\x35\x1e\xa8\xea\xe6\xcd\xd2\xeb\x10\xfd\x0a\xcf\x0a\xd5\x9f\xa4\xbb\x69\x99\xdf\xb5\x37\x8c\x51\xc2\xd5\x56\xb1\x08\xba\x26\x5a\xc8\xec\xc5\xf2\x02\xf9\x56\x39\x1e\x35\xaa\x19\xf1\x6b\x0f\x52\xdf\x41\xb9\x35\x68\xab\x9b\x37\x7c\x98\xfa\xf3\xeb\x8a\xd4\xb6\x08\x28\xf6\x23\xcf\xfa\x84\x95\x41\x93\x8b\xa9\xba\x21\x55\x83\xea\xe8\x00\x68\x51\xdc\xac\x3b\xce\x14\x7f\x17\xed\x55\xb2\xa9\xbf\x88\xd2\x61\x47\x02\x4b\x99\x63\x7f\x06\xe4\xaf\x5b\x52\xbd\xf8\x38\x25\xc7\x6d\x93\x05\xfa\x4a\x5e\xcf\x94\x31\x73\x69\xc7\x67\x4d\x79\x62\x40\xbe\x25\x34\x26\x7e\x9a\x81\x43\xcc\x93\x98\xb4\xdc\xb5\x28\x07\x1f\xc3\xdf\x6e\xcb\x15\xf9\xeb\xb1\x2b\x92\xc7\x53\x40\x19\x3f\xc5\x7a\xca\x44\x09\xc4\x7b\x96\x3e\x29\x34\x6d\xf5\x3b\x39\xf0\x62\xfa\xa7\xa9\x8c\xc2\xce\xf6\x69\xa6\x42\x1a\x31\x76\x2d\xfd\xbf\xa3\x04\x91\x03\xff\x87\x95\x40\xbb\x01\x4e\xba\x5b\xf7\xaf\x05\xfd\x37\x77\xef\x4c\x79\xa0\x7e\x14\x5f\x24\x80\xe6\x11\x7c\xd5\x6f\x3b\x0e\xdf\x2b\xa0\x96\x63\x77\x39\xbd\xbd\xe5\xce\x34\xd9\xf2\x9e\x15\x8c\x94\xf8\x06\x4b\x98\xec\x04\xb9\x5e\xc3\x64\x3f\xff\xa1\x45\x8c\x5c\x53\xa5\x06\x28\x95\xf6\x2b\x63\xa4\x80\xb2\x9c\x28\xe3\xb1\x94\x54\xf5\xe0\xa8\x12\xd4\x27\x95\x32\x75\xe5\x7f\xd6\x32\x7b\x6e\x51\x1a\x3e\x76\x60\x1d\xd3\xdf\xd1\xe6\x3e\x59\x50\x8e\xf0\x46\x5e\x8b\xec\xbb\xcd\x00\xc6\x74\x32\x81\x96\x0b\x7e\x71\x92\x0d\x88\x96\x80\xaf\x09\x10\x5c\xc7\x00\x8f\x00\x5f\x53\x06\x32\xe5\x60\x19\xc5\xe2\x33\x7f\xf9\xa5\xcc\x64\xfe\xa9\xca\xa4\x5b\xf6\xd1\x16\x60\x4e\x18\x47\xcd\x9b\x97\x73\x1e\xf3\x2b\xae\x5c\xdb\xa3\x7e\x71\xa9\x88\x2a\xe3\xe3\xff\x95\xed\x3a\x0d\xfa\xc3\x02\x76\xd7\x61\x7e\xa9\x7e\x2c\x76\xb2\xe5\x1a\xa2\x6b\x8b\x77\x5e\x12\x94\x72\x47\xa9\xef\xa7\x72\x2a\x41\xd0\x73\xb0\x21\x9c\x39\x4b\x85\x8a\x5b\x5f\x76\x8e\x13\xef\x71\xfa\xf5\x53\x67\xbd\xca\xed\xd7\x02\x85\x78\x43\xd4\x27\x23\x77\xef\x9a\xaf\xbf\xc4\x83\xa2\xd4\xa6\x33\x5d\x86\x48\x81\xb2\xf9\x52\xea\xfa\x02\x05\x6e\x6e\xc0\x10\xdc\x00\x83\xc4\x9c\x2e\xa9\x87\x39\x71\x5f\xb7\xe4\x1a\xdc\x81\x1b\xe0\xf0\x98\xe0\x4d\xfa\x7f\x76\x54\x9a\x2c\x02\xca\xd6\x24\x3e\xc9\xc2\x82\x17\x63\xb2\x24\x31\x09\x3d\xc2\x00\x06\x46\x6a\xa8\xe9\x83\x1f\x94\xaf\xeb\xd6\xe4\x9c\x58\xea\x67\x74\x55\xbd\xad\x39\x6e\xdf\xbc\x52\x4f\xd7\x6b\x9b\x8e\xdb\xe2\xfa\x7d\xf3\x59\x1e\x02\x09\x99\x37\x37\x40\xf7\x7d\x9a\xea\xc6\x01\x58\x52\x12\xf8\x32\x3f\x10\xcc\x5e\x01\x0d\x7d\xf2\x42\xc3\x55\x9a\x50\x98\xd8\x1e\x90\x6e\x2e\xcb\x32\x67\xc2\xd7\x51\xac\x34\x95\xc3\xbb\x41\x91\x29\x65\xb3\x2b\xac\x9d\xc0\x91\x39\x9b\xa8\x97\xdb\x51\xc8\xd3\x96\xa0\xda\xa5\x0f\x7f\xbb\x3b\xf6\x6d\x03\x43\x21\x62\x68\x89\x7e\xf4\x6b\x27\x03\x1c\xae\x12\xbc\x3a\xc7\x09\x01\x5f\x27\x9b\x45\x88\x69\x20\xaf\xf4\xd4\x5d\xa5\x3c\xa8\xee\xf3\x21\x6f\x20\x96\x84\x20\x2f\x89\x53\x87\x7d\xcd\x9c\xff\xd7\x41\x39\xdd\x25\x0d\x38\x89\x2f\xf4\x49\x56\x5b\x99\x20\x02\x72\xf7\x01\xbb\x80\xec\x48\xf7\x9d\x2f\x01\x6a\x69\xff\x90\xf7\x00\x3b\x2c\x79\xce\xe9\x41\x1c\x69\xab\x5c\x55\xd5\xee\xe5\x33\x2b\xd8\xf6\x20\xdd\xf5\x9b\x52\xa1\x7b\x16\xd2\x6f\x49\xe3\x71\x81\xb2\x00\xd7\x59\x96\xb8\x56\x48\xbe\xe3\xfd\x9a\x10\x68\xa8\xd4\x94\xb5\xcc\x15\xba\xea\xe8\x98\x55\xcc\x60\x20\xf8\x5d\xf9\x49\x90\x45\xbd\x40\x30\x9a\xeb\xd1\x28\x22\xea\x5b\x7d\xc0\x53\x0a\x39\x9d\x3e\xbd\xb7\x40\xb6\xb7\xde\x59\xdc\xd4\xc1\x7a\x46\x78\x5a\x4e\x7d\xda\xf0\xef\xc3\x96\x73\x02\x69\x83\x24\x39\x57\x70\x9c\x56\xe5\xbc\x8e\x21\xe3\x82\x97\xb4\x92\xa3\xba\x56\x47\xd2\x8b\x96\xf1\x8c\xb4\xe4\xf2\xcb\x29\x24\xd3\x4c\x51\x55\x95\x25\xca\x9e\xde\x2c\x1b\xa7\x24\x9b\x3d\xc7\x04\x62\x15\x9d\x6c\x54\xd3\x1b\x2b\x31\x5f\x85\xb7\x78\x70\x7b\xc4\x5f\x58\x33\xfe\xdf\x00\x00\x00\xff\xff\x61\xf3\xda\x71\x95\x30\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 12437, mode: os.FileMode(420), modTime: time.Unix(1521762214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

