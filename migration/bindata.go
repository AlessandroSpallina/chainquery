// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// migration/001_claimcolumns.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x73\xdb\xba\x11\x7e\xf7\xaf\xc0\x9c\x97\x50\x53\x7b\xc6\xca\x49\x4f\xd3\xe9\xe4\x81\xa6\x60\x9b\x27\x12\xe5\x52\x54\x9a\xf4\x05\xa2\x48\x48\x42\x4d\x81\x0a\x01\xc6\x76\x7f\x7d\x87\x00\x2f\xe0\x4d\xa2\x24\xa6\x27\xce\x9c\xb7\x58\x5c\xec\xe2\xb2\xfb\xed\xb7\x58\xe4\xea\x0a\xfc\x65\x4b\xd6\x91\xcb\x31\x98\xef\x2e\x2e\xd4\xbf\x67\xdc\xe5\x78\x8b\x29\xbf\xc1\x6b\x42\x2f\x0c\x1b\xea\x0e\x04\x8e\x7e\x33\x86\xc0\xbc\x05\xd6\xd4\x01\xf0\xb3\x39\x73\x66\x60\xb1\x0c\x42\xef\x71\x71\xa1\x5d\x00\x00\xc0\x82\xf8\x0b\x30\x83\xb6\xa9\x8f\x2f\x2f\xe4\x2f\x4b\xc2\xd9\x02\x7c\xd2\x6d\xe3\x5e\xb7\xb5\xb7\xd7\x03\x31\xda\x9a\x8f\xc7\x97\x52\xc0\xdb\xb8\x84\x3e\x85\xd1\x63\x21\xf5\xb7\xeb\x01\x48\xfe\xa1\x1b\x0e\xb4\xc1\x0c\x3a\x20\x70\x39\xa1\x43\x60\x4c\xc7\xe3\x64\x26\xf2\x4f\xb4\xc6\x14\x47\x6e\x80\x3c\x52\x53\x1a\xd2\x15\x89\xb6\x2e\x27\x21\x65\x0b\x60\x5a\x0e\xbc\x83\x36\x98\x5b\x33\xf3\xce\x82\xa3\xaa\xb8\x4f\x56\x2b\xe2\xc5\x01\x7f\x59\x80\xd1\x74\x7e\x33\x86\xda\xf0\xfd\xe5\xfb\xda\x5c\x37\x2e\xdb\xf4\x32\x4d\x90\x29\xc4\x64\xbd\xe1\x0b\x70\x63\xde\x99\x96\xd3\x3a\xbf\x2d\xf6\x89\x4b\x11\x27\x5b\xdc\x41\x36\x7a\x0c\x30\x8a\xc2\x90\xf7\xb9\xa3\xd4\xdd\x62\xe4\x05\x2e\xd9\xf6\xaf\x3a\xa4\xde\xe1\x75\xed\x22\xfc\x8d\x84\x31\x43\xc2\xe3\xd0\xb9\x47\x91\xd9\xc6\xcf\xbc\x5f\x8d\x52\x19\x23\xff\x3d\xbc\x24\xee\x46\x6b\xdc\xeb\x56\x4a\xe3\x9d\xfc\xe4\x1b\x8e\x18\x09\x69\x57\x39\xb4\xc1\xcf\xc5\x4c\x87\x67\xcf\x94\x47\x2e\x65\xae\xc7\x85\x6a\x97\x6d\x30\x5b\x00\x07\x7e\x76\xea\x9f\x19\xda\x45\xa1\x87\x19\xc3\xfe\x02\x38\xa6\xf5\xc5\xb4\x1c\x6d\x38\x00\x23\x78\xab\xcf\xc7\x0e\xb8\x56\x54\xa7\xd1\x1f\x61\x97\x27\xd2\x23\xdd\x81\x8e\x39\x81\x45\xdc\x65\x83\x8c\xb9\x6d\x43\xcb\x41\xc9\xd7\x99\xa3\x4f\x1e\xb2\xe8\x09\x7d\xb2\x22\x47\x8e\x05\x53\x0b\xcc\x1f\x92\x01\x4d\x7a\x85\xe2\x07\xdb\x9c\xe8\xf6\x17\xf0\x11\x7e\x01\x8b\x87\x8f\xe8\x46\xc0\x26\xd0\x12\xc4\x1c\x48\xdb\x73\xcb\xfc\xe7\x1c\x4a\x09\xd3\x7f\x96\x22\xf7\xc2\x29\x35\x89\x3c\xa9\xa0\x31\xb5\x66\x8e\xad\x27\x87\xb6\x30\x28\x47\x4e\xb1\x57\xf7\x62\x27\x3f\xb9\x01\xf1\x7f\x67\xc9\xe1\x1a\xf7\xd0\xf8\xa8\x35\xee\xb6\x39\x93\xcb\x9a\xda\xe0\xf7\xd9\xd4\x42\x9f\xf4\xb1\x39\x6a\x14\x1d\xa4\x86\x4d\x6b\x04\x3f\xab\x93\x4b\xd1\x4b\xcb\x70\xac\x45\xce\x11\xfe\xa8\xa9\xde\x59\x97\x9c\x08\x8c\xcb\x44\x55\xc4\xab\xcb\x3e\xa4\x58\x50\xda\xa2\x26\x80\x68\x99\x90\x91\x39\x88\x96\xfb\x4a\x8b\xe4\x24\xf7\x07\xad\xf0\x8d\xc1\xc5\x00\x40\xeb\xce\xb4\xe0\x07\x93\xd2\x70\x74\x53\xb8\xc6\xbd\x6e\xcf\xa0\xf3\x21\xe6\xab\xf7\xdb\xe5\xbb\x3c\x1c\xd2\xbf\x51\x4c\x89\x17\xfa\x38\x89\x07\x7b\xfa\x2f\x74\x3b\xb5\x27\xba\xf3\xc1\x98\x4e\x1e\x6c\x38\x9b\xc1\x51\x72\xfa\xe8\x66\x3c\x35\x3e\xa2\x99\xf9\x6f\xf8\xe1\xdd\x3f\x9a\xf3\x32\xa4\xfe\xc9\x19\x5b\x39\xe0\xc6\xbc\xad\x00\xc9\xf2\x45\x6c\x23\x4a\x3e\x9f\x0d\x8c\x84\xee\x62\x8e\xbc\x30\xa6\xfc\x70\x46\x0e\x63\x7e\x84\xf4\x37\x37\x88\xf1\xfe\xd4\xbd\xc2\x55\x81\x26\xfc\xa8\x41\x53\x23\x94\x36\xc8\x75\xc2\xfb\xde\xe8\x43\x15\xc2\xb3\xfd\xa9\x7c\x57\x92\xc1\xa1\x1d\x8c\xdc\xa7\x12\xfe\xfe\x58\x10\xaa\x4e\x29\x5d\xd0\xd1\xf3\xaa\x22\xb0\x82\x9a\x65\x1c\xbe\x9d\xda\xd0\xbc\xb3\xa4\xe0\x6d\x49\xb0\x84\x37\xb5\x10\x19\x00\x1b\xde\x42\x1b\x5a\x06\xcc\x89\x71\x0e\xdd\xc9\x02\x47\x70\x0c\x93\x05\xea\x33\x43\x1f\x41\x65\xc9\xd6\x14\xe8\x86\x63\x4e\x2d\xd0\x9c\x0a\x2a\x08\x5f\x4d\x08\x0a\x68\x29\x92\x19\x94\xd6\xdc\x79\xef\xa8\x14\x1a\xb3\xc1\xa5\x4d\xef\x32\x70\x3f\xa6\x2a\xf2\x3f\x21\xb2\xba\xbe\x1f\x61\xc6\xda\x51\x35\x13\xc8\x31\xe0\xdd\xf1\x18\x90\xfa\x46\x15\xde\x48\xc4\x38\x62\x18\xd3\x22\x34\x72\x96\xb9\x2e\x0c\xfe\x7a\x3d\x48\x35\x14\x5f\x51\x1c\x05\x6a\x89\x76\x3d\xf8\x61\x41\xa0\x1a\xc4\x7a\xb6\xa1\xfb\x88\x54\x2a\xa4\xc8\x66\xe7\x90\x39\x28\xf5\xf1\x73\x49\xd6\x49\xf6\x4c\x13\x5b\x57\x77\xe2\x54\xa6\x93\xc3\xa7\xb2\x3f\xa1\xb3\x8b\x74\xde\xee\xea\x2a\xea\x24\x1f\x0f\x95\x42\x15\xd6\xd9\x67\x9a\x94\xc4\x23\x3d\xf3\xa6\xc9\x64\x72\x0c\x79\x21\xa1\x4b\x97\xe1\x83\x85\x46\x7a\xcb\x90\x49\x9f\x4d\x8e\x12\xf2\x1a\xc6\xbc\xaf\x22\x34\x53\x47\xeb\x99\xbf\x22\xc1\x76\x98\xfa\x28\xde\xf9\xd2\x97\xbb\x2c\x9b\xe1\xaf\x31\x16\x25\xfb\x09\xbc\x2c\xd3\xe1\x45\x64\xc7\x11\x23\x6b\xe4\xb2\xad\xa4\x1e\xa7\x2d\x55\xd1\x24\x4a\xd4\x93\x34\xbd\x16\xbc\x33\x45\xd0\xed\xa5\x2b\x42\x44\xc5\xc5\xaa\xf7\x97\x69\x8a\x5b\x46\xd0\x6e\x34\x65\x8f\xe5\x0a\xad\xaa\xc0\x40\xd9\x36\xaf\x53\xb0\x63\xec\x2b\x30\x2b\x4c\x7f\x92\xde\xa6\xa5\x6e\xd7\x5c\x36\x86\x31\x57\x0b\xc6\x3c\xe6\xea\xd2\x42\x67\x27\x90\x17\x92\x3f\x2b\xc4\xa3\x1a\xab\x11\xbf\x76\xc0\xf4\x3d\x88\x5b\x11\x6d\x74\xf3\x9a\x0f\x13\x7f\x71\x59\xd2\xda\x14\x01\xf9\x79\x64\xf9\x1e\xb3\x22\x68\x32\x35\x65\x37\x24\x6a\x50\x9d\x1c\x00\x0d\x86\xeb\x8c\xa3\xa7\xf8\x7b\xd5\x5e\x25\x4b\xfb\x57\xc1\x1c\xda\xf3\x57\x02\x1c\x87\xf3\x1f\x7f\xd9\xe1\x72\xf3\xe3\x9c\x14\xb7\x8b\x97\xe8\x11\xbf\xf4\x94\x30\x33\x6d\xa7\x27\x4d\x79\x71\x80\xbf\xc6\x24\xc2\x7e\x92\x80\xa9\xcb\xe3\x08\x37\xf4\x5b\x94\xfb\x8f\xe1\x6f\xd7\xc5\x8e\xfc\xf5\xd4\x1d\xc9\xc2\x29\x20\x8c\x9f\x33\x7b\xc2\x04\x01\xe2\x1d\x89\x4f\x22\x9a\x54\xfc\xad\x10\xf8\x6a\x0a\xa7\xa9\x0c\xc2\xd6\xba\x69\xae\x8a\xd4\x42\xec\x52\xfa\x7f\x0b\x03\x91\x03\xff\x8f\x44\xa0\x79\x02\xb3\xe4\xb4\x6e\x5e\x72\xf4\xaf\x9f\x5e\x4f\x69\xa0\x7a\x1f\x9f\xe3\x7f\xfd\x1e\xbe\xec\xb7\x2d\x37\xf0\x25\xa1\x86\xbb\x77\xb9\xbc\x83\x6c\x67\x1a\xef\x42\x42\xc5\x8a\xc4\x69\x5d\xd6\xcf\x71\x00\x8c\xe9\x64\x02\x2d\x07\xbc\xa1\x18\xfb\xd8\x07\xab\x30\x02\x11\x5e\xe1\x28\x21\xf8\x0c\x10\x0a\xf8\x86\x30\xe0\x85\x41\xbc\xa5\x20\x8c\x7c\x1c\xbd\x69\xb2\xc4\x3b\x52\x25\x39\xf7\x9f\x90\x2b\xa5\x17\xd6\x55\xb2\x94\xfe\xfc\x5d\xd9\x92\xdc\x53\x85\x6c\x14\x46\xbb\xf1\x25\xa9\xa0\xe0\x2d\x45\xe4\x17\x9a\xca\xb1\x12\x96\xe0\xe3\x2c\xce\x54\x35\xfe\x27\x69\x3a\xd0\xb4\xa9\xf9\xd8\x91\x84\xa9\xbb\xa3\x2d\x7c\xbc\x24\x1c\xb9\x5b\xd9\x85\x39\xd0\x3d\x29\xb0\x64\x16\x6f\x41\xb8\x02\x7c\x83\x81\x00\x55\x06\x78\x28\x71\x24\xb5\x2d\x60\x26\xf9\xcc\x9f\xdf\x14\x29\xd3\x3f\xd3\x96\x74\xca\x2e\xc6\x02\x97\x63\xc6\x51\xbd\xd1\xd3\x67\x57\x41\x71\xe4\xca\x09\x75\x8b\x4a\x45\x55\x11\x1d\x7f\x54\x56\x6d\x9d\xd0\x77\x0b\xd7\x7d\xbd\x83\xc2\xfc\x58\x9c\x64\x43\xd7\xa3\xed\x88\xf7\xf6\x24\x0a\xbd\xa3\xc4\xf3\x13\x3d\xa5\x10\xe8\x38\xd8\x10\xbe\x9c\x26\x42\xc5\xab\x5f\x77\x86\x13\x8f\x7f\xba\x95\x6d\xbd\xf6\x8d\xbb\x95\x5a\xd4\xdd\x62\xf5\x7d\xca\xdb\x77\xf5\x97\x66\xe2\xf5\x52\x32\xa7\x53\x7b\x2f\x8d\x0a\x65\x91\xa7\xd4\x0f\xb9\x14\xb8\xba\x02\x43\x70\x05\x0c\x1c\x71\xb2\x22\x9e\xcb\xb1\xf3\xb2\xc3\x97\xe0\x2d\xb8\x02\x33\x1e\x61\x77\x9b\xfc\x0d\xd8\x26\x8c\x03\x1f\xd0\x90\x83\x25\x06\x9c\xd0\x17\x42\x39\x08\xc8\x96\x70\x06\x5c\x06\x96\x61\x18\x00\xf6\x35\x58\x86\x24\xc0\x51\x7a\x7f\x1b\x2f\x03\xc2\x36\x38\x3a\x6b\x41\x39\x8c\x2a\x9c\xcf\x05\x46\xb2\x2e\xd3\x07\x4f\x84\x6f\xaa\x93\xcf\x20\xb4\xb0\xcf\xc8\xba\xdc\x3d\x3a\xed\x98\xbd\xc2\x4e\xa9\x13\xcd\xfc\x4a\x59\x3f\x3c\xb9\x8e\xee\xda\xd8\xcf\xfb\xea\xfd\x3d\x77\x12\x24\x1d\xb9\x4c\x96\xdb\x13\x38\x32\xe7\x13\x51\xb6\xb6\xc9\xfd\x47\x94\x0d\x85\x60\x7a\x47\x7d\x75\x05\x74\xdf\x27\xc9\x12\xdc\x00\xac\x08\x0e\x7c\x99\xe0\xb0\xcb\x5e\x00\xa1\x3e\x7e\x26\x74\x9d\x64\x44\x26\xfc\x0b\x24\xde\xc9\xd2\xc4\x1f\xf3\x4d\x18\x29\xd5\xf7\xf0\xed\x20\x4f\xf4\xf2\x56\x80\x54\x8d\xa6\x7d\x0e\xca\x93\xda\xa9\x7c\x9d\x31\xfc\xed\xed\xa9\x2f\x41\x18\xa2\x88\xa1\x15\x7a\xea\x56\x77\x07\x2e\x5d\xc7\xee\xba\x8f\xab\x14\xbe\x89\xb7\x4b\xea\x92\x40\x36\x3d\xd5\x17\x67\x84\x07\x65\xcf\x3b\xe2\xc9\xc8\x0a\x63\xe4\xc5\x51\x12\x41\x2f\x69\x34\xfe\x9a\xb7\x51\x09\x43\x2b\x12\x70\x1c\x75\x6d\xb0\x2c\x89\x8f\x18\x17\x81\xa0\x2e\x38\x93\xff\x45\xf7\x3c\xbc\xe3\xd8\xff\xe5\x07\x7f\xf9\xd6\x44\x90\x04\xb6\xec\xef\x60\x08\x91\x3d\x44\xa7\xf5\xc9\x45\x85\xf0\x1c\xf3\xf0\x62\xcf\x4c\x1e\x32\xa4\x13\x3d\x03\x15\x76\xcb\xd6\xbd\x6c\x65\x79\x9e\x39\xca\x76\xb5\x6b\x2d\x6c\xcf\x29\xf9\x1a\xd7\x5e\x71\x28\x1b\x70\x99\xe6\xc7\x4b\x25\xbd\xb5\x3c\x13\x14\x0a\x0d\x15\x65\xd3\x4b\x89\x12\xf2\xb6\xdc\x49\xa8\x32\x83\x81\xc8\x6c\xca\x4f\x02\x65\xaa\xd4\xc8\xa8\xef\x47\x8d\x3e\x55\x8f\xfa\x88\x37\x2b\x72\x39\x5d\xee\x1c\x84\x64\xf3\x95\x43\x1a\x37\x55\x61\x3d\x45\x4a\x2d\xc3\x4c\x6d\xf8\xf7\x61\xc3\x4d\x8c\x9c\x83\x44\x47\x47\x80\xa3\x56\x06\xcb\x96\x21\xe3\x1c\xd0\xb4\x02\xdc\xda\x76\x47\xe2\x92\x96\x02\x94\x9c\xc9\xab\x26\x92\x2c\xde\xed\xc2\x68\x4f\x07\x20\x15\xc0\x3e\xea\x9d\xb2\xa5\xaa\xbb\xd6\x99\x67\x00\x72\xef\xcd\x89\xae\x74\xb8\x11\x76\xb3\x3d\x6f\x07\xde\xd5\x23\xca\xf7\x3d\x87\xb2\x86\x93\xe8\x15\xf4\x14\x67\x4f\xf7\x57\x53\x36\xbb\x1e\x11\xe5\x19\x12\xbf\x6d\x8e\xb5\x81\xbc\x3d\x9d\xb4\xb4\x7f\xe5\x3e\x6b\xa5\x9b\x6e\xe5\x73\x18\xf3\xfc\x7a\xb5\xf5\x7e\xfc\x55\x87\x69\x4c\x1f\x69\xf8\x44\xd1\x81\xba\xef\xa8\xc2\xab\xe0\x8e\xf5\xff\x08\x44\x58\xfa\x0c\xa5\x23\x49\xea\xf3\x3f\x6d\xfc\x11\x71\x7a\xe4\xfd\x70\x0f\x15\x44\x13\x30\xa4\xa7\xec\xd5\x69\x59\x95\x3f\x88\x86\x43\xbd\xa5\x51\xb1\xd7\xc2\x1f\xca\x52\x83\x16\xe6\xa7\x4e\x26\xfc\x6e\x97\xd0\x4a\x14\xcf\x85\x41\x91\x67\x1b\xde\xf6\x16\xc8\xd0\x3c\xa4\xf1\x9e\xbc\x5d\xdc\x79\xce\xd4\xd7\xe1\xe7\x47\x40\x8a\xff\x05\x00\x00\xff\xff\x66\xf8\x2c\xa1\x12\x38\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 14354, mode: os.FileMode(420), modTime: time.Unix(1523676041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migration001_claimcolumnsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x8a\xdb\x30\x14\x45\xf7\xfe\x8a\xb7\x4c\xe8\x0c\x4c\xe9\x2c\x02\x43\x16\x8a\xf5\x92\x8a\xc8\x52\x90\x64\xda\x74\x23\xa9\x8e\x92\x11\x24\xb2\x71\xe4\x40\xff\xbe\x38\x1d\xdc\x45\xe9\xcc\xf2\x71\xb9\xe7\x4a\xe7\xf1\x11\x3e\x5d\xe2\xa9\xf7\x39\x40\xdd\x15\xa5\x42\x62\x10\x0c\x59\x71\x04\xb6\x06\x21\x0d\xe0\x77\xa6\x8d\x06\xe7\xbb\xee\x1c\x1b\x9f\x63\x9b\xec\x35\xfb\x3c\x5c\x5d\x31\x2b\x00\x5c\x3c\x38\xd0\xa8\x18\xe1\x0f\xe3\xe9\xbb\xce\xde\x42\x7f\x8d\x6d\x72\xc0\x84\xb9\x43\x44\xcd\xff\xa4\x07\x9f\xfd\x14\xff\x93\xfa\x2e\xfe\x27\x2c\x00\x76\x8a\x55\x44\xed\x61\x8b\x7b\x70\xbb\xad\x1d\x77\x67\xe3\xfa\xbc\x98\xa3\xd8\x30\x81\x4b\x96\x52\x4b\x57\x40\x71\x4d\x6a\x6e\xa0\xfc\x4a\x94\x46\xb3\x1c\xf2\x71\x71\xf9\xf9\x0c\xa5\xe4\x7c\xfc\xdf\xdb\x6d\x87\x14\x9b\xf6\x10\x6c\x13\x41\xc9\x6f\x76\x2d\x55\x45\xcc\xb2\x94\xd5\x4e\xa1\xd6\x48\xc7\x29\xbb\xe2\xb2\xdc\x5a\xcd\x7e\xe0\xf2\xf9\xa5\x28\x08\x37\xa8\xde\x0c\x35\x67\x1f\x2f\x50\x49\xca\xd6\xfb\x11\x5e\x57\x02\xdc\x31\x04\xdb\x0c\x7d\x1f\x52\xf3\xcb\xdd\x9f\x30\xfb\xf2\x34\x7f\xf9\xb8\x78\xf6\xe9\x34\xf8\x53\x78\xbf\x44\x28\x9d\x1a\x37\x7f\x8e\x07\xeb\xb3\x7d\x0d\xf1\xf4\x9a\xef\xba\x71\x83\x0a\x6a\xa1\xd9\x46\x20\x9d\x04\x7e\x44\x0a\xc7\x63\x68\x72\xbc\x05\xeb\x2f\xed\x90\xb2\x03\x2a\xeb\x15\xc7\xd9\xe7\xc5\xc3\x62\x3e\x09\x7d\xfa\x0b\xfc\x1d\x00\x00\xff\xff\xa3\x03\x9e\x71\x3a\x02\x00\x00")

func migration001_claimcolumnsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration001_claimcolumnsSql,
		"migration/001_claimcolumns.sql",
	)
}

func migration001_claimcolumnsSql() (*asset, error) {
	bytes, err := migration001_claimcolumnsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/001_claimcolumns.sql", size: 570, mode: os.FileMode(420), modTime: time.Unix(1523675396, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
	"migration/001_claimcolumns.sql": migration001_claimcolumnsSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
		"001_claimcolumns.sql": &bintree{migration001_claimcolumnsSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

