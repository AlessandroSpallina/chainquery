// Code generated by go-bindata.
// sources:
// migration/000_init_schema.sql
// DO NOT EDIT!

package migration

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migration000_init_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x73\xdb\xb8\x15\x7e\xf7\xaf\xc0\xec\xcb\x52\x53\x7b\xc6\xf2\x26\xdb\x74\x3a\x79\xa0\x29\x3a\xe1\x46\xa2\x5c\x91\x4a\x93\xbe\x40\x10\x09\x49\xa8\x29\x90\x21\xc0\xd8\xea\xaf\xef\x10\xe0\x05\xbc\x49\x94\xac\x74\x63\x4f\x1f\x6d\x7e\xb8\x9f\xf3\x9d\xef\xe0\x40\x57\x57\xe0\x2f\x5b\xb2\x8e\x11\xc7\x60\x1e\x5d\x5c\xa8\x7f\x3b\x1c\x71\xbc\xc5\x94\xdf\xe2\x35\xa1\x17\xc6\xcc\xd4\x5d\x13\x38\xc6\x47\x73\xa2\x03\xeb\x0e\xd8\x53\x17\x98\x5f\x2c\xc7\x75\xc0\xc2\xdb\x20\x42\xbf\x25\x38\xde\x2d\xc0\xc8\xbc\xd3\xe7\x63\x17\x18\x1f\xf5\x99\x6e\xb8\xe6\x0c\x38\xa6\x0b\x02\xc4\x09\x1d\x02\x63\x3a\x1e\xa7\xdd\xc8\x3f\xe1\x1a\x53\x1c\xa3\x00\x7a\x04\xfc\xbd\x7d\x70\x93\xfa\x7d\xa6\xe5\xea\xb7\x63\xb3\x3e\xab\x65\x10\x7a\x0f\x8b\x0b\xed\x02\x00\x00\x16\xc4\x5f\x00\xc7\x9c\x59\xfa\xf8\xf2\x42\xfe\x67\x49\x38\x5b\x80\xcf\xfa\x2c\x9d\xaa\x76\x73\x3d\x10\xad\xed\xf9\x78\x7c\x29\x01\x62\x59\x8f\x61\xfc\x50\xa2\xfe\x7a\x3d\x38\x76\x65\xf5\x4e\x43\xba\x22\xf1\x16\x71\x12\x52\xb6\x00\x96\xed\x9a\x1f\xcc\x19\x98\xdb\x8e\xf5\xc1\x36\x47\x75\xb8\x4f\x56\x2b\xe2\x25\x01\x4f\xb7\x76\x3a\xbf\x1d\x9b\xda\xf0\xdd\xe5\xbb\xc6\x5c\x37\x88\x6d\xce\x32\x4d\x90\x77\x88\xc9\x7a\xc3\x17\xe0\xd6\xfa\x60\xd9\x6e\xe7\xfc\xb6\xd8\x27\x88\x42\x4e\xb6\xb8\x07\x36\x7e\x08\x30\x8c\xc3\x90\x9f\x73\x47\x29\xda\x62\xe8\x05\x88\x6c\xcf\xdf\x75\x48\xbd\xc3\xeb\x8a\x62\xfc\x9d\x84\x09\x83\xc2\xe2\xe0\x73\x8f\x22\x1f\x1b\x3f\xf1\xf3\xf6\x28\x3b\x63\xe4\x3f\x87\x97\xc4\x51\xbc\xc6\x67\xdd\x4a\x39\x78\x2f\x3b\xf9\x8e\x63\x46\x42\xda\x17\x07\x37\xf8\xa9\x9c\xe9\xf0\xd9\x33\xe5\x31\xa2\x0c\x79\x5c\x74\x8d\xd8\x06\xb3\x05\x70\xcd\x2f\x6e\xf3\x33\x83\x51\x1c\x7a\x98\x31\xec\x2f\x80\x6b\xd9\x5f\x2d\xdb\xd5\x86\x83\x82\x03\xaf\x95\xae\x33\xef\x8f\x31\xe2\x29\x7a\xa4\xbb\xa6\x6b\x4d\xcc\xd2\xef\x0a\xe2\x9c\xcf\x66\xa6\xed\xc2\xf4\xab\xe3\xea\x93\xfb\xdc\x7b\x42\x9f\xac\xc8\x91\x6d\xc1\xd4\x06\xf3\xfb\xb4\x41\x5b\xbf\xa2\xe3\xfb\x99\x35\xd1\x67\x5f\xc1\x27\xf3\x2b\x58\xdc\x7f\x82\xb7\x82\x36\x81\x96\x32\xe6\x40\x8e\x3d\xb7\xad\x7f\xcc\x4d\x89\xb0\xfc\x27\x09\xf9\x28\x8c\x52\x93\xcc\x93\x01\x8d\xa9\xed\xb8\x33\x3d\x3d\xb4\x85\x41\x39\x74\xcb\xbd\xfa\x28\x76\xf2\x33\x0a\x88\xff\x07\x4b\x0f\xd7\xf8\x68\x1a\x9f\xb4\xd6\xdd\xb6\x1c\xb9\xac\xe9\x0c\xfc\xe1\x4c\x6d\xf8\x59\x1f\x5b\xa3\x56\xe8\x20\x1b\xd8\xb2\x47\xe6\x17\x75\x72\x19\x7b\x69\x39\x8f\x75\xe0\x5c\x61\x8f\x9a\x6a\x9d\x4d\xe4\x44\x70\x5c\x0e\x55\x19\xaf\x89\xbd\xcf\xb8\xa0\xb2\x45\x6d\x04\xd1\x31\x21\x23\x37\x10\xad\xb0\x95\x0e\xe4\xa4\xb0\x07\xad\xb4\x8d\xc1\xc5\x00\x98\xf6\x07\xcb\x36\xdf\x5b\x94\x86\xa3\xdb\x4a\x3c\x76\x4c\xf7\x7d\xc2\x57\xef\xb6\xcb\x37\x85\x3b\x64\x7f\xc3\x84\x12\x2f\xf4\x71\xea\x0f\xb3\xe9\x3f\xe1\xdd\x74\x36\xd1\xdd\xf7\xc6\x74\x72\x3f\x33\x1d\xc7\x1c\xa5\xa7\x0f\x6f\xc7\x53\xe3\x13\x74\xac\x7f\x99\xef\xdf\xfc\x80\x88\xad\x1c\x70\x6b\xdc\x56\x88\x64\xb9\x13\xdb\x08\xd3\xcf\xcf\x26\x46\x42\xa3\x84\x43\x2f\x4c\x28\x3f\x1c\x91\xc3\x84\x1f\x81\xfe\x8e\x82\x04\xef\x0f\xdd\x2b\x5c\x07\xb4\xf1\x47\x83\x9a\x5a\xa9\xb4\x05\xd7\x8b\xef\xcf\x26\x1f\xea\x14\x9e\xef\x4f\xed\xbb\x12\x0c\x0e\xed\x60\x8c\x1e\x2b\xfc\xfb\x73\x51\xa8\x3a\xa5\x6c\x41\x47\xcf\xab\xce\xc0\x0a\x6b\x56\x79\xf8\x6e\x3a\x33\xad\x0f\xb6\x04\xde\x55\x80\x15\xbe\x69\xb8\xc8\x00\xcc\xcc\x3b\x73\x66\xda\x86\x59\x08\xe3\x82\xba\xd3\x05\x8e\xcc\xb1\x99\x2e\x50\x77\x0c\x7d\x64\x2a\x4b\xb6\xa7\x40\x37\x5c\x6b\x6a\x83\xf6\x50\x50\x63\xf8\x7a\x40\x50\x48\x4b\x41\xe6\x54\xda\x30\xe7\xbd\xad\x32\x6a\xcc\x1b\x57\x36\xbd\x4f\xc3\xfd\x9c\xaa\xe0\x5f\x21\xb3\x22\xdf\x8f\x31\x63\xdd\xac\x9a\x03\x0a\x0e\x78\x73\x3c\x07\x64\xb6\x51\xa7\x37\x12\x33\x0e\x19\xc6\xb4\x74\x8d\x42\x65\xae\xcb\x01\x7f\xbb\x1e\x64\x3d\x94\x5f\x61\x12\x07\x6a\x8a\x76\x3d\xf8\x69\x49\xa0\xee\xc4\x7a\xbe\xa1\xfb\x84\x54\x06\x52\xb0\xf9\x39\xe4\x06\x4a\x7d\xfc\x54\xc1\xba\xe9\x9e\x69\x62\xeb\x9a\x46\x9c\x61\x7a\x19\x7c\x86\x7d\x85\xc6\x2e\xc2\x79\xb7\xa9\xab\xac\x93\x7e\x3c\x94\x0a\xd5\x54\xe7\x39\xc3\xa4\x14\x1e\xd9\x99\xb7\x4d\x26\xc7\x31\xe8\x85\x84\x2e\x11\xc3\x07\x13\x8d\xec\x96\x21\x47\x3f\x5b\x1c\xa5\xe2\x35\x4c\xf8\xb9\x92\xd0\xbc\x3b\xda\x8c\xfc\x35\x04\x8b\x30\xf5\x61\x12\xf9\xd2\x96\xfb\x2c\x9b\xe1\x6f\x09\x16\x29\xfb\x09\xba\x2c\xef\xc3\x8b\x49\xc4\x21\x23\x6b\x88\xd8\x56\x4a\x8f\xd3\x96\xaa\xf4\x24\x52\xd4\x93\x7a\x7a\x29\x7c\x67\x09\xa7\xdb\x2b\x57\x04\x44\xe5\xc5\xba\xf5\x57\x65\x0a\xaa\x32\x68\x3f\x99\xb2\x67\xe4\x9a\xac\xaa\xd1\x40\x75\x6c\xde\x94\x60\xc7\x8c\xaf\xd0\xac\x18\xfa\xb3\xb4\x36\x2d\x33\xbb\xf6\xb4\x31\x4c\xb8\x9a\x30\x16\x3e\xd7\x44\x8b\x3e\x7b\x91\xbc\x40\xb6\x53\x7c\x3b\xb6\x45\xcf\x35\x08\xf0\x15\x44\x07\xd8\x10\x44\xe2\xbf\x3d\xc2\xc1\x1e\xb2\xae\x41\x5b\x3d\xa4\x61\xfe\xc4\x5f\x5c\x56\x7a\x6d\x73\x9e\xe2\x78\x72\xa9\x80\x59\xe9\x6f\x79\x37\x55\x0b\x26\xaa\x3f\x9e\xec\x3b\x2d\x03\x37\xc5\xca\x99\x5c\xf7\x45\x5b\x95\xbc\x15\x78\x11\xa2\xa3\x3b\xf4\xa5\x9c\x73\x38\x74\xf2\x5d\x84\xab\x75\x93\xe7\x44\xc7\x28\x59\xc2\x07\xbc\x3b\x53\xac\xcd\x7b\x3b\x3d\xde\xca\x3b\x07\xfc\x2d\x21\x31\xf6\xd3\xd8\x4d\x11\x4f\x62\xdc\x52\xaa\x51\xae\x4e\x86\xbf\x5f\x97\x3b\xf2\xf6\xd4\x1d\xc9\xdd\x29\x20\x8c\x3f\x67\xf6\x84\x09\xed\xc4\x7b\x6a\xa6\x14\x0a\x97\x3b\xd8\x49\x81\x2f\x26\xe7\x9a\x4a\x27\xec\x4c\xb9\xe6\x2a\xa4\xe1\x62\x97\xd2\xfe\x3b\xc4\x8b\x6c\xf8\x3f\xd4\x10\xed\x13\x70\xd2\xd3\xba\xdd\x15\xec\xdf\x3c\xbd\x33\x85\x81\xfa\x55\x7e\xc1\xff\xcd\x2b\xfc\xaa\xdd\x76\x5c\xde\x57\x40\x2d\xd7\xf6\x72\x79\x07\x85\xd2\x34\x89\x42\x42\xc5\x8a\xc4\x69\x5d\xb6\xc8\x13\x60\x4c\x27\x13\xd3\x76\xc1\xaf\x14\x63\x1f\xfb\x60\x15\xc6\x20\xc6\x2b\x1c\xa7\xb9\x01\x03\x84\x02\xbe\x21\x0c\x78\x61\x90\x6c\x29\x08\x63\x1f\xc7\xbf\x36\xf3\x63\x67\xb2\x00\x5a\x93\xa5\xb4\x9b\xb7\x6f\x07\xcd\x31\x08\x05\x1e\x62\x98\x81\xc7\x0d\x8e\x31\xe0\x1b\x0c\x74\x67\x02\xd2\xaf\x0c\xf0\x10\x2c\x31\x88\x50\xcc\xb0\x0f\x1e\x09\xdf\x00\x16\x61\xec\x37\x07\x9d\x26\x11\xef\x29\xed\xe4\x86\xbd\xc2\xf4\x3d\xbb\x60\xaf\x2b\xb4\xec\xdf\x3f\x54\xa2\xc9\x3d\x55\x14\x4e\x39\x68\x3f\x91\x26\x3b\x28\xc5\x52\x49\x37\x65\x4f\x55\x07\x0d\x2b\x9c\xf5\x2c\xa1\x56\x1f\xfc\xff\x4a\xed\x40\x91\xa9\x61\x63\x47\xaa\xb4\xfe\x86\xb6\xf0\xf1\x92\x70\x88\xb6\xb2\x6a\x74\xa0\xda\x53\x92\x8b\x93\x6c\x41\xb8\x12\x6c\x22\x98\x5c\x50\x89\x20\xaf\x6c\x6c\xc1\x6d\xe9\x67\xfe\xf4\x6b\x19\xa7\xfd\x67\x8e\x25\x8d\xb2\xcf\x60\x01\xe2\x98\x71\xd8\x2c\x4c\x9d\xb3\x0a\xa2\x18\x72\xed\x84\xfa\x79\xa5\xd2\x55\xe9\x1d\x7f\x56\x28\xef\x9c\xd0\x0f\x73\xd7\x7d\xb5\x8e\x72\xf8\xb1\x38\xc9\x96\x2a\x4d\xd7\x11\xef\xad\xa1\x94\xfd\x8e\x52\xcb\x4f\xfb\xa9\xb8\x40\xcf\xc6\x86\xb0\xe5\x2c\x10\x2a\x56\xfd\xb2\x23\x9c\x78\xac\xd4\x2f\x57\x3c\x6b\x9d\xbb\x5f\x7e\x47\xd1\x16\xab\xef\x69\x6e\xde\x34\x5f\xc6\x89\xd7\x56\xe9\x9c\x4e\xad\x15\xb5\x76\x28\x33\x4b\x25\x69\x29\x50\xe0\xea\x0a\x0c\xc1\x15\x30\x70\xcc\xc9\x8a\x78\x88\x63\x77\x17\xe1\x4b\x70\x03\xae\x80\xc3\x63\x8c\xb6\xe9\xdf\x80\x6d\xc2\x24\xf0\x01\x0d\x79\x2a\xb8\x38\xa1\x3b\x42\x39\x08\xc8\x96\x70\x06\x10\x03\xcb\x30\x0c\x00\xfb\x16\x2c\x43\x12\xe0\x38\xbb\x6f\x4e\x96\x01\x61\x1b\x1c\x3f\x6b\x41\x05\x8d\x2a\x42\x13\x01\x23\x5d\x97\x95\x69\xbe\xda\xe4\x73\x0a\x2d\xc7\x67\x64\x5d\xad\x76\x9d\x76\xcc\x5e\x39\x4e\xa5\x72\xce\xfc\xda\x5d\xc2\xf0\xe4\xe4\xbd\xef\x43\x84\xe2\x1d\xc0\xf9\x9e\x67\x89\xcc\x00\x22\x26\x73\xfc\x89\x39\xb2\xe6\x13\x91\x2b\x77\xe1\xfe\x2d\x72\x95\x12\x58\x7e\x27\x3e\x44\x1c\xe6\x2f\x1d\x0f\xf9\x45\x5f\x1c\x5e\xad\xb0\xc7\xc9\x77\xdc\x37\x04\x67\x97\xfc\x57\x57\x40\xf7\x7d\x92\xee\x29\x0a\xc0\x8a\xe0\xc0\x97\x11\x17\x23\xb6\x03\x84\xfa\xf8\x89\xd0\x75\x1a\xa2\x99\x30\x78\x90\xba\x0b\xcb\x94\x48\xc2\x37\x61\xac\xdc\x41\x0c\x6f\x06\x85\xf2\x90\x39\x0c\x69\xdd\x05\x2f\xa4\x3c\xcd\x20\xab\x97\x3a\xc3\xdf\x6f\x4e\x7d\x4a\xc3\x20\x85\x0c\xae\xe0\x63\xbf\xdb\x87\x00\xd1\x75\x82\xd6\xe7\xb8\x50\xe2\x9b\x64\xbb\xa4\x88\x04\xb2\x6a\xac\x3e\xd9\x23\x3c\xa8\xba\xc2\x11\x6f\x6e\x56\x18\x43\x2f\x89\x53\x97\xde\x65\xf4\xf0\x5b\x51\x87\x26\x0c\xae\x48\xc0\x71\xdc\xb7\x42\xb5\x24\x3e\x64\x5c\x78\xa6\xba\xe0\x1c\xff\x8b\xee\x79\x38\xe2\xd8\xff\xe5\x27\x7f\x3a\xd8\xa6\xd8\x04\xd9\xed\x2f\x01\x09\xc8\x1e\xe5\xd5\xf9\x66\xa5\xa6\xc0\x8e\x79\xb9\xb2\x67\x26\xf7\x39\xf5\x8a\xa2\x8b\x1a\x07\xaa\xa3\x7b\xf9\xca\x8a\xc0\x77\xd4\xd8\xf5\xb2\xbf\x18\x7b\x4e\xc9\xb7\xa4\xf1\x0c\x46\xd9\x80\xcb\x2c\x60\x5f\x2a\xf1\xb6\xe3\x9d\xa5\xe8\xd0\x50\x69\x3f\xbb\x9a\xa9\x84\x82\x8e\x9b\x19\x15\x33\x18\x88\x50\xab\xfc\x4b\xb0\x4c\x5d\xab\x19\xcd\xfd\x68\xe8\xb9\xfa\x51\x1f\xf1\xe8\x47\x2e\xa7\xcf\x25\x88\x40\xf6\xac\x6f\x09\xac\xb8\xbd\xd2\x79\xf9\x3e\xb4\x1e\x06\x3a\xda\xdd\x12\xdf\x91\x6e\xab\x29\x3e\xdc\x01\xb6\x91\x5c\xaa\x50\x52\xf2\xbe\xe8\xf2\xe2\xa2\x15\xaa\x67\xc4\xad\xe5\x14\xae\x0d\xff\x36\x6c\xb9\x1e\x93\x5b\x22\xc9\xda\x15\x5c\xad\x55\xb9\xbb\xa3\xc9\xb8\xe0\x57\xad\xe4\xda\xae\xc3\x92\x34\xa9\x65\x7c\x29\x67\xf2\xa2\x85\x36\x4b\xa2\x28\x8c\xf7\x94\x65\x32\x00\xf6\xe1\xd9\x25\x6d\xd6\x75\x7f\x11\x70\x72\x7c\x38\x7b\xc5\xa8\x6f\xba\xd0\x1a\x05\xf2\x3d\xef\x8e\x03\xab\x07\x58\xec\x7b\xc1\xac\x2d\x27\x71\x56\x0e\x56\x8c\x9d\xf5\x71\xe4\xea\x0c\x89\xdf\x35\xc7\x46\x43\xde\x1d\xdd\x3a\xca\xf9\x72\x9f\xb5\x4a\xf9\x41\xf9\x1c\x26\xbc\xb8\xf3\xee\x2c\x5a\xbc\x68\x37\x4d\xe8\x03\x0d\x1f\x29\x3c\x90\x17\x1f\x95\x98\x96\x52\xb6\xf9\xc3\x2e\xc2\xb2\x67\x45\x3d\x35\xdb\x39\x7f\x84\xf3\x67\xf8\xe9\x91\xf7\xe7\x67\xca\xb0\xea\xc4\x90\x9d\xb2\xd7\x54\x89\x75\x39\x23\xaa\x40\xcd\x3a\x53\x6d\xbc\x0e\x39\x53\x45\x0d\x3a\x84\xa8\x3a\x99\xf0\x87\x5d\xd2\x2b\x5e\x3c\x17\x03\x4a\x2d\xd1\x7c\xab\x5d\x32\x43\x7b\x93\xd6\x3a\x42\x37\xdc\x7d\x7a\xa5\x8f\x77\x50\x14\x05\xa9\x2c\x15\x3f\x6c\xe0\x88\x27\xfb\x9e\x34\x47\x11\x54\x7f\x87\xd0\xb8\x92\x47\x1c\x15\x80\x96\xef\x28\x22\x1d\x9f\x5b\xcd\x5b\x86\x08\x22\xaa\x6f\x3f\xc1\x06\xff\x37\x00\x00\xff\xff\x87\x3e\x58\x0e\xdc\x3b\x00\x00")

func migration000_init_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migration000_init_schemaSql,
		"migration/000_init_schema.sql",
	)
}

func migration000_init_schemaSql() (*asset, error) {
	bytes, err := migration000_init_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migration/000_init_schema.sql", size: 15324, mode: os.FileMode(420), modTime: time.Unix(1524360278, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migration/000_init_schema.sql": migration000_init_schemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"migration": &bintree{nil, map[string]*bintree{
		"000_init_schema.sql": &bintree{migration000_init_schemaSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

