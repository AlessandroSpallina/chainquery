{{>partial_header}}
package {{packageName}}

import (
    "fmt"
    "net/http"
    "strings"
    "encoding/json"

    "github.com/lbryio/chainquery/apis"
    "github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"{{{basePathWithoutHost}}}/",
		Index,
	},{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}

	Route{
		"{{operationId}}",
		strings.ToUpper("{{httpMethod}}"),
		"{{{basePathWithoutHost}}}{{{path}}}",
		Handle{{operationId}},
	},{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}
}

// Processes the response information and sends it back.
func process(w http.ResponseWriter, response *apis.Response) {
    jsonBytes, err := json.MarshalIndent(response, "", "  ")
    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        w.Write([]byte("Error encoding response to json"))
    }
    _, err = w.Write(jsonBytes) //Ignore bytes written
    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        w.Write([]byte("Error encoding response to json"))
    }
}