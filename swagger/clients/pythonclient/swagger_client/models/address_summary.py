# coding: utf-8

"""
    Chain Query

    The LBRY blockchain is read into SQL where important structured information can be extracted through the Chain Query API.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddressSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'total_received': 'float',
        'total_sent': 'float',
        'balance': 'float'
    }

    attribute_map = {
        'address': 'Address',
        'total_received': 'TotalReceived',
        'total_sent': 'TotalSent',
        'balance': 'Balance'
    }

    def __init__(self, address=None, total_received=0.0, total_sent=0.0, balance=0.0):  # noqa: E501
        """AddressSummary - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._total_received = None
        self._total_sent = None
        self._balance = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if total_received is not None:
            self.total_received = total_received
        if total_sent is not None:
            self.total_sent = total_sent
        if balance is not None:
            self.balance = balance

    @property
    def address(self):
        """Gets the address of this AddressSummary.  # noqa: E501


        :return: The address of this AddressSummary.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AddressSummary.


        :param address: The address of this AddressSummary.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def total_received(self):
        """Gets the total_received of this AddressSummary.  # noqa: E501

        Total amount received by address from all transactions it was a part of.  # noqa: E501

        :return: The total_received of this AddressSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_received

    @total_received.setter
    def total_received(self, total_received):
        """Sets the total_received of this AddressSummary.

        Total amount received by address from all transactions it was a part of.  # noqa: E501

        :param total_received: The total_received of this AddressSummary.  # noqa: E501
        :type: float
        """

        self._total_received = total_received

    @property
    def total_sent(self):
        """Gets the total_sent of this AddressSummary.  # noqa: E501

        Total amount sent from address for all transactions it was a part of.  # noqa: E501

        :return: The total_sent of this AddressSummary.  # noqa: E501
        :rtype: float
        """
        return self._total_sent

    @total_sent.setter
    def total_sent(self, total_sent):
        """Sets the total_sent of this AddressSummary.

        Total amount sent from address for all transactions it was a part of.  # noqa: E501

        :param total_sent: The total_sent of this AddressSummary.  # noqa: E501
        :type: float
        """

        self._total_sent = total_sent

    @property
    def balance(self):
        """Gets the balance of this AddressSummary.  # noqa: E501

        The current balance of an address  # noqa: E501

        :return: The balance of this AddressSummary.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AddressSummary.

        The current balance of an address  # noqa: E501

        :param balance: The balance of this AddressSummary.  # noqa: E501
        :type: float
        """

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
