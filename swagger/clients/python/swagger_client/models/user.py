# coding: utf-8

"""
    Internal APIs

    The internal apis of LBRY Inc.

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'language': 'str',
        'given_name': 'str',
        'family_name': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'auth_token': 'str',
        'is_token_confirmed': 'bool',
        'invited_by_id': 'int',
        'invited_at': 'datetime',
        'invites_remaining': 'int',
        'invite_reward_claimed': 'bool',
        'is_reward_approved': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'language': 'language',
        'given_name': 'given_name',
        'family_name': 'family_name',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'auth_token': 'auth_token',
        'is_token_confirmed': 'is_token_confirmed',
        'invited_by_id': 'invited_by_id',
        'invited_at': 'invited_at',
        'invites_remaining': 'invites_remaining',
        'invite_reward_claimed': 'invite_reward_claimed',
        'is_reward_approved': 'is_reward_approved'
    }

    def __init__(self, id=None, language=None, given_name=None, family_name=None, created_at=None, updated_at=None, auth_token=None, is_token_confirmed=None, invited_by_id=None, invited_at=None, invites_remaining=None, invite_reward_claimed=None, is_reward_approved=None):
        """
        User - a model defined in Swagger
        """

        self._id = None
        self._language = None
        self._given_name = None
        self._family_name = None
        self._created_at = None
        self._updated_at = None
        self._auth_token = None
        self._is_token_confirmed = None
        self._invited_by_id = None
        self._invited_at = None
        self._invites_remaining = None
        self._invite_reward_claimed = None
        self._is_reward_approved = None

        if id is not None:
          self.id = id
        if language is not None:
          self.language = language
        if given_name is not None:
          self.given_name = given_name
        if family_name is not None:
          self.family_name = family_name
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if auth_token is not None:
          self.auth_token = auth_token
        if is_token_confirmed is not None:
          self.is_token_confirmed = is_token_confirmed
        if invited_by_id is not None:
          self.invited_by_id = invited_by_id
        if invited_at is not None:
          self.invited_at = invited_at
        if invites_remaining is not None:
          self.invites_remaining = invites_remaining
        if invite_reward_claimed is not None:
          self.invite_reward_claimed = invite_reward_claimed
        if is_reward_approved is not None:
          self.is_reward_approved = is_reward_approved

    @property
    def id(self):
        """
        Gets the id of this User.

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.

        :param id: The id of this User.
        :type: int
        """

        self._id = id

    @property
    def language(self):
        """
        Gets the language of this User.

        :return: The language of this User.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this User.

        :param language: The language of this User.
        :type: str
        """

        self._language = language

    @property
    def given_name(self):
        """
        Gets the given_name of this User.

        :return: The given_name of this User.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """
        Sets the given_name of this User.

        :param given_name: The given_name of this User.
        :type: str
        """

        self._given_name = given_name

    @property
    def family_name(self):
        """
        Gets the family_name of this User.

        :return: The family_name of this User.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """
        Sets the family_name of this User.

        :param family_name: The family_name of this User.
        :type: str
        """

        self._family_name = family_name

    @property
    def created_at(self):
        """
        Gets the created_at of this User.

        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this User.

        :param created_at: The created_at of this User.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this User.

        :return: The updated_at of this User.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this User.

        :param updated_at: The updated_at of this User.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def auth_token(self):
        """
        Gets the auth_token of this User.

        :return: The auth_token of this User.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """
        Sets the auth_token of this User.

        :param auth_token: The auth_token of this User.
        :type: str
        """

        self._auth_token = auth_token

    @property
    def is_token_confirmed(self):
        """
        Gets the is_token_confirmed of this User.

        :return: The is_token_confirmed of this User.
        :rtype: bool
        """
        return self._is_token_confirmed

    @is_token_confirmed.setter
    def is_token_confirmed(self, is_token_confirmed):
        """
        Sets the is_token_confirmed of this User.

        :param is_token_confirmed: The is_token_confirmed of this User.
        :type: bool
        """

        self._is_token_confirmed = is_token_confirmed

    @property
    def invited_by_id(self):
        """
        Gets the invited_by_id of this User.

        :return: The invited_by_id of this User.
        :rtype: int
        """
        return self._invited_by_id

    @invited_by_id.setter
    def invited_by_id(self, invited_by_id):
        """
        Sets the invited_by_id of this User.

        :param invited_by_id: The invited_by_id of this User.
        :type: int
        """

        self._invited_by_id = invited_by_id

    @property
    def invited_at(self):
        """
        Gets the invited_at of this User.

        :return: The invited_at of this User.
        :rtype: datetime
        """
        return self._invited_at

    @invited_at.setter
    def invited_at(self, invited_at):
        """
        Sets the invited_at of this User.

        :param invited_at: The invited_at of this User.
        :type: datetime
        """

        self._invited_at = invited_at

    @property
    def invites_remaining(self):
        """
        Gets the invites_remaining of this User.

        :return: The invites_remaining of this User.
        :rtype: int
        """
        return self._invites_remaining

    @invites_remaining.setter
    def invites_remaining(self, invites_remaining):
        """
        Sets the invites_remaining of this User.

        :param invites_remaining: The invites_remaining of this User.
        :type: int
        """

        self._invites_remaining = invites_remaining

    @property
    def invite_reward_claimed(self):
        """
        Gets the invite_reward_claimed of this User.

        :return: The invite_reward_claimed of this User.
        :rtype: bool
        """
        return self._invite_reward_claimed

    @invite_reward_claimed.setter
    def invite_reward_claimed(self, invite_reward_claimed):
        """
        Sets the invite_reward_claimed of this User.

        :param invite_reward_claimed: The invite_reward_claimed of this User.
        :type: bool
        """

        self._invite_reward_claimed = invite_reward_claimed

    @property
    def is_reward_approved(self):
        """
        Gets the is_reward_approved of this User.

        :return: The is_reward_approved of this User.
        :rtype: bool
        """
        return self._is_reward_approved

    @is_reward_approved.setter
    def is_reward_approved(self, is_reward_approved):
        """
        Sets the is_reward_approved of this User.

        :param is_reward_approved: The is_reward_approved of this User.
        :type: bool
        """

        self._is_reward_approved = is_reward_approved

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
