/*
 * Chain Query
 *
 * The LBRY blockchain is read into SQL where important structured information can be extracted through the Chain Query API.
 *
 * API version: 0.1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
    "fmt"
    "net/http"
    "strings"
    "encoding/json"

    "github.com/lbryio/chainquery/apis"
    "github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/api/",
		Index,
	},

	Route{
		"SQLQuery",
		strings.ToUpper("Get"),
		"/api/SQL",
		HandleSQLQuery,
	},

	Route{
		"AddressSummary",
		strings.ToUpper("Get"),
		"/api/AddressSummary",
		HandleAddressSummary,
	},

	Route{
		"Status",
		strings.ToUpper("Get"),
		"/api/Status",
		HandleStatus,
	},
}

// Processes the response information and sends it back.
func process(w http.ResponseWriter, response *apis.Response) {
    jsonBytes, err := json.MarshalIndent(response, "", "  ")
    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        w.Write([]byte("Error encoding response to json"))
    }
    _, err = w.Write(jsonBytes) //Ignore bytes written
    if err != nil {
        w.WriteHeader(http.StatusInternalServerError)
        w.Write([]byte("Error encoding response to json"))
    }
}